window.__jscsData = {"githubOrganization":"jscs-dev","githubProject":"node-jscs","twitterAccount":"jscs_dev","mailingListName":"jscs-dev","rules":[{"name":"disallowAnonymousFunctions","description":"<h1 id=\"disallowanonymousfunctions\">disallowAnonymousFunctions</h1>\n<p>Requires that a function expression be named.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowAnonymousFunctions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>)</span>{\n\n};\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>)</span>{\n\n});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n\n};\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n\n});\n</code></pre>\n","shortDescription":"<p>Requires that a function expression be named.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-anonymous-functions.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-anonymous-functions.js","filename":"disallow-anonymous-functions.js"},{"name":"disallowArrowFunctions","description":"<h1 id=\"disallowarrowfunctions\">disallowArrowFunctions</h1>\n<p>Disallows arrow functions.</p>\n<p>Why enable this rule? Arrow functions might cause more problems than they\nsolve:</p>\n<ul>\n<li>Object-orientation may be better without ECMAScript&#39;s <code>this</code>.</li>\n<li>You can&#39;t name an arrow function.</li>\n<li>Arrow functions&#39; syntax can cause maintenance issues; see\n<code>disallowShorthandArrowFunctions</code>.</li>\n<li>Arrow functions shouldn&#39;t be used on prototypes, as objects&#39; methods,\nas event listeners, or as anything polymorhpic- or mixin-related. See\n<a href=\"https://gist.github.com/qubyte/43e0093274e793cc82ba#gistcomment-1292183\">here</a>.</li>\n</ul>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>Version: <code>ES6</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowArrowFunctions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// function expression in a callback</span>\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> x * x;\n});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// arrow function</span>\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].map((x) =&gt; {\n    <span class=\"hljs-keyword\">return</span> x * x;\n});\n</code></pre>\n","shortDescription":"<p>Disallows arrow functions.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-arrow-functions.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-arrow-functions.js","filename":"disallow-arrow-functions.js"},{"name":"disallowCapitalizedComments","description":"<h1 id=\"disallowcapitalizedcomments\">disallowCapitalizedComments</h1>\n<p>Requires the first alphabetical character of a comment to be lowercase.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<p><code>&quot;disallowCapitalizedComments&quot;: true</code></p>\n<p>Valid:</p>\n<pre><code>// valid\n//valid\n\n/*\n  valid\n */\n\n/**\n * valid\n */\n\n// 123 or any non-alphabetical starting character\n</code></pre><p>Invalid:</p>\n<pre><code>// Invalid\n//Invalid\n/** Invalid */\n/**\n * Invalid\n */\n</code></pre>","shortDescription":"<p>Requires the first alphabetical character of a comment to be lowercase.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-capitalized-comments.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-capitalized-comments.js","filename":"disallow-capitalized-comments.js"},{"name":"disallowCommaBeforeLineBreak","description":"<h1 id=\"disallowcommabeforelinebreak\">disallowCommaBeforeLineBreak</h1>\n<p>Disallows commas as last token on a line in lists.</p>\n<p>Type: <code>Boolean</code>, <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> for default behavior (strict mode, comma on the same line)</li>\n<li><code>Object</code>:<ul>\n<li><code>&#39;allExcept&#39;</code> array of exceptions:<ul>\n<li><code>&#39;function&#39;</code> ignores objects if one of their values is a function expression</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#laxcomma\"><code>laxcomma</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowCommaBeforeLineBreak\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-true\">Valid for <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    one: <span class=\"hljs-number\">1</span>\n    , two: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> y = {three: <span class=\"hljs-number\">3</span>, four: <span class=\"hljs-number\">4</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    one: <span class=\"hljs-number\">1</span>,\n    two: <span class=\"hljs-number\">2</span>\n};\n</code></pre>\n<h5 id=\"valid-for-allexcept-function\">Valid for <code>{&quot;allExcept&quot;: [&quot;function&quot;]}</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    one: <span class=\"hljs-number\">1</span>,\n    two: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}\n};\n</code></pre>\n","shortDescription":"<p>Disallows commas as last token on a line in lists.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-comma-before-line-break.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-comma-before-line-break.js","filename":"disallow-comma-before-line-break.js"},{"name":"disallowCurlyBraces","description":"<h1 id=\"disallowcurlybraces\">disallowCurlyBraces</h1>\n<p>Disallows curly braces after statements.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted keywords or <code>true</code> to disallow curly braces after the following keywords:</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowCurlyBraces\"</span>: [\n    <span class=\"hljs-string\">\"if\"</span>,\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"for\"</span>,\n    <span class=\"hljs-string\">\"do\"</span>,\n    <span class=\"hljs-string\">\"with\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x) x++;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x) {\n    x++;\n}\n</code></pre>\n","shortDescription":"<p>Disallows curly braces after statements.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-curly-braces.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-curly-braces.js","filename":"disallow-curly-braces.js"},{"name":"disallowDanglingUnderscores","description":"<h1 id=\"disallowdanglingunderscores\">disallowDanglingUnderscores</h1>\n<p>Disallows identifiers that start or end in <code>_</code>.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>Object</code>:<ul>\n<li><code>allExcept</code>: array of quoted identifiers</li>\n</ul>\n</li>\n</ul>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#nomen\"><code>nomen</code></a></p>\n<p>Some popular identifiers are automatically listed as exceptions:</p>\n<ul>\n<li><code>__proto__</code> (javascript)</li>\n<li><code>_</code> (underscore.js)</li>\n<li><code>__filename</code> (node.js global)</li>\n<li><code>__dirname</code> (node.js global)</li>\n<li><code>super_</code> (node.js, used by\n<a href=\"http://nodejs.org/docs/latest/api/util.html#util_util_inherits_constructor_superconstructor\"><code>util.inherits</code></a>)</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowDanglingUnderscores\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [<span class=\"hljs-string\">\"_exception\"</span>] }\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> o = obj.__proto__;\n<span class=\"hljs-keyword\">var</span> y = _.extend;\n<span class=\"hljs-keyword\">var</span> z = __dirname;\n<span class=\"hljs-keyword\">var</span> w = __filename;\n<span class=\"hljs-keyword\">var</span> x_y = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> v = _exception;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> _x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> x_ = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> x_y_ = <span class=\"hljs-number\">1</span>;\n</code></pre>\n","shortDescription":"<p>Disallows identifiers that start or end in <code>_</code>.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-dangling-underscores.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-dangling-underscores.js","filename":"disallow-dangling-underscores.js"},{"name":"disallowEmptyBlocks","description":"<h1 id=\"disallowemptyblocks\">disallowEmptyBlocks</h1>\n<p>Disallows empty blocks (except for catch blocks).</p>\n<p>Type: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> for default behavior (strict mode, no empty blocks allowed)</li>\n<li><code>Object</code>:<ul>\n<li><code>&#39;allExcept&#39;</code> array of exceptions:<ul>\n<li><code>&#39;comments&#39;</code> blocks containing only comments are not considered empty</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#noempty\"><code>noempty</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowEmptyBlocks\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> ( a == b ) { c = d; }\n<span class=\"hljs-keyword\">try</span> { a = b; } <span class=\"hljs-keyword\">catch</span>( e ){}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> ( a == b ) { } <span class=\"hljs-keyword\">else</span> { c = d; }\n</code></pre>\n","shortDescription":"<p>Disallows empty blocks (except for catch blocks).</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-empty-blocks.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-empty-blocks.js","filename":"disallow-empty-blocks.js"},{"name":"disallowFunctionDeclarations","description":"<h1 id=\"disallowfunctiondeclarations\">disallowFunctionDeclarations</h1>\n<p>Disallows function declarations.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowFunctionDeclarations\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> expressed = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n};\n\n<span class=\"hljs-keyword\">var</span> expressed = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deeply</span>(<span class=\"hljs-params\"></span>) </span>{\n\n};\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>{\n\n});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">stated</span>(<span class=\"hljs-params\"></span>) </span>{\n\n}\n</code></pre>\n","shortDescription":"<p>Disallows function declarations.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-function-declarations.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-function-declarations.js","filename":"disallow-function-declarations.js"},{"name":"disallowIdenticalDestructuringNames","description":"<h1 id=\"disallowidenticaldestructuringnames\">disallowIdenticalDestructuringNames</h1>\n<p>Disallows identical destructuring names for the key and value in favor of using shorthand destructuring.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowIdenticalDestructuringNames\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-mode-true\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> {left, top} = obj; <span class=\"hljs-comment\">// shorthand</span>\n<span class=\"hljs-keyword\">var</span> {left, top: topper} = obj; <span class=\"hljs-comment\">// different identifier</span>\n<span class=\"hljs-keyword\">let</span> { [key]: key } = obj; <span class=\"hljs-comment\">// computed property</span>\n</code></pre>\n<h5 id=\"invalid-for-mode-true\">Invalid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> {left: left, top: top} = obj;\n</code></pre>\n","shortDescription":"<p>Disallows identical destructuring names for the key and value in favor of using shorthand destructuring.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-identical-destructuring-names.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-identical-destructuring-names.js","filename":"disallow-identical-destructuring-names.js"},{"name":"disallowIdentifierNames","description":"<h1 id=\"disallowidentifiernames\">disallowIdentifierNames</h1>\n<p>Disallows a specified set of identifier names.</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of strings, which should be disallowed as identifier names</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowIdentifierNames\"</span>: [<span class=\"hljs-string\">'temp'</span>, <span class=\"hljs-string\">'foo'</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> good = <span class=\"hljs-number\">1</span>;\nobject[<span class=\"hljs-string\">'fine'</span>] = <span class=\"hljs-number\">2</span>;\nobject.fine = <span class=\"hljs-number\">3</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> temp = <span class=\"hljs-number\">1</span>;\nobject[<span class=\"hljs-string\">'foo'</span>] = <span class=\"hljs-number\">2</span>;\nobject.foo = <span class=\"hljs-number\">3</span>;\n</code></pre>\n","shortDescription":"<p>Disallows a specified set of identifier names.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-identifier-names.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-identifier-names.js","filename":"disallow-identifier-names.js"},{"name":"disallowImplicitTypeConversion","description":"<h1 id=\"disallowimplicittypeconversion\">disallowImplicitTypeConversion</h1>\n<p>Disallows implicit type conversion.</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of quoted types</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowImplicitTypeConversion\"</span>: [<span class=\"hljs-string\">\"numeric\"</span>, <span class=\"hljs-string\">\"boolean\"</span>, <span class=\"hljs-string\">\"binary\"</span>, <span class=\"hljs-string\">\"string\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x = <span class=\"hljs-built_in\">Boolean</span>(y);\nx = <span class=\"hljs-built_in\">Number</span>(y);\nx = <span class=\"hljs-built_in\">String</span>(y);\nx = s.indexOf(<span class=\"hljs-string\">'.'</span>) !== -<span class=\"hljs-number\">1</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x = !!y;\nx = +y;\nx = <span class=\"hljs-string\">''</span> + y;\nx = ~s.indexOf(<span class=\"hljs-string\">'.'</span>);\n</code></pre>\n","shortDescription":"<p>Disallows implicit type conversion.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-implicit-type-conversion.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-implicit-type-conversion.js","filename":"disallow-implicit-type-conversion.js"},{"name":"disallowKeywordsInComments","description":"<h1 id=\"disallowkeywordsincomments\">disallowKeywordsInComments</h1>\n<p>Disallows keywords in your comments, such as TODO or FIXME</p>\n<p>Types: <code>Boolean</code>, <code>String</code> or <code>Array</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&#39;\\b(word1|word2)\\b&#39;</code></li>\n<li><code>[&#39;word1&#39;, &#39;word2&#39;]</code></li>\n</ul>\n<h4 id=\"examples\">Examples</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowKeywordsInComments\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"disallowKeywordsInComments\"</span>: <span class=\"hljs-string\">\"\\\\b(word1|word2)\\\\b\"</span>\n<span class=\"hljs-string\">\"disallowKeywordsInComments\"</span>: [<span class=\"hljs-string\">\"word1\"</span>, <span class=\"hljs-string\">\"word2\"</span>]\n</code></pre>\n<h4 id=\"invalid\">Invalid:</h4>\n<pre><code>// ToDo\n//TODO\n/** fixme */\n/**\n * FIXME\n */\n</code></pre>","shortDescription":"<p>Disallows keywords in your comments, such as TODO or FIXME</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-keywords-in-comments.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-keywords-in-comments.js","filename":"disallow-keywords-in-comments.js"},{"name":"disallowKeywordsOnNewLine","description":"<h1 id=\"disallowkeywordsonnewline\">disallowKeywordsOnNewLine</h1>\n<p>Disallows placing keywords on a new line.</p>\n<p>Types: <code>Array</code></p>\n<p>Values:</p>\n<ul>\n<li><code>Array</code> specifies quoted keywords which are disallowed from being placed on a new line</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowKeywordsOnNewLine\"</span>: [<span class=\"hljs-string\">\"else\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>) {\n    x++;\n} <span class=\"hljs-keyword\">else</span> {\n    x--;\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>)\n    x++;\n<span class=\"hljs-keyword\">else</span>\n  *     x--;\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>) {\n    x++;\n}\n<span class=\"hljs-comment\">// comments</span>\n<span class=\"hljs-keyword\">else</span> {\n    x--;\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">do</span> {\n    x++;\n} <span class=\"hljs-keyword\">while</span>(x &lt; <span class=\"hljs-number\">0</span>);\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">do</span>\n    x++;\n<span class=\"hljs-keyword\">while</span>(x &lt; <span class=\"hljs-number\">0</span>);\n</code></pre>\n<ul>\n<li><pre><code class=\"lang-js\"><span class=\"hljs-keyword\">do</span> {\nx++;\n}\n<span class=\"hljs-comment\">// comments</span>\n<span class=\"hljs-keyword\">while</span>(x &lt; <span class=\"hljs-number\">0</span>);\n</code></pre>\n</li>\n</ul>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>) {\n    x++;\n}\n<span class=\"hljs-keyword\">else</span> {\n    x--;\n}\n</code></pre>\n","shortDescription":"<p>Disallows placing keywords on a new line.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-keywords-on-new-line.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-keywords-on-new-line.js","filename":"disallow-keywords-on-new-line.js"},{"name":"disallowKeywords","description":"<h1 id=\"disallowkeywords\">disallowKeywords</h1>\n<p>Disallows usage of specified keywords.</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of quoted keywords</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowKeywords\"</span>: [<span class=\"hljs-string\">\"with\"</span>]\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">with</span> (x) {\n    prop++;\n}\n</code></pre>\n","shortDescription":"<p>Disallows usage of specified keywords.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-keywords.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-keywords.js","filename":"disallow-keywords.js"},{"name":"disallowMixedSpacesAndTabs","description":"<h1 id=\"disallowmixedspacesandtabs\">disallowMixedSpacesAndTabs</h1>\n<p>Requires lines to not contain both spaces and tabs consecutively,\nor spaces after tabs only for alignment if &quot;smart&quot;</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values: <code>true</code> or <code>&quot;smart&quot;</code></p>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#smarttabs\"><code>smarttabs</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowMixedSpacesAndTabs\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-example-for-mode-true\">Valid example for mode <code>true</code></h5>\n<pre><code class=\"lang-js\">\\tvar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n\\s\\s\\s\\svar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n\\t<span class=\"hljs-comment\">/**\n\\t\\s*\n\\t\\s*/</span> <span class=\"hljs-comment\">//a single space to align the star in a multi-line comment is allowed</span>\n</code></pre>\n<h5 id=\"invalid-example-for-mode-true\">Invalid example for mode <code>true</code></h5>\n<pre><code class=\"lang-js\">\\t\\svar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n\\s\\tsvar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n</code></pre>\n<h5 id=\"valid-example-for-mode-smart\">Valid example for mode <code>&quot;smart&quot;</code></h5>\n<pre><code class=\"lang-js\">\\tvar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n\\t\\svar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n\\s\\s\\s\\svar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n\\t<span class=\"hljs-comment\">/**\n\\t\\s*\n\\t\\s*/</span> <span class=\"hljs-comment\">//a single space to align the star in a multi-line comment is allowed</span>\n</code></pre>\n<h5 id=\"invalid-example-for-mode-smart\">Invalid example for mode <code>&quot;smart&quot;</code></h5>\n<pre><code class=\"lang-js\">\\s\\tsvar foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n</code></pre>\n","shortDescription":"<p>Requires lines to not contain both spaces and tabs consecutively,\nor spaces after tabs only for alignment if &quot;smart&quot;</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-mixed-spaces-and-tabs.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-mixed-spaces-and-tabs.js","filename":"disallow-mixed-spaces-and-tabs.js"},{"name":"disallowMultiLineTernary","description":"<h1 id=\"disallowmultilineternary\">disallowMultiLineTernary</h1>\n<p>Disallows the test, consequent and alternate to be on separate lines when using the ternary operator.</p>\n<p>Types: <code>Boolean</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowMultiLineTernary\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = (a === b) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = (a === b)\n  ? <span class=\"hljs-number\">1</span>\n  : <span class=\"hljs-number\">2</span>;\n</code></pre>\n","shortDescription":"<p>Disallows the test, consequent and alternate to be on separate lines when using the ternary operator.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-multi-line-ternary.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-multi-line-ternary.js","filename":"disallow-multi-line-ternary.js"},{"name":"disallowMultipleLineBreaks","description":"<h1 id=\"disallowmultiplelinebreaks\">disallowMultipleLineBreaks</h1>\n<p>Disallows multiple blank lines in a row.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowMultipleLineBreaks\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n\nx++;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n\n\nx++;\n</code></pre>\n","shortDescription":"<p>Disallows multiple blank lines in a row.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-multiple-line-breaks.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-multiple-line-breaks.js","filename":"disallow-multiple-line-breaks.js"},{"name":"disallowMultipleLineStrings","description":"<h1 id=\"disallowmultiplelinestrings\">disallowMultipleLineStrings</h1>\n<p>Disallows strings that span multiple lines without using concatenation.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#multistr\"><code>multistr</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowMultipleLineStrings\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"multi\"</span> +\n        <span class=\"hljs-string\">\"line\"</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-string\">\"single line\"</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"multi \\\n        line\"</span>;\n</code></pre>\n","shortDescription":"<p>Disallows strings that span multiple lines without using concatenation.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-multiple-line-strings.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-multiple-line-strings.js","filename":"disallow-multiple-line-strings.js"},{"name":"disallowMultipleSpaces","description":"<h1 id=\"disallowmultiplespaces\">disallowMultipleSpaces</h1>\n<p>Disallows multiple indentation characters (tabs or spaces) between identifiers, keywords, and any other token</p>\n<p>Type: <code>Boolean</code> or <code>Object</code></p>\n<p>Values: <code>true</code> or <code>{&quot;allowEOLComments&quot;: true}</code> to allow on-line comments to be ignored</p>\n<h4 id=\"examples\">Examples</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowMultipleSpaces\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-string\">\"disallowMultipleSpaces\"</span>: {<span class=\"hljs-string\">\"allowEOLComments\"</span>: <span class=\"hljs-literal\">true</span>}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"hello\"</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"valid-for-alloweolcomments-true\">Valid for <code>{&quot;allowEOLComments&quot;: true}</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"hello\"</span>    <span class=\"hljs-comment\">// world;</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x  = <span class=\"hljs-string\">\"hello\"</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>  <span class=\"hljs-title\">y</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n","shortDescription":"<p>Disallows multiple indentation characters (tabs or spaces) between identifiers, keywords, and any other token</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-multiple-spaces.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-multiple-spaces.js","filename":"disallow-multiple-spaces.js"},{"name":"disallowMultipleVarDecl","description":"<h1 id=\"disallowmultiplevardecl\">disallowMultipleVarDecl</h1>\n<p>Disallows multiple <code>var</code> declaration (except for-loop).</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> disallows multiple variable declarations except within a for loop</li>\n<li><code>Object</code>:<ul>\n<li><code>&#39;strict&#39;</code> disallows all multiple variable declarations</li>\n<li><code>&#39;allExcept&#39;</code> array of exceptions:<ul>\n<li><code>&#39;undefined&#39;</code> allows declarations where all variables are not defined</li>\n<li><code>&#39;require&#39;</code> allows declarations where all variables are importing external modules with require</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowMultipleVarDecl\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-true\">Valid for <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, j = arr.length; i &lt; j; i++) {}\n</code></pre>\n<h5 id=\"valid-for-strict-true\">Valid for <code>{ strict: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<h5 id=\"valid-for-allexcept-undefined\">Valid for <code>{ allExcept: [&#39;undefined&#39;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a, b;\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, j = arr.length; i &lt; j; i++) {}\n</code></pre>\n<h5 id=\"valid-for-allexcept-require\">Valid for <code>{ allExcept: [&#39;require&#39;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'a'</span>),\n    b = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'b'</span>);\n\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, j = arr.length; i &lt; j; i++) {}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>,\n    y = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-keyword\">var</span> x, y = <span class=\"hljs-number\">2</span>, z;\n</code></pre>\n","shortDescription":"<p>Disallows multiple <code>var</code> declaration (except for-loop).</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-multiple-var-decl.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-multiple-var-decl.js","filename":"disallow-multiple-var-decl.js"},{"name":"disallowNamedUnassignedFunctions","description":"<h1 id=\"disallownamedunassignedfunctions\">disallowNamedUnassignedFunctions</h1>\n<p>Disallows unassigned functions to be named inline</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowNamedUnassignedFunctions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">[].forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">[].forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\"></span>) </span>{});\n</code></pre>\n","shortDescription":"<p>Disallows unassigned functions to be named inline</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-named-unassigned-functions.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-named-unassigned-functions.js","filename":"disallow-named-unassigned-functions.js"},{"name":"disallowNestedTernaries","description":"<h1 id=\"disallownestedternaries\">disallowNestedTernaries</h1>\n<p>Disallows nested ternaries.</p>\n<p>Types: <code>Boolean</code>, <code>Integer</code></p>\n<p>Values: <code>true</code> or an Integer that describes the maximum levels of nesting to be allowed.</p>\n<h4 id=\"examples\">Examples</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowNestedTernaries\"</span>: <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\">// or</span>\n\n<span class=\"hljs-string\">\"disallowNestedTernaries\"</span>: { <span class=\"hljs-string\">\"maxLevel\"</span>: <span class=\"hljs-number\">1</span> }\n</code></pre>\n<h5 id=\"valid-for-modes-true-and-maxlevel-1\">Valid for modes <code>true</code> and <code>&quot;maxLevel&quot;: 1</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = (a === b) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\n</code></pre>\n<h5 id=\"invalid-for-mode-true-but-valid-for-maxlevel-1\">Invalid for mode <code>true</code>, but valid for <code>&quot;maxLevel&quot;: 1</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = (a === b)\n  ? (a === c)\n    ? <span class=\"hljs-number\">1</span>\n    : <span class=\"hljs-number\">2</span>\n  : (b === c)\n    ? <span class=\"hljs-number\">3</span>\n    : <span class=\"hljs-number\">4</span>;\n</code></pre>\n<h5 id=\"invalid-for-modes-true-and-maxlevel-1\">Invalid for modes <code>true</code> and <code>&quot;maxLevel&quot;: 1</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = (a === b)\n  ? (a === c)\n    ? (c === d)\n      ? <span class=\"hljs-number\">5</span>\n      : <span class=\"hljs-number\">6</span>\n    : <span class=\"hljs-number\">2</span>\n  : (b === c)\n    ? <span class=\"hljs-number\">3</span>\n    : <span class=\"hljs-number\">4</span>;\n</code></pre>\n","shortDescription":"<p>Disallows nested ternaries.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-nested-ternaries.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-nested-ternaries.js","filename":"disallow-nested-ternaries.js"},{"name":"disallowNewlineBeforeBlockStatements","description":"<h1 id=\"disallownewlinebeforeblockstatements\">disallowNewlineBeforeBlockStatements</h1>\n<p>Disallows newline before opening curly brace of all block statements.</p>\n<p>Type: <code>Boolean</code> or <code>Array</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> always disallows newline before curly brace of block statements</li>\n<li><code>Array</code> specifies block-type keywords after which newlines are disallowed before curly brace<ul>\n<li>Valid types include: <code>[&#39;if&#39;, &#39;else&#39;, &#39;try&#39;, &#39;catch&#39;, &#39;finally&#39;, &#39;do&#39;, &#39;while&#39;, &#39;for&#39;, &#39;function&#39;]</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowNewlineBeforeBlockStatements\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">good</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> obj = {\n        val: <span class=\"hljs-literal\">true</span>\n    };\n\n    <span class=\"hljs-keyword\">return</span> {\n        data: obj\n    };\n}\n\n<span class=\"hljs-keyword\">if</span> (cond){\n    foo();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements){\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond){\n    foo();\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bad</span>(<span class=\"hljs-params\"></span>)\n</span>{\n    <span class=\"hljs-keyword\">var</span> obj =\n    {\n        val: <span class=\"hljs-literal\">true</span>\n    };\n\n    <span class=\"hljs-keyword\">return</span> {\n        data: obj\n    };\n}\n\n<span class=\"hljs-keyword\">if</span> (cond)\n{\n    foo();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements)\n{\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond)\n{\n    foo();\n}\n</code></pre>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowNewlineBeforeBlockStatements\"</span>: [<span class=\"hljs-string\">\"if\"</span>, <span class=\"hljs-string\">\"else\"</span>, <span class=\"hljs-string\">\"for\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span>) {\n    positive = <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">0</span>) {\n    negative = <span class=\"hljs-literal\">true</span>;\n} <span class=\"hljs-keyword\">else</span> {\n    negative = <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, len = myList.length; i &lt; len; ++i) {\n    newList.push(myList[i]);\n}\n\n<span class=\"hljs-comment\">// this is fine, since \"function\" wasn't configured</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myFunc</span>(<span class=\"hljs-params\">x</span>)\n</span>{\n    <span class=\"hljs-keyword\">return</span> x + <span class=\"hljs-number\">1</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">0</span>)\n{\n    negative = <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">0</span>)\n{\n    negative = <span class=\"hljs-literal\">true</span>;\n}\n<span class=\"hljs-keyword\">else</span>\n{\n    negative = <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, len = myList.length; i &lt; len; ++i)\n{\n    newList.push(myList[i]);\n}\n</code></pre>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowNewlineBeforeBlockStatements\"</span>: [<span class=\"hljs-string\">\"function\"</span>, <span class=\"hljs-string\">\"while\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myFunc</span>(<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> x + <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> x - <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-comment\">// this is fine, since \"for\" wasn't configured</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, len = myList.length; i &lt; len; ++i)\n{\n    newList.push(myList[i]);\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myFunc</span>(<span class=\"hljs-params\">x</span>)\n</span>{\n    <span class=\"hljs-keyword\">return</span> x + <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>)\n</span>{\n    <span class=\"hljs-keyword\">return</span> x - <span class=\"hljs-number\">1</span>;\n}\n</code></pre>\n","shortDescription":"<p>Disallows newline before opening curly brace of all block statements.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-newline-before-block-statements.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-newline-before-block-statements.js","filename":"disallow-newline-before-block-statements.js"},{"name":"disallowNodeTypes","description":"<h1 id=\"disallownodetypes\">disallowNodeTypes</h1>\n<p>Disallow use of certain node types (from Esprima/ESTree).</p>\n<p>Esprima node types</p>\n<ul>\n<li><a href=\"https://github.com/jquery/esprima/blob/758196a1c5dd20c3ead6300283a1112428bc7045/esprima.js#L108-L169\">list</a></li>\n</ul>\n<p>Type: <code>Array</code></p>\n<p>Value: Array of parser node types to be disallowed.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowNodeTypes\"</span>: [<span class=\"hljs-string\">'LabeledStatement'</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// use of an allowed node type</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-comment\">// shorthand form of arrow function that returns an object</span>\n<span class=\"hljs-keyword\">var</span> f = () =&gt; ({ a: <span class=\"hljs-number\">1</span> });\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// label statement with loop</span>\nloop1:\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (i === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">break</span> loop1;\n    }\n}\n<span class=\"hljs-comment\">// accidental label statement with arrow function</span>\n<span class=\"hljs-keyword\">var</span> f = () =&gt; { a: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-comment\">// label statement</span>\n{ a: <span class=\"hljs-number\">1</span> }\n</code></pre>\n","shortDescription":"<p>Disallow use of certain node types (from Esprima/ESTree).</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-node-types.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-node-types.js","filename":"disallow-node-types.js"},{"name":"disallowNotOperatorsInConditionals","description":"<h1 id=\"disallownotoperatorsinconditionals\">disallowNotOperatorsInConditionals</h1>\n<p>Disallows the not, not equals, and strict not equals operators in conditionals.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowNotOperatorsInConditionals\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (clause) {\n    <span class=\"hljs-comment\">// Do something really crazy</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Do something crazy</span>\n}\n\n<span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-comment\">// Do something really crazy</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Do something crazy</span>\n}\n\n<span class=\"hljs-keyword\">var</span> a = (clause) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (!clause) {\n    <span class=\"hljs-comment\">// Do something crazy</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Do something really crazy</span>\n}\n\n<span class=\"hljs-keyword\">if</span> (a != <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-comment\">// Do something crazy</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Do something really crazy</span>\n}\n\n<span class=\"hljs-keyword\">if</span> (a !== <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-comment\">// Do something crazy</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Do something really crazy</span>\n}\n\n<span class=\"hljs-keyword\">var</span> a = (!clause) ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>\n</code></pre>\n","shortDescription":"<p>Disallows the not, not equals, and strict not equals operators in conditionals.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-not-operators-in-conditionals.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-not-operators-in-conditionals.js","filename":"disallow-not-operators-in-conditionals.js"},{"name":"disallowObjectKeysOnNewLine","description":"<h1 id=\"disallowobjectkeysonnewline\">disallowObjectKeysOnNewLine</h1>\n<p>Disallows placing object keys on new line</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowObjectKeysOnNewLine\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = {\n    b: <span class=\"hljs-string\">'b'</span>, c: <span class=\"hljs-string\">'c'</span>\n};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = {\n    b: <span class=\"hljs-string\">'b'</span>,\n    c: <span class=\"hljs-string\">'c'</span>\n};\n</code></pre>\n","shortDescription":"<p>Disallows placing object keys on new line</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-object-keys-on-new-line.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-object-keys-on-new-line.js","filename":"disallow-object-keys-on-new-line.js"},{"name":"disallowOperatorBeforeLineBreak","description":"<h1 id=\"disallowoperatorbeforelinebreak\">disallowOperatorBeforeLineBreak</h1>\n<p>Requires putting certain operators on the next line rather than on the current line before a line break.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of operators to apply to or <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowOperatorBeforeLineBreak\"</span>: [<span class=\"hljs-string\">\"+\"</span>, <span class=\"hljs-string\">\".\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">$el.on( <span class=\"hljs-string\">'click'</span>, fn )\n    .appendTo( <span class=\"hljs-string\">'body'</span> );\n\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">5</span>\n    + <span class=\"hljs-number\">12</span> + <span class=\"hljs-number\">13</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">$el.on( <span class=\"hljs-string\">'click'</span>, fn ).\n    appendTo( <span class=\"hljs-string\">'body'</span> );\n\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">5</span> +\n    <span class=\"hljs-number\">12</span> + <span class=\"hljs-number\">13</span>;\n</code></pre>\n","shortDescription":"<p>Requires putting certain operators on the next line rather than on the current line before a line break.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-operator-before-line-break.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-operator-before-line-break.js","filename":"disallow-operator-before-line-break.js"},{"name":"disallowPaddingNewLinesAfterBlocks","description":"<h1 id=\"disallowpaddingnewlinesafterblocks\">disallowPaddingNewLinesAfterBlocks</h1>\n<p>Disallow a newline after blocks</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewLinesAfterBlocks\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">  * <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n    <span class=\"hljs-keyword\">var</span> obj = {\n        foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        },\n        bar: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n        }\n    };\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n\n    <span class=\"hljs-keyword\">var</span> obj = {\n        foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        },\n\n        bar: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n        }\n    };\n}\n</code></pre>\n","shortDescription":"<p>Disallow a newline after blocks</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-after-blocks.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-padding-newlines-after-blocks.js","filename":"disallow-padding-newlines-after-blocks.js"},{"name":"disallowPaddingNewLinesAfterUseStrict","description":"<h1 id=\"disallowpaddingnewlinesafterusestrict\">disallowPaddingNewLinesAfterUseStrict</h1>\n<p>Disallow a blank line after <code>&#39;use strict&#39;;</code> statements</p>\n<p>Values: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewLinesAfterUseStrict\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-pi\">'use strict'</span>;\n<span class=\"hljs-comment\">// code</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-pi\">'use strict'</span>;\n\n<span class=\"hljs-comment\">// code</span>\n</code></pre>\n","shortDescription":"<p>Disallow a blank line after <code>&#39;use strict&#39;;</code> statements</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-after-use-strict.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-padding-newlines-after-use-strict.js","filename":"disallow-padding-newlines-after-use-strict.js"},{"name":"disallowPaddingNewLinesBeforeExport","description":"<h1 id=\"disallowpaddingnewlinesbeforeexport\">disallowPaddingNewLinesBeforeExport</h1>\n<p>Disallows newline before module.exports</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewLinesBeforeExport\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-built_in\">module</span>.exports = a;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-built_in\">module</span>.exports = a;\n</code></pre>\n","shortDescription":"<p>Disallows newline before module.exports</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-before-export.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-padding-newlines-before-export.js","filename":"disallow-padding-newlines-before-export.js"},{"name":"disallowPaddingNewlinesBeforeKeywords","description":"<h1 id=\"disallowpaddingnewlinesbeforekeywords\">disallowPaddingNewlinesBeforeKeywords</h1>\n<p>Disallow an empty line above the specified keywords.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted types or <code>true</code> to disallow padding new lines after all of the keywords below.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewlinesBeforeKeywords\"</span>: [\n    <span class=\"hljs-string\">\"do\"</span>,\n    <span class=\"hljs-string\">\"for\"</span>,\n    <span class=\"hljs-string\">\"if\"</span>,\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"switch\"</span>,\n    <span class=\"hljs-string\">\"case\"</span>,\n    <span class=\"hljs-string\">\"try\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>,\n    <span class=\"hljs-string\">\"void\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"with\"</span>,\n    <span class=\"hljs-string\">\"return\"</span>,\n    <span class=\"hljs-string\">\"typeof\"</span>,\n    <span class=\"hljs-string\">\"function\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!a) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b; i++) {\n        <span class=\"hljs-keyword\">if</span> (!a[i]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!a) {\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b; i++) {\n        <span class=\"hljs-keyword\">if</span> (!a[i]) {\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n","shortDescription":"<p>Disallow an empty line above the specified keywords.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-before-keywords.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-padding-newlines-before-keywords.js","filename":"disallow-padding-newlines-before-keywords.js"},{"name":"disallowPaddingNewLinesBeforeLineComments","description":"<h1 id=\"disallowpaddingnewlinesbeforelinecomments\">disallowPaddingNewLinesBeforeLineComments</h1>\n<p>Disallows newline before line comments</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewLinesBeforeLineComments\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-comment\">// comment</span>\n<span class=\"hljs-keyword\">return</span> a;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-comment\">//comment</span>\n<span class=\"hljs-keyword\">return</span> a;\n</code></pre>\n","shortDescription":"<p>Disallows newline before line comments</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-before-line-comments.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-padding-newlines-before-line-comments.js","filename":"disallow-padding-newlines-before-line-comments.js"},{"name":"disallowPaddingNewlinesInBlocks","description":"<h1 id=\"disallowpaddingnewlinesinblocks\">disallowPaddingNewlinesInBlocks</h1>\n<p>Disallows blocks from beginning or ending with 2 newlines.</p>\n<p>Type: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> validates all non-empty blocks.</li>\n<li><code>Object</code>:<ul>\n<li><code>&#39;open&#39;</code><ul>\n<li><ul>\n<li><code>true</code> validates that there is a newline after the opening brace in a block</li>\n</ul>\n</li>\n<li><ul>\n<li><code>false</code> ignores the newline validation after the opening brace in a block</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>&#39;close&#39;</code><ul>\n<li><code>true</code> validates that there is a newline before the closing brace in a block</li>\n<li><code>false</code> ignores the newline validation before the closing brace in a block</li>\n</ul>\n</li>\n<li><code>&#39;allExcept&#39;</code> array of exceptions:<ul>\n<li><code>&#39;conditionals&#39;</code> ignores conditional (if, else if, else) blocks</li>\n<li><code>&#39;functions&#39;</code> ignores function blocks</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewlinesInBlocks\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"disallowPaddingNewlinesInBlocks\"</span>: { <span class=\"hljs-string\">\"open\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">\"close\"</span>: <span class=\"hljs-literal\">false</span> }\n<span class=\"hljs-string\">\"disallowPaddingNewlinesInBlocks\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"conditionals\"</span> ] }\n<span class=\"hljs-string\">\"disallowPaddingNewlinesInBlocks\"</span>: { <span class=\"hljs-string\">\"open\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">\"close\"</span>: <span class=\"hljs-literal\">false</span>, allExcept: [<span class=\"hljs-string\">'conditionals'</span>] }\n</code></pre>\n<h5 id=\"valid-for-true\">Valid for <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {doSomething();}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<h5 id=\"valid-for-mode-open-true-close-false\">Valid for mode <code>{ &quot;open&quot;: true, &quot;close&quot;: false }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n\n}\n</code></pre>\n<h5 id=\"valid-for-allexcept-conditionals\">Valid for <code>{ allExcept: [&#39;conditionals&#39;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n\n    doSomething();\n\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">foo</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> bar;\n}\n</code></pre>\n<h5 id=\"valid-for-open-true-close-false-allexcept-conditionals\">Valid for <code>{  &quot;open&quot;: true, &quot;close&quot;: false, allExcept: [&#39;conditionals&#39;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">foo</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> bar;\n\n}\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n\n    doSomething();\n\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n\n    doSomething();\n\n}\n</code></pre>\n","shortDescription":"<p>Disallows blocks from beginning or ending with 2 newlines.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-in-blocks.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-padding-newlines-in-blocks.js","filename":"disallow-padding-newlines-in-blocks.js"},{"name":"disallowPaddingNewLinesInObjects","description":"<h1 id=\"disallowpaddingnewlinesinobjects\">disallowPaddingNewLinesInObjects</h1>\n<p>Disallows newlines adjacent to curly braces in all object literals.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowPaddingNewLinesInObjects\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">var</span> y = { a: <span class=\"hljs-number\">1</span>,\n          b: <span class=\"hljs-number\">2</span> };\n<span class=\"hljs-keyword\">var</span> z = { a: <span class=\"hljs-number\">2</span>,\n          b: <span class=\"hljs-number\">2</span>,\n\n          c: <span class=\"hljs-number\">3</span>,\n\n\n\n          d: <span class=\"hljs-number\">4</span> };\nfoo({a: {b: <span class=\"hljs-number\">1</span>}});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    a: <span class=\"hljs-number\">1</span>\n};\nfoo({\n    a: {\n        b: <span class=\"hljs-number\">1</span>\n    }\n});\n</code></pre>\n","shortDescription":"<p>Disallows newlines adjacent to curly braces in all object literals.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-padding-newlines-in-objects.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-padding-newlines-in-objects.js","filename":"disallow-padding-newlines-in-objects.js"},{"name":"disallowParenthesesAroundArrowParam","description":"<h1 id=\"disallowparenthesesaroundarrowparam\">disallowParenthesesAroundArrowParam</h1>\n<p>Disallows parentheses around arrow function expressions with a single parameter.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>Version: <code>ES6</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowParenthesesAroundArrowParam\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].map(x =&gt; x * x);\n<span class=\"hljs-comment\">// parentheses are always required for multiple parameters</span>\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].map((x, y, z) =&gt; x * x);\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].map((x) =&gt; x * x);\n</code></pre>\n","shortDescription":"<p>Disallows parentheses around arrow function expressions with a single parameter.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-parentheses-around-arrow-param.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-parentheses-around-arrow-param.js","filename":"disallow-parentheses-around-arrow-param.js"},{"name":"disallowQuotedKeysInObjects","description":"<h1 id=\"disallowquotedkeysinobjects\">disallowQuotedKeysInObjects</h1>\n<p>Disallows quoted keys in object if possible.</p>\n<p>Types: <code>String</code> or <code>Boolean</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> for strict mode</li>\n<li><code>&quot;allButReserved&quot;</code> (<em>deprecated</em> use <code>&quot;allExcept&quot;: [&quot;reserved&quot;]</code>)<ul>\n<li><code>Object</code>:</li>\n<li><code>&quot;allExcept&quot;</code> array of exceptions:<ul>\n<li><code>&quot;reserved&quot;</code> allows ES3+ reserved words to remain quoted\nwhich is helpful when using this option with JSHint&#39;s <code>es3</code> flag.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowQuotedKeysInObjects\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-mode-true\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: { <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-number\">1</span> } };\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept-reserved\">Valid for mode <code>{&quot;allExcept&quot;: [&quot;reserved&quot;]}</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'default'</span>: <span class=\"hljs-number\">2</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {<span class=\"hljs-string\">'a'</span>: <span class=\"hljs-number\">1</span>};\n</code></pre>\n","shortDescription":"<p>Disallows quoted keys in object if possible.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-quoted-keys-in-objects.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-quoted-keys-in-objects.js","filename":"disallow-quoted-keys-in-objects.js"},{"name":"disallowSemicolons","description":"<h1 id=\"disallowsemicolons\">disallowSemicolons</h1>\n<p>Disallows lines from ending in a semicolon.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSemicolons\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n;[b].forEach(c)\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;\n[b].forEach(c);\n</code></pre>\n","shortDescription":"<p>Disallows lines from ending in a semicolon.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-semicolons.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-semicolons.js","filename":"disallow-semicolons.js"},{"name":"disallowShorthandArrowFunctions","description":"<h1 id=\"disallowshorthandarrowfunctions\">disallowShorthandArrowFunctions</h1>\n<p>Require arrow functions to use a block statement (explicit return).</p>\n<p>Why enable this rule? Arrow functions&#39; syntax can cause maintenance issues:</p>\n<ul>\n<li>When you add additional lines to an arrow function&#39;s expression body, the\nfunction will now return <code>undefined</code>, unless you remember to add an\nexplicit <code>return</code>.</li>\n<li>The shorthand syntax is ambiguous in terms of returning objects.\n<code>(name) =&gt; {id: name}</code> is interpreted as a longhand arrow function with the\nlabel <code>id:</code>.</li>\n</ul>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>Version: <code>ES6</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowShorthandArrowFunctions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// block statement</span>\nevens.map(v =&gt; {\n    <span class=\"hljs-keyword\">return</span> v + <span class=\"hljs-number\">1</span>;\n});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// single expression</span>\nevens.map(v =&gt; v + <span class=\"hljs-number\">1</span>);\n</code></pre>\n","shortDescription":"<p>Require arrow functions to use a block statement (explicit return).</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-shorthand-arrow-functions.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-shorthand-arrow-functions.js","filename":"disallow-shorthand-arrow-functions.js"},{"name":"disallowSpaceAfterBinaryOperators","description":"<h1 id=\"disallowspaceafterbinaryoperators\">disallowSpaceAfterBinaryOperators</h1>\n<p>Requires sticking binary operators to the right.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to disallow space after all possible binary operators</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceAfterBinaryOperators\"</span>: [\n    <span class=\"hljs-string\">\"=\"</span>,\n    <span class=\"hljs-string\">\",\"</span>,\n    <span class=\"hljs-string\">\"+\"</span>,\n    <span class=\"hljs-string\">\"-\"</span>,\n    <span class=\"hljs-string\">\"/\"</span>,\n    <span class=\"hljs-string\">\"*\"</span>,\n    <span class=\"hljs-string\">\"==\"</span>,\n    <span class=\"hljs-string\">\"===\"</span>,\n    <span class=\"hljs-string\">\"!=\"</span>,\n    <span class=\"hljs-string\">\"!==\"</span>\n    <span class=\"hljs-comment\">// etc</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x +y;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x+ y;\n</code></pre>\n","shortDescription":"<p>Requires sticking binary operators to the right.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-after-binary-operators.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-after-binary-operators.js","filename":"disallow-space-after-binary-operators.js"},{"name":"disallowSpaceAfterKeywords","description":"<h1 id=\"disallowspaceafterkeywords\">disallowSpaceAfterKeywords</h1>\n<p>Disallows space after keyword.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted keywords or <code>true</code> to disallow spaces after all possible keywords.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceAfterKeywords\"</span>: [\n    <span class=\"hljs-string\">\"if\"</span>,\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"for\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"do\"</span>,\n    <span class=\"hljs-string\">\"switch\"</span>,\n    <span class=\"hljs-string\">\"try\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span>(x &gt; y) {\n    y++;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x &gt; y) {\n    y++;\n}\n</code></pre>\n","shortDescription":"<p>Disallows space after keyword.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-after-keywords.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-after-keywords.js","filename":"disallow-space-after-keywords.js"},{"name":"disallowSpaceAfterLineComment","description":"<h1 id=\"disallowspaceafterlinecomment\">disallowSpaceAfterLineComment</h1>\n<p>Requires that a line comment (<code>//</code>) not be followed by a space.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceAfterLineComment\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">//A comment</span>\n<span class=\"hljs-comment\">/* A comment*/</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// A comment</span>\n</code></pre>\n","shortDescription":"<p>Requires that a line comment (<code>//</code>) not be followed by a space.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-after-line-comment.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-after-line-comment.js","filename":"disallow-space-after-line-comment.js"},{"name":"disallowSpaceAfterObjectKeys","description":"<h1 id=\"disallowspaceafterobjectkeys\">disallowSpaceAfterObjectKeys</h1>\n<p>Disallows space after object keys.</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&quot;ignoreSingleLine&quot;</code> ignores objects if the object only takes up a single line\n(<em>deprecated</em> use <code>&quot;allExcept&quot;: [ &quot;singleline&quot; ]</code>)</li>\n<li><code>&quot;ignoreMultiLine&quot;</code> ignores objects if the object takes up multiple lines\n(<em>deprecated</em> use <code>&quot;allExcept&quot;: [ &quot;multiline&quot; ]</code>)</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code>: array of exceptions:<ul>\n<li><code>&quot;singleline&quot;</code> ignores objects if the object only takes up a single line</li>\n<li><code>&quot;multiline&quot;</code> ignores objects if the object takes up multiple lines</li>\n<li><code>&quot;aligned&quot;</code> ignores aligned object properties</li>\n<li><code>&quot;method&quot;</code> ignores method declarations</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceAfterObjectKeys\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-true\">Valid for <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>};\n<span class=\"hljs-keyword\">var</span> y = {\n    a: <span class=\"hljs-number\">1</span>,\n    b: <span class=\"hljs-number\">2</span>\n}\n</code></pre>\n<h5 id=\"valid-for-allexcept-singleline\">Valid for <code>{ allExcept: [&#39;singleline&#39;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a : <span class=\"hljs-number\">1</span>};\n<span class=\"hljs-keyword\">var</span> y = {\n    a: <span class=\"hljs-number\">1</span>,\n    b: <span class=\"hljs-number\">2</span>\n}\n</code></pre>\n<h5 id=\"valid-for-allexcept-multiline\">Valid for <code>{ allExcept: [&#39;multiline&#39;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>};\n<span class=\"hljs-keyword\">var</span> y = {\n    a  : <span class=\"hljs-number\">1</span>,\n    b   : <span class=\"hljs-number\">2</span>\n}\n</code></pre>\n<h5 id=\"valid-for-allexcept-aligned\">Valid for <code>{ allExcept: [&#39;aligned&#39;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> y = {\n    abc: <span class=\"hljs-number\">1</span>,\n    d  : <span class=\"hljs-number\">2</span>\n}\n</code></pre>\n<h5 id=\"valid-for-allexcept-method\">Valid for <code>{ allExcept: [&#39;method&#39;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> y = {\n    fn () {\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span>;\n    }\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a : <span class=\"hljs-number\">1</span>};\n</code></pre>\n","shortDescription":"<p>Disallows space after object keys.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-after-object-keys.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-after-object-keys.js","filename":"disallow-space-after-object-keys.js"},{"name":"disallowSpaceAfterPrefixUnaryOperators","description":"<h1 id=\"disallowspaceafterprefixunaryoperators\">disallowSpaceAfterPrefixUnaryOperators</h1>\n<p>Requires sticking unary operators to the right.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to disallow space after prefix for all unary operators</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceAfterPrefixUnaryOperators\"</span>: [<span class=\"hljs-string\">\"++\"</span>, <span class=\"hljs-string\">\"--\"</span>, <span class=\"hljs-string\">\"+\"</span>, <span class=\"hljs-string\">\"-\"</span>, <span class=\"hljs-string\">\"~\"</span>, <span class=\"hljs-string\">\"!\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x = !y; y = ++z;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x = ! y; y = ++ z;\n</code></pre>\n","shortDescription":"<p>Requires sticking unary operators to the right.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-after-prefix-unary-operators.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-after-prefix-unary-operators.js","filename":"disallow-space-after-prefix-unary-operators.js"},{"name":"disallowSpaceBeforeBinaryOperators","description":"<h1 id=\"disallowspacebeforebinaryoperators\">disallowSpaceBeforeBinaryOperators</h1>\n<p>Requires sticking binary operators to the left.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to disallow space before all possible binary operators</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBeforeBinaryOperators\"</span>: [\n    <span class=\"hljs-string\">\"=\"</span>,\n    <span class=\"hljs-string\">\",\"</span>,\n    <span class=\"hljs-string\">\"+\"</span>,\n    <span class=\"hljs-string\">\"-\"</span>,\n    <span class=\"hljs-string\">\"/\"</span>,\n    <span class=\"hljs-string\">\"*\"</span>,\n    <span class=\"hljs-string\">\"==\"</span>,\n    <span class=\"hljs-string\">\"===\"</span>,\n    <span class=\"hljs-string\">\"!=\"</span>,\n    <span class=\"hljs-string\">\"!==\"</span>\n    <span class=\"hljs-comment\">// etc</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x+ y;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x + y;\n</code></pre>\n","shortDescription":"<p>Requires sticking binary operators to the left.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-binary-operators.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-before-binary-operators.js","filename":"disallow-space-before-binary-operators.js"},{"name":"disallowSpaceBeforeBlockStatements","description":"<h1 id=\"disallowspacebeforeblockstatements\">disallowSpaceBeforeBlockStatements</h1>\n<p>Disallows space before block statements (for loops, control structures).</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBeforeBlockStatements\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (cond){\n    foo();\n} <span class=\"hljs-keyword\">else</span>{\n   bar();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements){\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond){\n    foo();\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (cond) {\n    foo();\n} <span class=\"hljs-keyword\">else</span> {\n   bar();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements) {\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond) {\n    foo();\n}\n</code></pre>\n","shortDescription":"<p>Disallows space before block statements (for loops, control structures).</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-block-statements.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-before-block-statements.js","filename":"disallow-space-before-block-statements.js"},{"name":"disallowSpaceBeforeComma","description":"<h1 id=\"disallowspacebeforecomma\">disallowSpaceBeforeComma</h1>\n<p>Disallows spaces before commas</p>\n<p>Types: <code>Boolean</code></p>\n<p>Values: <code>true</code> to disallow any spaces before any comma</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBeforeComma\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a, b;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a ,b;\n</code></pre>\n","shortDescription":"<p>Disallows spaces before commas</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-comma.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-before-comma.js","filename":"disallow-space-before-comma.js"},{"name":"disallowSpaceBeforeKeywords","description":"<h1 id=\"disallowspacebeforekeywords\">disallowSpaceBeforeKeywords</h1>\n<p>Disallows space before keyword.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted keywords or <code>true</code> to disallow spaces before all possible keywords.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBeforeKeywords\"</span>: [\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">}<span class=\"hljs-keyword\">else</span> {\n    y--;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">} <span class=\"hljs-keyword\">else</span> {\n    y--;\n}\n</code></pre>\n","shortDescription":"<p>Disallows space before keyword.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-keywords.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-before-keywords.js","filename":"disallow-space-before-keywords.js"},{"name":"disallowSpaceBeforeObjectValues","description":"<h1 id=\"disallowspacebeforeobjectvalues\">disallowSpaceBeforeObjectValues</h1>\n<p>Disallows space after object keys.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBeforeObjectValues\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a:<span class=\"hljs-number\">1</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>};\n</code></pre>\n","shortDescription":"<p>Disallows space after object keys.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-object-values.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-before-object-values.js","filename":"disallow-space-before-object-values.js"},{"name":"disallowSpaceBeforePostfixUnaryOperators","description":"<h1 id=\"disallowspacebeforepostfixunaryoperators\">disallowSpaceBeforePostfixUnaryOperators</h1>\n<p>Requires sticking unary operators to the left.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to disallow space before postfix for all unary operators\n(i.e. increment/decrement operators)</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBeforePostfixUnaryOperators\"</span>: [<span class=\"hljs-string\">\"++\"</span>, <span class=\"hljs-string\">\"--\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x = y++; y = z--;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x = y ++; y = z --;\n</code></pre>\n","shortDescription":"<p>Requires sticking unary operators to the left.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-postfix-unary-operators.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-before-postfix-unary-operators.js","filename":"disallow-space-before-postfix-unary-operators.js"},{"name":"disallowSpaceBeforeSemicolon","description":"<h1 id=\"disallowspacebeforesemicolon\">disallowSpaceBeforeSemicolon</h1>\n<p>Disallows spaces before semicolons.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> to disallow any spaces before any semicolon.</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code>: <code>[ &quot;(&quot; ]</code> list of tokens that can occur after semicolon</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBeforeSemicolon\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;\n</code></pre>\n<ul>\n<li><h5 id=\"valid-for-mode-allexcept\">Valid for mode <code>{ &quot;allExcept&quot;: [ &quot;(&quot; ] }</code></h5>\n</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span> ( ; nodeIndex &lt; nodesCount; ++nodeIndex ) {}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span> ;\n</code></pre>\n","shortDescription":"<p>Disallows spaces before semicolons.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-semicolon.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-before-semicolon.js","filename":"disallow-space-before-semicolon.js"},{"name":"disallowSpaceBetweenArguments","description":"<h1 id=\"disallowspacebetweenarguments\">disallowSpaceBetweenArguments</h1>\n<p>Ensure there are no spaces after argument separators in call expressions.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpaceBetweenArguments\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">a(b,c);\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">a(b, c);\n</code></pre>\n","shortDescription":"<p>Ensure there are no spaces after argument separators in call expressions.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-between-arguments.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-between-arguments.js","filename":"disallow-space-between-arguments.js"},{"name":"disallowSpacesInAnonymousFunctionExpression","description":"<h1 id=\"disallowspacesinanonymousfunctionexpression\">disallowSpacesInAnonymousFunctionExpression</h1>\n<p>Disallows space before <code>()</code> or <code>{}</code> in anonymous function expressions.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInAnonymousFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> Foo = {\n    foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{}\n}\narray.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> Foo = {\n    foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{}\n}\narray.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{});\n</code></pre>\n","shortDescription":"<p>Disallows space before <code>()</code> or <code>{}</code> in anonymous function expressions.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-anonymous-function-expression.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-in-anonymous-function-expression.js","filename":"disallow-spaces-in-anonymous-function-expression.js"},{"name":"disallowSpacesInCallExpression","description":"<h1 id=\"disallowspacesincallexpression\">disallowSpacesInCallExpression</h1>\n<p>Disallows space before <code>()</code> in call expressions.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInCallExpression\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = foobar();\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = foobar ();\n</code></pre>\n","shortDescription":"<p>Disallows space before <code>()</code> in call expressions.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-call-expression.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-in-call-expression.js","filename":"disallow-spaces-in-call-expression.js"},{"name":"disallowSpacesInConditionalExpression","description":"<h1 id=\"disallowspacesinconditionalexpression\">disallowSpacesInConditionalExpression</h1>\n<p>Disallows space before and/or after <code>?</code> or <code>:</code> in conditional expressions.</p>\n<p>Types: <code>Object</code> or <code>Boolean</code></p>\n<p>Values: <code>&quot;afterTest&quot;</code>, <code>&quot;beforeConsequent&quot;</code>, <code>&quot;afterConsequent&quot;</code>, <code>&quot;beforeAlternate&quot;</code> as child properties,\nor <code>true</code> to set all properties to true. Child properties must be set to <code>true</code>. These token names correspond to:</p>\n<pre><code>var a = b ? c : d;\n         ^ ^ ^ ^\n         | | | |\n         | | | └- beforeAlternate\n         | | └--- afterConsequent\n         | └-------- beforeConsequent\n         └---------- afterTest\n</code></pre><h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInConditionalExpression\"</span>: {\n    <span class=\"hljs-string\">\"afterTest\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeConsequent\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"afterConsequent\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeAlternate\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b?c:d;\n<span class=\"hljs-keyword\">var</span> a= b?c:d;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b ?c:d;\n<span class=\"hljs-keyword\">var</span> a = b? c:d;\n<span class=\"hljs-keyword\">var</span> a = b?c :d;\n<span class=\"hljs-keyword\">var</span> a = b?c: d;\n</code></pre>\n","shortDescription":"<p>Disallows space before and/or after <code>?</code> or <code>:</code> in conditional expressions.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-conditional-expression.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-in-conditional-expression.js","filename":"disallow-spaces-in-conditional-expression.js"},{"name":"disallowSpacesInForStatement","description":"<h1 id=\"disallowspacesinforstatement\">disallowSpacesInForStatement</h1>\n<p>Disallow spaces in between for statement.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code> to disallow spaces in between for statement.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInForStatement\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;l;i++) {\n    x++;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i&lt;l; i++) {\n    x++;\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i&lt;l;i++) {\n    x++;\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;i&lt;l; i++) {\n    x++;\n}\n</code></pre>\n","shortDescription":"<p>Disallow spaces in between for statement.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-for-statement.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-in-for-statement.js","filename":"disallow-spaces-in-for-statement.js"},{"name":"disallowSpacesInFunctionDeclaration","description":"<h1 id=\"disallowspacesinfunctiondeclaration\">disallowSpacesInFunctionDeclaration</h1>\n<p>Disallows space before <code>()</code> or <code>{}</code> in function declarations.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInFunctionDeclaration\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n","shortDescription":"<p>Disallows space before <code>()</code> or <code>{}</code> in function declarations.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-function-declaration.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-in-function-declaration.js","filename":"disallow-spaces-in-function-declaration.js"},{"name":"disallowSpacesInFunctionExpression","description":"<h1 id=\"disallowspacesinfunctionexpression\">disallowSpacesInFunctionExpression</h1>\n<p>Disallows space before <code>()</code> or <code>{}</code> in function expressions (both <a href=\"#disallowspacesinnamedfunctionexpression\">named</a>\nand <a href=\"#disallowspacesinanonymousfunctionexpression\">anonymous</a>).</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n","shortDescription":"<p>Disallows space before <code>()</code> or <code>{}</code> in function expressions (both <a href=\"#disallowspacesinnamedfunctionexpression\">named</a>\nand <a href=\"#disallowspacesinanonymousfunctionexpression\">anonymous</a>).</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-function-expression.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-in-function-expression.js","filename":"disallow-spaces-in-function-expression.js"},{"name":"disallowSpacesInFunction","description":"<h1 id=\"disallowspacesinfunction\">disallowSpacesInFunction</h1>\n<p>Disallows space before <code>()</code> or <code>{}</code> in function expressions (both <a href=\"#disallowspacesinnamedfunctionexpression\">named</a>\nand <a href=\"#disallowspacesinanonymousfunctionexpression\">anonymous</a>) and function declarations.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInFunction\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n","shortDescription":"<p>Disallows space before <code>()</code> or <code>{}</code> in function expressions (both <a href=\"#disallowspacesinnamedfunctionexpression\">named</a>\nand <a href=\"#disallowspacesinanonymousfunctionexpression\">anonymous</a>) and function declarations.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-function.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-in-function.js","filename":"disallow-spaces-in-function.js"},{"name":"disallowSpacesInNamedFunctionExpression","description":"<h1 id=\"disallowspacesinnamedfunctionexpression\">disallowSpacesInNamedFunctionExpression</h1>\n<p>Disallows space before <code>()</code> or <code>{}</code> in named function expressions.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInNamedFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n","shortDescription":"<p>Disallows space before <code>()</code> or <code>{}</code> in named function expressions.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-in-named-function-expression.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-in-named-function-expression.js","filename":"disallow-spaces-in-named-function-expression.js"},{"name":"disallowSpacesInsideArrayBrackets","description":"<h1 id=\"disallowspacesinsidearraybrackets\">disallowSpacesInsideArrayBrackets</h1>\n<p>Disallows space after opening array square bracket and before closing.\nReports only on arrays, not on property accessors.\nUse <a href=\"http://jscs.info/rule/disallowSpacesInsideBrackets.html\">disallowSpacesInsideBrackets</a>\nto report on all brackets.</p>\n<p>Types: <code>Boolean</code>, <code>String</code> or <code>Object</code></p>\n<p>Values: <code>&quot;all&quot;</code> or <code>true</code> for strict mode, <code>&quot;nested&quot;</code> (<em>deprecated</em> use <code>&quot;allExcept&quot;: [ &quot;[&quot;, &quot;]&quot; ]</code>)\nignores closing brackets in a row.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInsideArrayBrackets\"</span>: <span class=\"hljs-string\">\"all\"</span>\n\n<span class=\"hljs-comment\">// or</span>\n\n<span class=\"hljs-string\">\"disallowSpacesInsideArrayBrackets\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"[\"</span>, <span class=\"hljs-string\">\"]\"</span>, <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span> ]\n}\n</code></pre>\n<h5 id=\"valid-for-mode-all\">Valid for mode <code>&quot;all&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [[<span class=\"hljs-number\">1</span>]];\n<span class=\"hljs-keyword\">var</span> x = a[ <span class=\"hljs-number\">0</span> ]; <span class=\"hljs-comment\">// Property accessor not an array</span>\n</code></pre>\n<h5 id=\"valid-for-mode-nested\">Valid for mode <code>&quot;nested&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ [<span class=\"hljs-number\">1</span>] ];\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept\">Valid for mode <code>&quot;allExcept&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ [<span class=\"hljs-number\">1</span>] ];\n<span class=\"hljs-keyword\">var</span> x = [ { a: <span class=\"hljs-number\">1</span> } ];\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ [ <span class=\"hljs-number\">1</span> ] ];\n</code></pre>\n","shortDescription":"<p>Disallows space after opening array square bracket and before closing.\nReports only on arrays, not on property accessors.\nUse <a href=\"http://jscs.info/rule/disallowSpacesInsideBrackets.html\">disallowSpacesInsideBrackets</a>\nto report on all brackets.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-inside-array-brackets.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-inside-array-brackets.js","filename":"disallow-spaces-inside-array-brackets.js"},{"name":"disallowSpacesInsideBrackets","description":"<h1 id=\"disallowspacesinsidebrackets\">disallowSpacesInsideBrackets</h1>\n<p>Disallows space after opening square bracket and before closing.\nReports on all on brackets, even on property accessors.\nUse <a href=\"http://jscs.info/rule/disallowSpacesInsideArrayBrackets.html\">disallowSpacesInsideArrayBrackets</a>\nto exclude property accessors.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values: <code>true</code> for strict mode, or <code>&quot;allExcept&quot;: [ &quot;[&quot;, &quot;]&quot; ]</code>\nignores closing brackets in a row.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInsideBrackets\"</span>: <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\">// or</span>\n\n<span class=\"hljs-string\">\"disallowSpacesInsideBrackets\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"[\"</span>, <span class=\"hljs-string\">\"]\"</span>, <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span> ]\n}\n</code></pre>\n<h5 id=\"valid-for-mode-true\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [[<span class=\"hljs-number\">1</span>]];\n<span class=\"hljs-keyword\">var</span> x = a[<span class=\"hljs-number\">1</span>];\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept\">Valid for mode <code>{ allExcept&quot;: [ &quot;[&quot;, &quot;]&quot;, &quot;{&quot;, &quot;}&quot; ] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ [<span class=\"hljs-number\">1</span>] ];\n<span class=\"hljs-keyword\">var</span> x = [ { a: <span class=\"hljs-number\">1</span> } ];\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ [ <span class=\"hljs-number\">1</span> ] ];\n</code></pre>\n","shortDescription":"<p>Disallows space after opening square bracket and before closing.\nReports on all on brackets, even on property accessors.\nUse <a href=\"http://jscs.info/rule/disallowSpacesInsideArrayBrackets.html\">disallowSpacesInsideArrayBrackets</a>\nto exclude property accessors.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-inside-brackets.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-inside-brackets.js","filename":"disallow-spaces-inside-brackets.js"},{"name":"disallowSpacesInsideObjectBrackets","description":"<h1 id=\"disallowspacesinsideobjectbrackets\">disallowSpacesInsideObjectBrackets</h1>\n<p>Disallows space after opening object curly brace and before closing.</p>\n<p>Types: <code>Object</code>, <code>Boolean</code> or <code>String</code></p>\n<p>Values: <code>&quot;all&quot;</code> or <code>true</code> for strict mode, <code>&quot;nested&quot;</code> (<em>deprecated</em> use <code>&quot;allExcept&quot;: [&#39;}&#39;]</code>)\nignores closing brackets in a row.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInsideObjectBrackets\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"}\"</span>, <span class=\"hljs-string\">\")\"</span> ]\n}\n\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-string\">\"disallowSpacesInsideObjectBrackets\"</span>: <span class=\"hljs-literal\">true</span> | <span class=\"hljs-string\">\"all\"</span> | <span class=\"hljs-string\">\"nested\"</span>\n</code></pre>\n<h5 id=\"valid-for-mode-all\">Valid for mode <code>&quot;all&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: {b: <span class=\"hljs-number\">1</span>}};\n</code></pre>\n<h5 id=\"valid-for-mode-nested\">Valid for mode <code>&quot;nested&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: {b: <span class=\"hljs-number\">1</span>} };\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept\">Valid for mode <code>&quot;allExcept&quot;: [&quot;}&quot;]</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: {b: <span class=\"hljs-number\">1</span>} };\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: { b: <span class=\"hljs-number\">1</span> } };\n</code></pre>\n","shortDescription":"<p>Disallows space after opening object curly brace and before closing.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-inside-object-brackets.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-inside-object-brackets.js","filename":"disallow-spaces-inside-object-brackets.js"},{"name":"disallowSpacesInsideParentheses","description":"<h1 id=\"disallowspacesinsideparentheses\">disallowSpacesInsideParentheses</h1>\n<p>Disallows space after opening round bracket and before closing.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values: Either <code>true</code> or Object with <code>&quot;only&quot;</code> property as an array of tokens</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInsideParentheses\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-true-value\">Valid for <code>true</code> value</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = (<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>) * <span class=\"hljs-number\">3</span>;\n</code></pre>\n<h5 id=\"valid-for-only-value\">Valid for <code>only</code> value</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInsideParentheses\"</span>: { <span class=\"hljs-string\">\"only\"</span>: [ <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span>, <span class=\"hljs-string\">\"\\\"\"</span> ] }\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = ( <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span> );\n<span class=\"hljs-keyword\">var</span> x = foo({});\n<span class=\"hljs-keyword\">var</span> x = foo(<span class=\"hljs-string\">\"1\"</span>);\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = foo( {} );\n</code></pre>\n","shortDescription":"<p>Disallows space after opening round bracket and before closing.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-inside-parentheses.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-inside-parentheses.js","filename":"disallow-spaces-inside-parentheses.js"},{"name":"disallowSpacesInsideParenthesizedExpression","description":"<h1 id=\"disallowspacesinsideparenthesizedexpression\">disallowSpacesInsideParenthesizedExpression</h1>\n<p>Disallows space after opening and before closing grouping parentheses.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code>: always disallow spaces inside grouping parentheses</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code>: <code>[ &quot;{&quot;, &quot;}&quot;, &quot;function&quot; ]</code> Ignore parenthesized objects and functions</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowSpacesInsideParenthesizedExpression\"</span>: <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\">// or</span>\n\n<span class=\"hljs-string\">\"disallowSpacesInsideParenthesizedExpression\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span> ]\n}\n</code></pre>\n<h5 id=\"valid-for-mode-true\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = (<span class=\"hljs-number\">1</span> + obj.size) * (<span class=\"hljs-number\">2</span>);\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept-function\">Valid for mode <code>{ allExcept&quot;: [ &quot;{&quot;, &quot;}&quot;, &quot;function&quot; ] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = (options || { x: <span class=\"hljs-literal\">true</span> } ).x;\n<span class=\"hljs-keyword\">var</span> global = ( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>; } )();\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = ( <span class=\"hljs-number\">1</span> + obj.size ) * ( <span class=\"hljs-number\">2</span> );\n</code></pre>\n","shortDescription":"<p>Disallows space after opening and before closing grouping parentheses.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-spaces-inside-parenthesized-expression.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-spaces-inside-parenthesized-expression.js","filename":"disallow-spaces-inside-parenthesized-expression.js"},{"name":"disallowTabs","description":"<h1 id=\"disallowtabs\">disallowTabs</h1>\n<p>Disallows tabs everywhere.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowTabs\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n\\s\\sfoo();\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>){\n\\tfoo();\n}\n</code></pre>\n","shortDescription":"<p>Disallows tabs everywhere.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-tabs.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-tabs.js","filename":"disallow-tabs.js"},{"name":"disallowTrailingComma","description":"<h1 id=\"disallowtrailingcomma\">disallowTrailingComma</h1>\n<p>Disallows an extra comma following the final element of an array or object literal.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#es3\"><code>es3</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowTrailingComma\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> bar = {a: <span class=\"hljs-string\">\"a\"</span>, b: <span class=\"hljs-string\">\"b\"</span>}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, ];\n<span class=\"hljs-keyword\">var</span> bar = {a: <span class=\"hljs-string\">\"a\"</span>, b: <span class=\"hljs-string\">\"b\"</span>, }\n</code></pre>\n","shortDescription":"<p>Disallows an extra comma following the final element of an array or object literal.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-trailing-comma.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-trailing-comma.js","filename":"disallow-trailing-comma.js"},{"name":"disallowTrailingWhitespace","description":"<h1 id=\"disallowtrailingwhitespace\">disallowTrailingWhitespace</h1>\n<p>Requires all lines to end on a non-whitespace character</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&quot;ignoreEmptyLines&quot;</code>: (default: <code>false</code>) allow whitespace on empty lines</li>\n</ul>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#trailing\"><code>trailing</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowTrailingWhitespace\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-string\">\"blah blah\"</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-string\">\"blah blah\"</span>; <span class=\"hljs-comment\">//&lt;-- whitespace character here</span>\n</code></pre>\n<h5 id=\"valid-for-true\">Valid for <code>true</code></h5>\n<pre><code class=\"lang-js\">foo = <span class=\"hljs-string\">'bar'</span>;\n\nfoo = <span class=\"hljs-string\">'baz'</span>;\n</code></pre>\n<h5 id=\"invalid-for-true-but-valid-for-ignoreemptylines\">Invalid for <code>true</code> but Valid for <code>ignoreEmptyLines</code></h5>\n<pre><code class=\"lang-js\">foo = <span class=\"hljs-string\">'bar'</span>;\n\\t\nfoo = <span class=\"hljs-string\">'baz'</span>;\n</code></pre>\n","shortDescription":"<p>Requires all lines to end on a non-whitespace character</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-trailing-whitespace.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-trailing-whitespace.js","filename":"disallow-trailing-whitespace.js"},{"name":"disallowUnusedParams","description":"<h1 id=\"disallowunusedparams\">disallowUnusedParams</h1>\n<p>Disallows unused params in function expression and function declaration.</p>\n<p>Types: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowUnusedParams\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\">test</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> test;\n}\n\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">test</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> test;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">  * <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\">test</span>) </span>{\n}\n\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">test</span>) </span>{\n}\n</code></pre>\n","shortDescription":"<p>Disallows unused params in function expression and function declaration.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-unused-params.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-unused-params.js","filename":"disallow-unused-params.js"},{"name":"disallowYodaConditions","description":"<h1 id=\"disallowyodaconditions\">disallowYodaConditions</h1>\n<p>Requires the variable to be the left hand operator when doing a boolean comparison</p>\n<p>Type: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to disallow yoda conditions for most possible comparison operators</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowYodaConditions\"</span>: [\n    <span class=\"hljs-string\">\"==\"</span>,\n    <span class=\"hljs-string\">\"===\"</span>,\n    <span class=\"hljs-string\">\"!=\"</span>,\n    <span class=\"hljs-string\">\"!==\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span>\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">1</span> == a) {\n    <span class=\"hljs-keyword\">return</span>\n}\n</code></pre>\n","shortDescription":"<p>Requires the variable to be the left hand operator when doing a boolean comparison</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-yoda-conditions.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-yoda-conditions.js","filename":"disallow-yoda-conditions.js"},{"name":"jsDoc","description":"<h1 id=\"jsdoc\">jsDoc</h1>\n<p>Validate jsdoc comments</p>\n<h2 id=\"usage\">Usage</h2>\n<pre><code class=\"lang-json\">{\n    \"<span class=\"hljs-attribute\">jsDoc</span>\": <span class=\"hljs-value\">{\n        \"<span class=\"hljs-attribute\">checkAnnotations</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"closurecompiler\"</span></span>,\n        \"<span class=\"hljs-attribute\">checkTypes</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"strictNativeCase\"</span></span>,\n        \"<span class=\"hljs-attribute\">enforceExistence</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"exceptExports\"</span>\n        ...\n    </span>}\n</span>}\n</code></pre>\n<h2 id=\"rules\">Rules</h2>\n<h3 id=\"checkannotations\">checkAnnotations</h3>\n<p>Ensures tag names are valid</p>\n<p>There are 3 presets for <code>Closure Compiler</code>, <code>JSDoc3</code> and <code>JSDuck5</code>.</p>\n<p>By default it allows any tag of mixed set. You can pass <code>Object</code> to select\npreset with <code>preset</code> field and add custom tags with <code>extra</code> field.</p>\n<p>Type: <code>Boolean</code> or <code>String</code> or <code>{&quot;preset&quot;: String, &quot;extra&quot;: Object}</code>\n(see <a href=\"#user-content-tag-values\">tag values</a>)</p>\n<p>Values: <code>true</code>, <code>&quot;closurecompiler&quot;</code>, <code>&quot;jsdoc3&quot;</code>, <code>&quot;jsduck5&quot;</code>, <code>Object</code></p>\n<p>Context: <code>file</code></p>\n<p>Tags: <code>*</code></p>\n<h4 id=\"tag-values\">Tag values</h4>\n<p><code>extra</code> field should contains tags in keys and there are options for values:</p>\n<ul>\n<li><code>false</code> means tag available with no value</li>\n<li><code>true</code> means tag available with any value</li>\n<li><code>&quot;some&quot;</code> means tag available and requires some value</li>\n</ul>\n<p>See also <a href=\"https://github.com/jscs-dev/jscs-jsdoc/tree/master/lib/tags\">tag presets</a>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"checkAnnotations\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @chainable\n * @param {string} message\n * @return {string}\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_f</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @pororo\n * @lalala\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_f</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h4 id=\"example-2\">Example 2</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"checkAnnotations\"</span>: {\n    <span class=\"hljs-string\">\"preset\"</span>: <span class=\"hljs-string\">\"jsdoc3\"</span>,\n    <span class=\"hljs-string\">\"extra\"</span>: {\n        <span class=\"hljs-string\">\"boomer\"</span>: <span class=\"hljs-literal\">false</span>\n    }\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @boomer\n * @argument {String}\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_f</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/** @still-invalid */</span>\n</code></pre>\n<h3 id=\"checkparamexistence\">checkParamExistence</h3>\n<p>Ensures all parameters are documented.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"checkParamExistence\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {string} message\n * @return {string}\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_f</span> (<span class=\"hljs-params\"> message </span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @inheritdoc\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_f</span> (<span class=\"hljs-params\"> message </span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @return {string}\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_f</span> (<span class=\"hljs-params\"> message </span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<h3 id=\"checkparamnames\">checkParamNames</h3>\n<p>Ensures param names in jsdoc and in function declaration are equal</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>param</code>, <code>arg</code>, <code>argument</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"checkParamNames\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {String} message\n * @param {Number|Object} [line]\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\">message, line</span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {String} msg\n * @param {Number|Object} [line]\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\">message</span>) </span>{}\n</code></pre>\n<h3 id=\"requireparamtypes\">requireParamTypes</h3>\n<p>Ensures params in jsdoc contains type</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>param</code>, <code>arg</code>, <code>argument</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireParamTypes\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {String} message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h3 id=\"checkredundantparams\">checkRedundantParams</h3>\n<p>Reports redundant params in jsdoc</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>param</code>, <code>arg</code>, <code>argument</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"checkRedundantParams\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {String} message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\">message</span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {String} message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h3 id=\"checkreturntypes\">checkReturnTypes</h3>\n<p>Reports discrepancies between the claimed in jsdoc and actual type if both\nexist (code scan)</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>return</code>, <code>returns</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"checkReturnTypes\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @returns {String}\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'foo'</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @returns {String}\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\">f</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (f) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n}\n</code></pre>\n<h3 id=\"checkredundantreturns\">checkRedundantReturns</h3>\n<p>Report statements for functions with no return</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>return</code>, <code>returns</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"checkRedundantReturns\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @returns {string}\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'yes'</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @returns {string}\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// no return here</span>\n}\n</code></pre>\n<h3 id=\"requirereturntypes\">requireReturnTypes</h3>\n<p>Ensures returns in jsdoc contains type</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>return</code>, <code>returns</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireReturnTypes\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @returns {String}\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * no @return\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @returns\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h3 id=\"checktypes\">checkTypes</h3>\n<p>Reports invalid types for bunch of tags</p>\n<p>In <code>strictNativeCase</code> mode ensures that case of natives is the same as in this\nlist: <code>boolean</code>, <code>number</code>, <code>string</code>, <code>Object</code>, <code>Array</code>, <code>Date</code>, <code>RegExp</code>.</p>\n<p>In <code>capitalizedNativeCase</code> mode ensures that first letter in all native types\nand primitives is uppercased except the case with <code>function</code> in google closure\nformat: <code>{function(...)}</code></p>\n<p>Type: <code>Boolean</code> or <code>String</code></p>\n<p>Values: <code>true</code> or <code>&quot;strictNativeCase&quot;</code> or <code>&quot;capitalizedNativeCase&quot;</code></p>\n<p>Context: <code>*</code></p>\n<p>Tags: <code>typedef</code>, <code>type</code>, <code>param</code>, <code>return</code>, <code>returns</code>, <code>enum</code>, <code>var</code>, <code>prop</code>,\n<code>property</code>, <code>arg</code>, <code>argument</code>, <code>cfg</code>, <code>lends</code>, <code>extends</code>, <code>implements</code>, <code>define</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"checkTypes\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @typedef {Object} ObjectLike\n * @property {boolean} hasFlag\n * @property {string} name\n */</span>\n\n<span class=\"hljs-comment\">/** @type {number} */</span>\n<span class=\"hljs-keyword\">var</span> bar = <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-comment\">/** @const {number} */</span>\n<span class=\"hljs-keyword\">var</span> FOO = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-comment\">/**\n * @const\n * @type {number}\n */</span>\n<span class=\"hljs-keyword\">var</span> BAZ = <span class=\"hljs-number\">3</span>;\n\n<span class=\"hljs-comment\">/**\n * @param {SomeX} x\n * @returns {string}\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\">x</span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/** @type {some~number} */</span>\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-comment\">/**\n * @param {function(redundantName: Number)} x\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\">x</span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * @param {Number|Boolean|object|array} x invalid for strictNativeCase\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\">x</span>) </span>{}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/** @type {some~number} */</span>\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n</code></pre>\n<h3 id=\"checkredundantaccess\">checkRedundantAccess</h3>\n<p>Reports redundant access declarations</p>\n<p>Type: <code>Boolean</code> or <code>String</code></p>\n<p>Values: <code>true</code> or <code>&quot;enforceLeadingUnderscore&quot;</code> or <code>&quot;enforceTrailingUnderscore&quot;</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>access</code>, <code>private</code>, <code>protected</code>, <code>public</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"checkRedundantAccess\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"checkRedundantAccess\"</span>: <span class=\"hljs-string\">\"enforceLeadingUnderscore\"</span>\n</code></pre>\n<h5 id=\"valid-for-true-enforceleadingunderscore\">Valid for true, &quot;enforceLeadingUnderscore&quot;</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @access private\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_f</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * @access public\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid-for-true\">Invalid for true</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @private\n * @access private\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_f</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid-for-enforceleadingunderscore\">Invalid for &quot;enforceLeadingUnderscore&quot;</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @private\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_f</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h3 id=\"leadingunderscoreaccess\">leadingUnderscoreAccess</h3>\n<p>Ensures access declaration is set for <code>_underscored</code> function names</p>\n<p>Ignores a bunch of popular identifiers: <code>__filename</code>, <code>__dirname</code>, <code>__proto__</code>,\n<code>__defineGetter__</code>, <code>super_</code>, <code>__constructor</code>, etc.</p>\n<p>Type: <code>Boolean</code> or <code>String</code></p>\n<p>Values: <code>true</code> (means not public), <code>&quot;private&quot;</code>, <code>&quot;protected&quot;</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>access</code>, <code>private</code>, <code>protected</code>, <code>public</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"leadingUnderscoreAccess\"</span>: <span class=\"hljs-string\">\"protected\"</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @protected\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_f</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_g</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * @private\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_e</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h3 id=\"enforceexistence\">enforceExistence</h3>\n<p>Ensures jsdoc block exist</p>\n<p>Type: <code>Boolean</code>, <code>String</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&quot;exceptExports&quot;</code> (<em>deprecated</em> use <code>&quot;allExcept&quot;: [&quot;exports&quot;]</code>)</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code> array of exceptions:<ul>\n<li><code>&quot;expressions&quot;</code> skip expression functions</li>\n<li><code>&quot;exports&quot;</code> skip <code>module.exports = function () {};</code></li>\n<li><code>&quot;paramless-procedures&quot;</code> functions without parameters and with empty\nreturn statements will be skipped</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Context: <code>functions</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"enforceExistence\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @protected\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_f</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_g</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h3 id=\"requirehyphenbeforedescription\">requireHyphenBeforeDescription</h3>\n<p>Ensures a param description has a hyphen before it (checks for <code>-</code>)</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>param</code>, <code>arg</code>, <code>argument</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireHyphenBeforeDescription\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {String} - message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {String} message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h3 id=\"requirenewlineafterdescription\">requireNewlineAfterDescription</h3>\n<p>Ensures a doc comment description has padding newline</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>*</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireNewlineAfterDescription\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {String} - message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * Description\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * Description\n *\n * @param {String} - message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * Description\n * @param {String} message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h3 id=\"disallownewlineafterdescription\">disallowNewlineAfterDescription</h3>\n<p>Ensures a doc comment description has no padding newlines</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>*</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"disallowNewlineAfterDescription\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {String} - message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * Description\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * Description\n * @param {String} - message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * Description\n *\n * @param {String} message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h3 id=\"requiredescriptioncompletesentence\">requireDescriptionCompleteSentence</h3>\n<p>Ensures a doc comment description is a complete sentence.</p>\n<p>A complete sentence is defined as starting with an upper case letter and ending\nwith a period.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>*</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireDescriptionCompleteSentence\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {String} - message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * Description.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * (Description).\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * Description.\n *\n * @param {String} - message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * Description\n * On multiple lines.\n *\n * @param {String} - message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * Description\n * @param {String} message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * description starting with a lower case letter.\n * @param {String} message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * Description period is offset .\n * @param {String} message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * Description!\n * @param {String} message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h3 id=\"requireparamdescription\">requireParamDescription</h3>\n<p>Ensures a param description exists.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>param</code>, <code>arg</code>, <code>argument</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireParamDescription\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {String} arg message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\">arg</span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * @param arg message\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\">arg</span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @param {String} arg\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\">arg</span>) </span>{}\n\n<span class=\"hljs-comment\">/**\n * @param arg\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\">arg</span>) </span>{}\n</code></pre>\n<h3 id=\"requirereturndescription\">requireReturnDescription</h3>\n<p>Ensures a return description exists.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values: <code>true</code></p>\n<p>Context: <code>functions</code></p>\n<p>Tags: <code>return</code>, <code>returns</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireReturnDescription\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @returns {Boolean} Method result.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @returns {String} method result\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'Hello!'</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/**\n * @returns {Boolean}\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>\n","shortDescription":"<p>Validate jsdoc comments</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/jsdoc.js","renderTestLink":false,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/jsdoc.js","filename":"jsdoc.js"},{"name":"maximumLineLength","description":"<h1 id=\"maximumlinelength\">maximumLineLength</h1>\n<p>Requires all lines to be at most the number of characters specified</p>\n<p>Types: <code>Integer</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>Integer</code>: lines should be at most the number of characters specified</li>\n<li><code>Object</code>:<ul>\n<li><code>value</code>: (required) lines should be at most the number of characters specified</li>\n<li><code>tabSize</code>: (default: <code>1</code>) considered the tab character as number of specified spaces</li>\n<li><code>allExcept</code>: (default: <code>[]</code>) an array of conditions that will exempt a line<ul>\n<li><code>regex</code>: allows regular expression literals to break the rule</li>\n<li><code>comments</code>: allows comments to break the rule</li>\n<li><code>urlComments</code>: allows comments with long urls to break the rule</li>\n<li><code>functionSignature</code>: allows function definitions to break the rule</li>\n<li><code>require</code>: allows require expressions to break the rule</li>\n</ul>\n</li>\n<li><code>allowRegex</code>: <em>deprecated</em> use <code>allExcept: [&quot;regex&quot;]</code> instead</li>\n<li><code>allowComments</code>: <em>deprecated</em> use <code>allExcept: [&quot;comments&quot;]</code> instead</li>\n<li><code>allowUrlComments</code>: <em>deprecated</em> use <code>allExcept: [&quot;urlComments&quot;]</code> instead</li>\n</ul>\n</li>\n</ul>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#maxlen\"><code>maxlen</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"maximumLineLength\"</span>: <span class=\"hljs-number\">40</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> aLineOf40Chars = <span class=\"hljs-number\">123456789012345678</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> aLineOf41Chars = <span class=\"hljs-number\">1234567890123456789</span>;\n</code></pre>\n","shortDescription":"<p>Requires all lines to be at most the number of characters specified</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/maximum-line-length.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/maximum-line-length.js","filename":"maximum-line-length.js"},{"name":"maximumNumberOfLines","description":"<h1 id=\"maximumnumberoflines\">maximumNumberOfLines</h1>\n<p>Requires the file to be at most the number of lines specified</p>\n<p>Type: <code>Integer</code></p>\n<p>Values:</p>\n<ul>\n<li><code>Integer</code>: file should be at most the number of lines specified</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"maximumNumberOfLines\"</span>: <span class=\"hljs-number\">100</span>\n</code></pre>\n","shortDescription":"<p>Requires the file to be at most the number of lines specified</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/maximum-number-of-lines.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/maximum-number-of-lines.js","filename":"maximum-number-of-lines.js"},{"name":"requireAlignedObjectValues","description":"<h1 id=\"requirealignedobjectvalues\">requireAlignedObjectValues</h1>\n<p>Requires proper alignment in object literals.</p>\n<p>Type: <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>&quot;all&quot;</code> for strict mode,</li>\n<li><code>&quot;ignoreFunction&quot;</code> ignores objects if one of the property values is a function expression,</li>\n<li><code>&quot;ignoreLineBreak&quot;</code> ignores objects if there are line breaks between properties</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireAlignedObjectValues\"</span>: <span class=\"hljs-string\">\"all\"</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    a   : <span class=\"hljs-number\">1</span>,\n    bcd : <span class=\"hljs-number\">2</span>,\n    ef  : <span class=\"hljs-string\">'str'</span>\n};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    a : <span class=\"hljs-number\">1</span>,\n    bcd : <span class=\"hljs-number\">2</span>,\n    ef : <span class=\"hljs-string\">'str'</span>\n};\n</code></pre>\n","shortDescription":"<p>Requires proper alignment in object literals.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-aligned-object-values.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-aligned-object-values.js","filename":"require-aligned-object-values.js"},{"name":"requireAnonymousFunctions","description":"<h1 id=\"requireanonymousfunctions\">requireAnonymousFunctions</h1>\n<p>Requires that a function expression be anonymous.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>Object</code>:<ul>\n<li><code>&#39;allExcept&#39;</code> array of exceptions:<ul>\n<li><code>&#39;declarations&#39;</code> ignores function declarations</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireAnonymousFunctions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n};\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n})\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n\n};\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>{\n\n});\n</code></pre>\n<h5 id=\"valid-for-allexcept-declarations\">Valid for <code>{ &quot;allExcept&quot;: [&quot;declarations&quot;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n\n}\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n})\n</code></pre>\n","shortDescription":"<p>Requires that a function expression be anonymous.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-anonymous-functions.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-anonymous-functions.js","filename":"require-anonymous-functions.js"},{"name":"requireArrowFunctions","description":"<h1 id=\"requirearrowfunctions\">requireArrowFunctions</h1>\n<p>Requires that arrow functions are used instead of anonymous function expressions in callbacks.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>Version: <code>ES6</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireArrowFunctions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// arrow function</span>\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].map((x) =&gt; {\n    <span class=\"hljs-keyword\">return</span> x * x;\n});\n<span class=\"hljs-comment\">// function declaration</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\">n</span>) </span>{ <span class=\"hljs-keyword\">return</span> n + <span class=\"hljs-number\">1</span>; }\n<span class=\"hljs-comment\">// getter/setter</span>\n<span class=\"hljs-keyword\">var</span> x = { get y() {}, set y(y) {} }\n<span class=\"hljs-comment\">// object shorthand</span>\n<span class=\"hljs-keyword\">var</span> x = { bar() {} }\n<span class=\"hljs-comment\">// class method</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span> </span>{ bar() {} }\n<span class=\"hljs-comment\">// function expression in a return statement</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{ <span class=\"hljs-keyword\">return</span> x };\n};\n<span class=\"hljs-comment\">// function expression in a variable declaration</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{ <span class=\"hljs-keyword\">return</span> x };\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// function expression in a callback</span>\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> x * x;\n});\n</code></pre>\n","shortDescription":"<p>Requires that arrow functions are used instead of anonymous function expressions in callbacks.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-arrow-functions.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-arrow-functions.js","filename":"require-arrow-functions.js"},{"name":"requireBlocksOnNewline","description":"<h1 id=\"requireblocksonnewline\">requireBlocksOnNewline</h1>\n<p>Requires blocks to begin and end with a newline</p>\n<p>Types: <code>Boolean</code>, <code>Integer</code>, <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> validates all non-empty blocks</li>\n<li><code>Integer</code> specifies a minimum number of lines containing elements in the block before validating</li>\n<li><code>Object</code>:<ul>\n<li><code>&#39;includeComments&#39;</code><ul>\n<li><code>true</code> includes comments as part of the validation</li>\n</ul>\n</li>\n<li><code>&#39;minLines&#39;</code><ul>\n<li><code>Integer</code> specifies a minimum number of lines containing elements in the block before validating</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"examples\">Examples</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireBlocksOnNewline\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"requireBlocksOnNewline\"</span>: <span class=\"hljs-number\">1</span>\n<span class=\"hljs-string\">\"requireBlocksOnNewline\"</span>: {\n     includeComments: <span class=\"hljs-literal\">true</span>\n}\n<span class=\"hljs-string\">\"requireBlocksOnNewline\"</span>: {\n     includeComments: <span class=\"hljs-literal\">true</span>,\n     minLines: <span class=\"hljs-number\">1</span>\n}\n</code></pre>\n<h5 id=\"valid-for-mode-true\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { <span class=\"hljs-comment\">//comments</span>\n    doSomething();\n}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n<span class=\"hljs-comment\">/** comments */</span>\n}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {doSomething();}\n</code></pre>\n<h5 id=\"valid-for-mode-1\">Valid for mode <code>1</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n    doSomethingElse();\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); }\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { <span class=\"hljs-comment\">//comments</span>\n    doSomething();\n    doSomethingElse();\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); }\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n    doSomethingElse();\n    <span class=\"hljs-comment\">/** comments */</span>\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); }\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); doSomethingElse(); }\n</code></pre>\n<h5 id=\"valid-for-mode-includecomments-true\">Valid for mode <code>{ includeComments: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-comment\">//comments</span>\n    doSomething();\n}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n     <span class=\"hljs-comment\">//comments</span>\n}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { <span class=\"hljs-comment\">//comments</span>\n    doSomething();\n}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n<span class=\"hljs-comment\">/** comments */</span>}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<h5 id=\"valid-for-mode-includecomments-true-minlines-1\">Valid for mode <code>{ includeComments: true, minLines: 1 }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-comment\">//comments</span>\n    doSomething();\n    doSomethingElse();\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); }\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n    doSomethingElse();\n    <span class=\"hljs-comment\">//comments</span>\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); }\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { <span class=\"hljs-comment\">//comments</span>\n    doSomething();\n    doSomethingElse();\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); }\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n    doSomethingElse();\n    <span class=\"hljs-comment\">/** comments */</span>}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); }\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n","shortDescription":"<p>Requires blocks to begin and end with a newline</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-blocks-on-newline.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-blocks-on-newline.js","filename":"require-blocks-on-newline.js"},{"name":"requireCamelCaseOrUpperCaseIdentifiers","description":"<h1 id=\"requirecamelcaseoruppercaseidentifiers\">requireCamelCaseOrUpperCaseIdentifiers</h1>\n<p>Requires identifiers to be camelCased or UPPERCASE_WITH_UNDERSCORES</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&quot;ignoreProperties&quot;</code> allows an exception for object property names.</li>\n</ul>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#camelcase\"><code>camelcase</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireCamelCaseOrUpperCaseIdentifiers\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-mode-true\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> camelCase = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">var</span> CamelCase = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> _camelCase = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">var</span> camelCase_ = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">var</span> UPPER_CASE = <span class=\"hljs-number\">4</span>;\n</code></pre>\n<h5 id=\"invalid-for-mode-true\">Invalid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> lower_case = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> Mixed_case = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">var</span> mixed_Case = <span class=\"hljs-number\">3</span>;\n</code></pre>\n<h5 id=\"valid-for-mode-ignoreproperties\">Valid for mode <code>ignoreProperties</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> camelCase = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">var</span> CamelCase = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> _camelCase = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">var</span> camelCase_ = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">var</span> UPPER_CASE = <span class=\"hljs-number\">4</span>;\n<span class=\"hljs-keyword\">var</span> obj.snake_case = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">var</span> camelCase = { snake_case: <span class=\"hljs-number\">6</span> };\n</code></pre>\n<h5 id=\"invalid-for-mode-ignoreproperties\">Invalid for mode <code>ignoreProperties</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> lower_case = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> Mixed_case = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">var</span> mixed_Case = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">var</span> snake_case = { snake_case: <span class=\"hljs-number\">6</span> };\n</code></pre>\n","shortDescription":"<p>Requires identifiers to be camelCased or UPPERCASE_WITH_UNDERSCORES</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-camelcase-or-uppercase-identifiers.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-camelcase-or-uppercase-identifiers.js","filename":"require-camelcase-or-uppercase-identifiers.js"},{"name":"requireCapitalizedComments","description":"<h1 id=\"requirecapitalizedcomments\">requireCapitalizedComments</h1>\n<p>Requires the first alphabetical character of a comment to be uppercase, unless it is part of a multi-line textblock.</p>\n<p>This rule automatically ignores jscs, jshint, eslint and istanbul specific comments.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>Object</code>:<ul>\n<li><code>allExcept</code>: array of quoted exceptions</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireCapitalizedComments\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid:</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Valid</span>\n<span class=\"hljs-comment\">//Valid</span>\n\n<span class=\"hljs-comment\">/*\n  Valid\n */</span>\n\n<span class=\"hljs-comment\">/**\n * Valid\n */</span>\n\n<span class=\"hljs-comment\">// A textblock is a set of lines</span>\n<span class=\"hljs-comment\">// that starts with a capitalized letter</span>\n<span class=\"hljs-comment\">// and has one or more non-capitalized lines</span>\n<span class=\"hljs-comment\">// afterwards</span>\n\n<span class=\"hljs-comment\">// A textblock may also have multiple lines.</span>\n<span class=\"hljs-comment\">// Those lines can be uppercase as well to support</span>\n<span class=\"hljs-comment\">// sentense breaks in textblocks</span>\n\n<span class=\"hljs-comment\">// 123 or any non-alphabetical starting character</span>\n<span class=\"hljs-comment\">// @are also valid anywhere</span>\n\n<span class=\"hljs-comment\">// jscs: enable</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid:</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// invalid</span>\n<span class=\"hljs-comment\">//invalid</span>\n<span class=\"hljs-comment\">/** invalid */</span>\n<span class=\"hljs-comment\">/**\n * invalid\n */</span>\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireCapitalizedComments\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [<span class=\"hljs-string\">\"pragma\"</span>] }\n</code></pre>\n<h5 id=\"valid\">Valid:</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHello</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">/* pragma something */</span>\n\n    <span class=\"hljs-comment\">// I can now say hello in lots of statements, if I like.</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello\"</span>;\n}\n</code></pre>\n<h5 id=\"valid\">Valid:</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHello</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">/* istanbul ignore next */</span>\n\n    <span class=\"hljs-comment\">// I'd like to ignore this statement in coverage reports.</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello\"</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid:</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHello</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">/* otherPragma something */</span>\n\n    <span class=\"hljs-comment\">// i can now say hello in lots of statements, if I like.</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello\"</span>;\n}\n</code></pre>\n","shortDescription":"<p>Requires the first alphabetical character of a comment to be uppercase, unless it is part of a multi-line textblock.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-capitalized-comments.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-capitalized-comments.js","filename":"require-capitalized-comments.js"},{"name":"requireCapitalizedConstructors","description":"<h1 id=\"requirecapitalizedconstructors\">requireCapitalizedConstructors</h1>\n<p>Requires constructors to be capitalized (except for <code>this</code>)</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values: <code>true</code> or Object with <code>allExcept</code> Array of quoted identifiers which are exempted</p>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#newcap\"><code>newcap</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireCapitalizedConstructors\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"requireCapitalizedConstructors\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [<span class=\"hljs-string\">\"somethingNative\"</span>]\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> B();\n<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">this</span>();\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> somethingNative();\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> e();\n</code></pre>\n","shortDescription":"<p>Requires constructors to be capitalized (except for <code>this</code>)</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-capitalized-constructors.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-capitalized-constructors.js","filename":"require-capitalized-constructors.js"},{"name":"requireCommaBeforeLineBreak","description":"<h1 id=\"requirecommabeforelinebreak\">requireCommaBeforeLineBreak</h1>\n<p>Requires commas as last token on a line in lists.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#laxcomma\"><code>laxcomma</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireCommaBeforeLineBreak\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    one: <span class=\"hljs-number\">1</span>,\n    two: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> y = { three: <span class=\"hljs-number\">3</span>, four: <span class=\"hljs-number\">4</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    one: <span class=\"hljs-number\">1</span>\n    , two: <span class=\"hljs-number\">2</span>\n};\n</code></pre>\n","shortDescription":"<p>Requires commas as last token on a line in lists.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-comma-before-line-break.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-comma-before-line-break.js","filename":"require-comma-before-line-break.js"},{"name":"requireCurlyBraces","description":"<h1 id=\"requirecurlybraces\">requireCurlyBraces</h1>\n<p>Requires curly braces after statements.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted keywords or <code>true</code> to require curly braces after the following keywords:</p>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#curly\"><code>curly</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireCurlyBraces\"</span>: [\n    <span class=\"hljs-string\">\"if\"</span>,\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"for\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"do\"</span>,\n    <span class=\"hljs-string\">\"try\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>,\n    <span class=\"hljs-string\">\"case\"</span>,\n    <span class=\"hljs-string\">\"default\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x) {\n    x++;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x) x++;\n</code></pre>\n","shortDescription":"<p>Requires curly braces after statements.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-curly-braces.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-curly-braces.js","filename":"require-curly-braces.js"},{"name":"requireDollarBeforejQueryAssignment","description":"<h1 id=\"requiredollarbeforejqueryassignment\">requireDollarBeforejQueryAssignment</h1>\n<p>Require a $ before variable names that are jquery assignments.</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values: <code>true</code> or <code>&quot;ignoreProperties&quot;</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireDollarBeforejQueryAssignment\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-example-for-mode-true\">Valid example for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> $x = $(<span class=\"hljs-string\">\".foo\"</span>);\n<span class=\"hljs-keyword\">var</span> y = {\n  $x: $(<span class=\"hljs-string\">\".bar\"</span>)\n};\n</code></pre>\n<h5 id=\"invalid-example-for-mode-true\">Invalid example for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = $(<span class=\"hljs-string\">\".foo\"</span>);\n<span class=\"hljs-keyword\">var</span> y = {\n  x: $(<span class=\"hljs-string\">\".bar\"</span>)\n};\n</code></pre>\n<h5 id=\"valid-example-for-mode-ignoreproperties\">Valid example for mode <code>ignoreProperties</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> $x = $(<span class=\"hljs-string\">\".foo\"</span>);\n<span class=\"hljs-keyword\">var</span> y = {\n  x: $(<span class=\"hljs-string\">\".bar\"</span>)\n};\n</code></pre>\n<h5 id=\"invalid-example-for-mode-ignoreproperties\">Invalid example for mode <code>ignoreProperties</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = $(<span class=\"hljs-string\">\".foo\"</span>);\n</code></pre>\n","shortDescription":"<p>Require a $ before variable names that are jquery assignments.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-dollar-before-jquery-assignment.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-dollar-before-jquery-assignment.js","filename":"require-dollar-before-jquery-assignment.js"},{"name":"requireDotNotation","description":"<h1 id=\"requiredotnotation\">requireDotNotation</h1>\n<p>Requires member expressions to use dot notation when possible</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&quot;except_snake_case&quot;</code> (<em>deprecated</em> use <code>&quot;allExcept&quot;: [&quot;snake_case&quot;]</code>) allow quoted snake cased identifiers</li>\n<li><code>Object</code>:<ul>\n<li><code>&#39;allExcept&#39;</code> array of exceptions:<ul>\n<li><code>&#39;keywords&#39;</code> allow quoted identifiers made of reserved words</li>\n<li><code>&#39;snake_case&#39;</code> allow quoted snake cased identifiers</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>N.B.: keywords are always allowed with es3 enabled (<a href=\"http://jscs.info/overview.html#es3\">http://jscs.info/overview.html#es3</a>)</p>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#sub\"><code>sub</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireDotNotation\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[c];\n<span class=\"hljs-keyword\">var</span> a = b.c;\n<span class=\"hljs-keyword\">var</span> a = b[c.d];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-number\">1</span>];\n<span class=\"hljs-keyword\">var</span> a = b.while; <span class=\"hljs-comment\">// reserved words can be property names in ES5</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'c'</span>];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'snake_cased'</span>];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'_camelCased'</span>];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'camelCased_'</span>];\n</code></pre>\n<h4 id=\"example-for-allexcept-snake_case\">Example for allExcept snake_case</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireDotNotation\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"snake_case\"</span> ] }\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[c];\n<span class=\"hljs-keyword\">var</span> a = b.c;\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'snake_cased'</span>];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'camelCased_butWithSnakes'</span>];\n</code></pre>\n<h4 id=\"example-for-allexcept-keywords\">Example for allExcept keywords</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireDotNotation\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"keywords\"</span> ] }\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'yield'</span>]; <span class=\"hljs-comment\">// reserved word in ES5</span>\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'let'</span>];\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'await'</span>]; <span class=\"hljs-comment\">// reserved word in ES6</span>\n</code></pre>\n<h4 id=\"example-for-allexcept-keywords-with-esnext\">Example for allExcept keywords with esnext</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireDotNotation\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"keywords\"</span> ] }\n<span class=\"hljs-string\">\"esnext\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'await'</span>]; <span class=\"hljs-comment\">// reserved word in ES6</span>\n</code></pre>\n<h4 id=\"example-for-es3-true\">Example for <code>&quot;es3&quot;: true</code></h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireDotNotation\"</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-string\">\"es3\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[c];\n<span class=\"hljs-keyword\">var</span> a = b.c;\n<span class=\"hljs-keyword\">var</span> a = b[c.d];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-number\">1</span>];\n<span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'while'</span>]; <span class=\"hljs-comment\">// reserved word in ES3</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b[<span class=\"hljs-string\">'c'</span>];\n</code></pre>\n","shortDescription":"<p>Requires member expressions to use dot notation when possible</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-dot-notation.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-dot-notation.js","filename":"require-dot-notation.js"},{"name":"requireFunctionDeclarations","description":"<h1 id=\"requirefunctiondeclarations\">requireFunctionDeclarations</h1>\n<p>Requires function declarations by disallowing assignment of functions\nexpressions to variables. Function expressions are allowed in all other\ncontexts, including when passed as function arguments or immediately invoked.</p>\n<p>Assignment of function expressions to object members is also permitted, since\nthese can&#39;t be declared.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireFunctionDeclarations\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">declared</span>(<span class=\"hljs-params\"></span>) </span>{\n\n};\n\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">iife</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>;\n})();\n\n<span class=\"hljs-keyword\">var</span> obj = {\n    a: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}\n};\n\nobj.b = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ };\n\n$(<span class=\"hljs-string\">'#foo'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>{\n\n};)\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> expressed = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n};\n\n<span class=\"hljs-keyword\">var</span> expressed = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deeply</span>(<span class=\"hljs-params\"></span>) </span>{\n\n};\n</code></pre>\n","shortDescription":"<p>Requires function declarations by disallowing assignment of functions\nexpressions to variables. Function expressions are allowed in all other\ncontexts, including when passed as function arguments or immediately invoked.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-function-declarations.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-function-declarations.js","filename":"require-function-declarations.js"},{"name":"requireKeywordsOnNewLine","description":"<h1 id=\"requirekeywordsonnewline\">requireKeywordsOnNewLine</h1>\n<p>Requires placing keywords on a new line.</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of quoted keywords</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireKeywordsOnNewLine\"</span>: [<span class=\"hljs-string\">\"else\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>) {\n    x++;\n}\n<span class=\"hljs-keyword\">else</span> {\n    x--;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>) {\n    x++;\n} <span class=\"hljs-keyword\">else</span> {\n    x--;\n}\n</code></pre>\n","shortDescription":"<p>Requires placing keywords on a new line.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-keywords-on-new-line.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-keywords-on-new-line.js","filename":"require-keywords-on-new-line.js"},{"name":"requireLineBreakAfterVariableAssignment","description":"<h1 id=\"requirelinebreakaftervariableassignment\">requireLineBreakAfterVariableAssignment</h1>\n<p>Requires placing line feed after assigning a variable.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireLineBreakAfterVariableAssignment\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-number\">8</span>;\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">5</span>;\n\n<span class=\"hljs-keyword\">var</span> a, b, c,\n    foo = <span class=\"hljs-number\">7</span>,\n    bar = <span class=\"hljs-number\">8</span>;\n\n<span class=\"hljs-keyword\">var</span> a,\n    foo = <span class=\"hljs-number\">7</span>,\n    a, b, c,\n    bar = <span class=\"hljs-number\">8</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-number\">8</span>; <span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">5</span>;\n\n<span class=\"hljs-keyword\">var</span> a, b, c,\n    foo = <span class=\"hljs-number\">7</span>, bar = <span class=\"hljs-number\">8</span>;\n</code></pre>\n","shortDescription":"<p>Requires placing line feed after assigning a variable.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-line-break-after-variable-assignment.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-line-break-after-variable-assignment.js","filename":"require-line-break-after-variable-assignment.js"},{"name":"requireLineFeedAtFileEnd","description":"<h1 id=\"requirelinefeedatfileend\">requireLineFeedAtFileEnd</h1>\n<p>Requires placing line feed at file end.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireLineFeedAtFileEnd\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n","shortDescription":"<p>Requires placing line feed at file end.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-line-feed-at-file-end.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-line-feed-at-file-end.js","filename":"require-line-feed-at-file-end.js"},{"name":"requireMatchingFunctionName","description":"<h1 id=\"requirematchingfunctionname\">requireMatchingFunctionName</h1>\n<p>Requires function names to match member and property names.</p>\n<p>It doesn&#39;t affect anonymous functions nor functions assigned to members or\nproperties named with a reserved word.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireMatchingFunctionName\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> test = {};\ntest.foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> test = {};\ntest[<span class=\"hljs-string\">'foo'</span>] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> test = {foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{}};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> test = {};\ntest.foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> test = {};\ntest[<span class=\"hljs-string\">'foo'</span>] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> test = {foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>{}};\n</code></pre>\n","shortDescription":"<p>Requires function names to match member and property names.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-matching-function-name.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-matching-function-name.js","filename":"require-matching-function-name.js"},{"name":"requireMultiLineTernary","description":"<h1 id=\"requiremultilineternary\">requireMultiLineTernary</h1>\n<p>Requires the test, consequent and alternate to be on separate lines when using the ternary operator.</p>\n<p>Types: <code>Boolean</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireMultiLineTernary\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = (a === b)\n  ? <span class=\"hljs-number\">1</span>\n  : <span class=\"hljs-number\">2</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = (a === b) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\n</code></pre>\n","shortDescription":"<p>Requires the test, consequent and alternate to be on separate lines when using the ternary operator.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-multi-line-ternary.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-multi-line-ternary.js","filename":"require-multi-line-ternary.js"},{"name":"requireMultipleVarDecl","description":"<h1 id=\"requiremultiplevardecl\">requireMultipleVarDecl</h1>\n<p>Requires multiple <code>var</code> declaration.</p>\n<p>Types: <code>Boolean</code> or <code>String</code> or <code>Object</code></p>\n<p>Values: <code>true</code> or <code>&quot;onevar&quot;</code> or <code>allExcept: [&#39;require&#39;]</code></p>\n<p>If <code>requireMultipleVarDecl</code> defined as a <code>true</code> value, it will report only consecutive vars, if, on the other hand,\nvalue equals to <code>&quot;onevar&quot;</code> string, <code>requireMultipleVarDecl</code> will allow only one <code>var</code> per function scope.</p>\n<p>If the value is <code>allExcept: [&#39;require&#39;]</code>, then require statements are allowed to have a var declaration per variable.</p>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#onevar\"><code>onevar</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireMultipleVarDecl\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>,\n    y = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<h5 id=\"valid-for-allexcept-require\">Valid for <code>allExcept: [&#39;require&#39;]</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"a\"</span>);\n<span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"b\"</span>);\n<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-number\">1</span>,\n    d = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n</code></pre>\n","shortDescription":"<p>Requires multiple <code>var</code> declaration.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-multiple-var-decl.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-multiple-var-decl.js","filename":"require-multiple-var-decl.js"},{"name":"requireNamedUnassignedFunctions","description":"<h1 id=\"requirenamedunassignedfunctions\">requireNamedUnassignedFunctions</h1>\n<p>Require unassigned functions to be named inline</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>Object</code>:<ul>\n<li><code>allExcept</code>: array of quoted identifiers</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireNamedUnassignedFunctions\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [<span class=\"hljs-string\">\"describe\"</span>, <span class=\"hljs-string\">\"it\"</span>] }\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">[].forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\"></span>) </span>{});\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">z</span>(<span class=\"hljs-params\"></span>) </span>{}\nit(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">[].forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});\nbefore(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});\n</code></pre>\n","shortDescription":"<p>Require unassigned functions to be named inline</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-named-unassigned-functions.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-named-unassigned-functions.js","filename":"require-named-unassigned-functions.js"},{"name":"requireNewlineBeforeBlockStatements","description":"<h1 id=\"requirenewlinebeforeblockstatements\">requireNewlineBeforeBlockStatements</h1>\n<p>Requires newline before opening curly brace of all block statements.</p>\n<p>Type: <code>Boolean</code> or <code>Array</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> always requires newline before curly brace of block statements</li>\n<li><code>Array</code> specifies block-type keywords after which newlines are required before curly brace<ul>\n<li>Valid types include: <code>[&#39;if&#39;, &#39;else&#39;, &#39;try&#39;, &#39;catch&#39;, &#39;finally&#39;, &#39;do&#39;, &#39;while&#39;, &#39;for&#39;, &#39;function&#39;]</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireNewlineBeforeBlockStatements\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">good</span>(<span class=\"hljs-params\"></span>)\n</span>{\n    <span class=\"hljs-keyword\">var</span> obj =\n    {\n        val: <span class=\"hljs-literal\">true</span>\n    };\n\n    <span class=\"hljs-keyword\">return</span> {\n        data: obj\n    };\n}\n\n<span class=\"hljs-keyword\">if</span> (cond)\n{\n    foo();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements)\n{\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond)\n{\n    foo();\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bad</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> obj = {\n        val: <span class=\"hljs-literal\">true</span>\n    };\n\n    <span class=\"hljs-keyword\">return</span> {\n        data: obj\n    };\n}\n\n<span class=\"hljs-keyword\">if</span> (cond){\n    foo();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements){\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond){\n    foo();\n}\n</code></pre>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireNewlineBeforeBlockStatements\"</span>: [<span class=\"hljs-string\">\"if\"</span>, <span class=\"hljs-string\">\"else\"</span>, <span class=\"hljs-string\">\"for\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span>)\n{\n    positive = <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">0</span>)\n{\n    negative = <span class=\"hljs-literal\">true</span>;\n}\n<span class=\"hljs-keyword\">else</span>\n{\n    negative = <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, len = myList.length; i &lt; len; ++i)\n{\n    newList.push(myList[i]);\n}\n\n<span class=\"hljs-comment\">// this is fine, since \"function\" wasn't configured</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myFunc</span>(<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> x + <span class=\"hljs-number\">1</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">0</span>) {\n    negative = <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">0</span>) {\n    negative = <span class=\"hljs-literal\">true</span>;\n} <span class=\"hljs-keyword\">else</span> {\n    negative = <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, len = myList.length; i &lt; len; ++i) {\n    newList.push(myList[i]);\n}\n</code></pre>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireNewlineBeforeBlockStatements\"</span>: [<span class=\"hljs-string\">\"function\"</span>, <span class=\"hljs-string\">\"while\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myFunc</span>(<span class=\"hljs-params\">x</span>)\n</span>{\n    <span class=\"hljs-keyword\">return</span> x + <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>)\n</span>{\n    <span class=\"hljs-keyword\">return</span> x - <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-comment\">// this is fine, since \"for\" wasn't configured</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, len = myList.length; i &lt; len; ++i) {\n    newList.push(myList[i]);\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myFunc</span>(<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> x + <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> x - <span class=\"hljs-number\">1</span>;\n}\n</code></pre>\n","shortDescription":"<p>Requires newline before opening curly brace of all block statements.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-newline-before-block-statements.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-newline-before-block-statements.js","filename":"require-newline-before-block-statements.js"},{"name":"requireNumericLiterals","description":"<h1 id=\"requirenumericliterals\">requireNumericLiterals</h1>\n<p>Requires use of binary, hexadecimal, and octal literals instead of parseInt.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>Version: <code>ES6</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireNumericLiterals\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-number\">0b111110111</span> === <span class=\"hljs-number\">503</span>;\n<span class=\"hljs-number\">0o767</span> === <span class=\"hljs-number\">503</span>;\n<span class=\"hljs-number\">0x1F7</span> === <span class=\"hljs-number\">503</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">\"111110111\"</span>, <span class=\"hljs-number\">2</span>) === <span class=\"hljs-number\">503</span>;\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">\"767\"</span>, <span class=\"hljs-number\">8</span>) === <span class=\"hljs-number\">503</span>;\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">\"1F7\"</span>, <span class=\"hljs-number\">16</span>) === <span class=\"hljs-number\">255</span>;\n</code></pre>\n","shortDescription":"<p>Requires use of binary, hexadecimal, and octal literals instead of parseInt.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-numeric-literals.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-numeric-literals.js","filename":"require-numeric-literals.js"},{"name":"requireObjectKeysOnNewLine","description":"<h1 id=\"requireobjectkeysonnewline\">requireObjectKeysOnNewLine</h1>\n<p>Requires placing object keys on new line</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireObjectKeysOnNewLine\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = {\n    b: <span class=\"hljs-string\">'b'</span>,\n    c: <span class=\"hljs-string\">'c'</span>\n};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = {\n    b: <span class=\"hljs-string\">'b'</span>, c: <span class=\"hljs-string\">'c'</span>\n};\n</code></pre>\n","shortDescription":"<p>Requires placing object keys on new line</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-object-keys-on-new-line.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-object-keys-on-new-line.js","filename":"require-object-keys-on-new-line.js"},{"name":"requireOperatorBeforeLineBreak","description":"<h1 id=\"requireoperatorbeforelinebreak\">requireOperatorBeforeLineBreak</h1>\n<p>Requires operators to appear before line breaks and not after.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to require all possible binary operators to appear before line breaks</p>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#laxbreak\"><code>laxbreak</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireOperatorBeforeLineBreak\"</span>: [\n    <span class=\"hljs-string\">\"?\"</span>,\n    <span class=\"hljs-string\">\"=\"</span>,\n    <span class=\"hljs-string\">\"+\"</span>,\n    <span class=\"hljs-string\">\"-\"</span>,\n    <span class=\"hljs-string\">\"/\"</span>,\n    <span class=\"hljs-string\">\"*\"</span>,\n    <span class=\"hljs-string\">\"==\"</span>,\n    <span class=\"hljs-string\">\"===\"</span>,\n    <span class=\"hljs-string\">\"!=\"</span>,\n    <span class=\"hljs-string\">\"!==\"</span>,\n    <span class=\"hljs-string\">\"&gt;\"</span>,\n    <span class=\"hljs-string\">\"&gt;=\"</span>,\n    <span class=\"hljs-string\">\"&lt;\"</span>,\n    <span class=\"hljs-string\">\"&lt;=\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x = y ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\nx = y ?\n    <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x = y\n    ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\n</code></pre>\n","shortDescription":"<p>Requires operators to appear before line breaks and not after.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-operator-before-line-break.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-operator-before-line-break.js","filename":"require-operator-before-line-break.js"},{"name":"requirePaddingNewLineAfterVariableDeclaration","description":"<h1 id=\"requirepaddingnewlineaftervariabledeclaration\">requirePaddingNewLineAfterVariableDeclaration</h1>\n<p>Requires an extra blank newline after var declarations, as long\nas it is not the last expression in the current block.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewLineAfterVariableDeclaration\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    a: <span class=\"hljs-number\">1</span>\n};\n\nfoo({\n    a: {\n        b: <span class=\"hljs-number\">1</span>\n    }\n});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: <span class=\"hljs-number\">1</span> };\nfoo({a:{b:<span class=\"hljs-number\">1</span>}});\n</code></pre>\n","shortDescription":"<p>Requires an extra blank newline after var declarations, as long\nas it is not the last expression in the current block.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newline-after-variable-declaration.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-padding-newline-after-variable-declaration.js","filename":"require-padding-newline-after-variable-declaration.js"},{"name":"requirePaddingNewLinesAfterBlocks","description":"<h1 id=\"requirepaddingnewlinesafterblocks\">requirePaddingNewLinesAfterBlocks</h1>\n<p>Requires newline after blocks</p>\n<p>Type: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code>: always require a newline after blocks</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code>: <code>Array</code><ul>\n<li><code>&quot;inCallExpressions&quot;</code> Blocks don&#39;t need a line of padding in function argument lists</li>\n<li><code>&quot;inNewExpressions&quot;</code> Blocks don&#39;t need a line of padding in constructor argument lists</li>\n<li><code>&quot;inArrayExpressions&quot;</code> Blocks don&#39;t need a line of padding in arrays</li>\n<li><code>&quot;inProperties&quot;</code> Blocks don&#39;t need a line of padding as object properties</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewLinesAfterBlocks\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"requirePaddingNewLinesAfterBlocks\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [<span class=\"hljs-string\">\"inCallExpressions\"</span>, <span class=\"hljs-string\">\"inNewExpressions\"</span>, <span class=\"hljs-string\">\"inArrayExpressions\"</span>, <span class=\"hljs-string\">\"inProperties\"</span>]\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n\n    <span class=\"hljs-keyword\">var</span> obj = {\n        foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        },\n\n        bar: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n        }\n    };\n\n    func(\n         <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n         }\n    );\n\n    <span class=\"hljs-keyword\">var</span> a = [\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        },\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        }\n    ]\n\n}\n</code></pre>\n<h5 id=\"valid-for-allexcept-incallexpressions\">Valid for <code>{ &quot;allExcept&quot;: [&quot;inCallExpressions&quot;] }</code></h5>\n<pre><code class=\"lang-js\">func(\n    <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    }\n);\n</code></pre>\n<h5 id=\"valid-for-allexcept-innewexpressions\">Valid for <code>{ &quot;allExcept&quot;: [&quot;inNewExpressions&quot;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">new</span> SomeClass(\n    <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    }\n);\n</code></pre>\n<h5 id=\"valid-for-allexcept-inarrayexpressions\">Valid for <code>{ &quot;allExcept&quot;: [&quot;inArrayExpressions&quot;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = [\n    <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    }\n];\n</code></pre>\n<ul>\n<li><h5 id=\"valid-for-allexcept-inproperties\">Valid for <code>{ &quot;allExcept&quot;: [&quot;inProperties&quot;] }</code></h5>\n</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = {\n    a: <span class=\"hljs-number\">2</span>,\n    b: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    },\n    c: <span class=\"hljs-number\">3</span>\n];\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n}\n</code></pre>\n","shortDescription":"<p>Requires newline after blocks</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-after-blocks.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-padding-newlines-after-blocks.js","filename":"require-padding-newlines-after-blocks.js"},{"name":"requirePaddingNewLinesAfterUseStrict","description":"<h1 id=\"requirepaddingnewlinesafterusestrict\">requirePaddingNewLinesAfterUseStrict</h1>\n<p>Requires a blank line after <code>&#39;use strict&#39;;</code> statements</p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> for default behavior (require blank line after &#39;use strict&#39; statements)</li>\n<li><code>Object</code>:<ul>\n<li><code>&#39;allExcept&#39;</code> array of exceptions:<ul>\n<li><code>&#39;require&#39;</code> allows &#39;require&#39; statements to occur immediately after &#39;use strict&#39;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewLinesAfterUseStrict\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-pi\">'use strict'</span>;\n\n<span class=\"hljs-comment\">// code</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-pi\">'use strict'</span>;\n<span class=\"hljs-comment\">// code</span>\n</code></pre>\n","shortDescription":"<p>Requires a blank line after <code>&#39;use strict&#39;;</code> statements</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-after-use-strict.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-padding-newlines-after-use-strict.js","filename":"require-padding-newlines-after-use-strict.js"},{"name":"requirePaddingNewLinesBeforeExport","description":"<h1 id=\"requirepaddingnewlinesbeforeexport\">requirePaddingNewLinesBeforeExport</h1>\n<p>Requires newline before module.exports</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewLinesBeforeExport\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-built_in\">module</span>.exports = a;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-built_in\">module</span>.exports = a;\n</code></pre>\n","shortDescription":"<p>Requires newline before module.exports</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-before-export.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-padding-newlines-before-export.js","filename":"require-padding-newlines-before-export.js"},{"name":"requirePaddingNewlinesBeforeKeywords","description":"<h1 id=\"requirepaddingnewlinesbeforekeywords\">requirePaddingNewlinesBeforeKeywords</h1>\n<p>Requires an empty line above the specified keywords unless the keyword is the first expression in a block.</p>\n<p>Types: <code>Boolean</code> or <code>Array</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> specifies that the spacedKeywords found in the utils module require an empty line above it</li>\n<li><code>Array</code> specifies quoted keywords which require an empty line above it</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewlinesBeforeKeywords\"</span>: [\n    <span class=\"hljs-string\">\"do\"</span>,\n    <span class=\"hljs-string\">\"for\"</span>,\n    <span class=\"hljs-string\">\"if\"</span>,\n    <span class=\"hljs-string\">\"else\"</span>\n    <span class=\"hljs-comment\">// etc</span>\n]\n</code></pre>\n<h5 id=\"valid-for-mode-true\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!a) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b; i++) {\n        <span class=\"hljs-keyword\">if</span> (!a[i]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n\n    <span class=\"hljs-keyword\">while</span> (a) {\n        a = <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!a) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b; i++) {\n        <span class=\"hljs-keyword\">if</span> (!a[i]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">while</span> (a) {\n        a = <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<h5 id=\"valid-for-mode-if-for\">Valid for mode <code>[&#39;if&#39;, for&#39;]</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!a) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b; i++) {\n        <span class=\"hljs-keyword\">if</span> (!a[i]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">while</span> (a) {\n        a = <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!a) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b; i++) {\n        <span class=\"hljs-keyword\">if</span> (!a[i]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">while</span> (a) {\n        a = <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n","shortDescription":"<p>Requires an empty line above the specified keywords unless the keyword is the first expression in a block.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-before-keywords.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-padding-newlines-before-keywords.js","filename":"require-padding-newlines-before-keywords.js"},{"name":"requirePaddingNewLinesBeforeLineComments","description":"<h1 id=\"requirepaddingnewlinesbeforelinecomments\">requirePaddingNewLinesBeforeLineComments</h1>\n<p>Requires newline before line comments</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code>: always require a newline before line comments</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code>: <code>&quot;firstAfterCurly&quot;</code> Comments may be first line of block without extra padding</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"examples\">Examples</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewLinesBeforeLineComments\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"requirePaddingNewLinesBeforeLineComments\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: <span class=\"hljs-string\">\"firstAfterCurly\"</span> }\n</code></pre>\n<h5 id=\"valid-for-true\">Valid for <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">// comment</span>\n\n<span class=\"hljs-comment\">// comment</span>\n<span class=\"hljs-keyword\">return</span> a;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-comment\">// comment</span>\n}\n</code></pre>\n<h5 id=\"valid-for-allexcept-firstaftercurly\">Valid for <code>{ &quot;allExcept&quot;: &quot;firstAfterCurly&quot; }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-comment\">// comment</span>\n<span class=\"hljs-keyword\">return</span> a;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// comment</span>\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-comment\">//comment</span>\n<span class=\"hljs-keyword\">return</span> a;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// comment</span>\n}\n</code></pre>\n","shortDescription":"<p>Requires newline before line comments</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-before-line-comments.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-padding-newlines-before-line-comments.js","filename":"require-padding-newlines-before-line-comments.js"},{"name":"requirePaddingNewlinesInBlocks","description":"<h1 id=\"requirepaddingnewlinesinblocks\">requirePaddingNewlinesInBlocks</h1>\n<p>Requires blocks to begin and end with 2 newlines</p>\n<p>Types: <code>Boolean</code>, <code>Integer</code>, <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> validates all non-empty blocks</li>\n<li><code>Integer</code> specifies a minimum number of lines containing elements in the block before validating</li>\n<li><code>Object</code> (at least one of properties must be true):<ul>\n<li><code>&#39;open&#39;</code><ul>\n<li><code>true</code> validates that there is a newline after the opening brace in a block</li>\n<li><code>false</code> ignores the newline validation after the opening brace in a block</li>\n</ul>\n</li>\n<li><code>&#39;close&#39;</code><ul>\n<li><code>true</code> validates that there is a newline before the closing brace in a block</li>\n<li><code>false</code> ignores the newline validation before the closing brace in a block</li>\n</ul>\n</li>\n<li><code>&#39;allExcept&#39;</code> array of exceptions:<ul>\n<li><code>&#39;conditionals&#39;</code> ignores conditional (if, else if, else) blocks</li>\n<li><code>&#39;functions&#39;</code> ignores function blocks</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewlinesInBlocks\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"requirePaddingNewlinesInBlocks\"</span>: <span class=\"hljs-number\">1</span>\n<span class=\"hljs-string\">\"requirePaddingNewlinesInBlocks\"</span>: { <span class=\"hljs-string\">\"open\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">\"close\"</span>: <span class=\"hljs-literal\">false</span> }\n<span class=\"hljs-string\">\"requirePaddingNewlinesInBlocks\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"conditionals\"</span> ] }\n<span class=\"hljs-string\">\"requirePaddingNewlinesInBlocks\"</span>: { <span class=\"hljs-string\">\"open\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">\"close\"</span>: <span class=\"hljs-literal\">false</span>, allExcept: [<span class=\"hljs-string\">'conditionals'</span>] }\n</code></pre>\n<h5 id=\"valid-for-mode-true-or-open-true-close-true\">Valid for mode <code>true</code> or <code>{ &quot;open&quot;: true, &quot;close&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n\n    doSomething();\n\n}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {doSomething();}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n}\n</code></pre>\n<h5 id=\"valid-for-mode-1\">Valid for mode <code>1</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n\n    doSomething();\n    doSomethingElse();\n\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); }\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) { doSomething(); doSomethingElse(); }\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n    doSomethingElse();\n}\n</code></pre>\n<h5 id=\"valid-for-mode-open-true-close-false\">Valid for mode <code>{ &quot;open&quot;: true, &quot;close&quot;: false }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n\n    doSomething();\n}\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {doSomething();}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n}\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n\n}\n</code></pre>\n<h5 id=\"valid-for-allexcept-conditionals\">Valid for <code>{ allExcept: [&#39;conditionals&#39;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">foo</span>) </span>{\n\n    <span class=\"hljs-keyword\">return</span> bar;\n\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">foo</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> bar;\n}\n</code></pre>\n<h5 id=\"valid-for-open-true-close-false-allexcept-conditionals\">Valid for <code>{  &quot;open&quot;: true, &quot;close&quot;: false, allExcept: [&#39;conditionals&#39;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">foo</span>) </span>{\n\n    <span class=\"hljs-keyword\">return</span> bar;\n}\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    doSomething();\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">foo</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> bar;\n\n}\n</code></pre>\n","shortDescription":"<p>Requires blocks to begin and end with 2 newlines</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-in-blocks.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-padding-newlines-in-blocks.js","filename":"require-padding-newlines-in-blocks.js"},{"name":"requirePaddingNewLinesInObjects","description":"<h1 id=\"requirepaddingnewlinesinobjects\">requirePaddingNewLinesInObjects</h1>\n<p>Requires newline inside curly braces of all objects.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requirePaddingNewLinesInObjects\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n    a: <span class=\"hljs-number\">1</span>\n};\nfoo({\n    a: {\n        b: <span class=\"hljs-number\">1</span>\n    }\n});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: <span class=\"hljs-number\">1</span> };\nfoo({a:{b:<span class=\"hljs-number\">1</span>}});\n</code></pre>\n","shortDescription":"<p>Requires newline inside curly braces of all objects.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-in-objects.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-padding-newlines-in-objects.js","filename":"require-padding-newlines-in-objects.js"},{"name":"requireParenthesesAroundArrowParam","description":"<h1 id=\"requireparenthesesaroundarrowparam\">requireParenthesesAroundArrowParam</h1>\n<p>Requires parentheses around arrow function expressions with a single parameter.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>Version: <code>ES6</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireParenthesesAroundArrowParam\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].map((x) =&gt; x * x);\n<span class=\"hljs-comment\">// params are always required for multiple parameters</span>\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].map((x, y, z) =&gt; x * x);\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].map(x =&gt; x * x);\n</code></pre>\n","shortDescription":"<p>Requires parentheses around arrow function expressions with a single parameter.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-parentheses-around-arrow-param.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-parentheses-around-arrow-param.js","filename":"require-parentheses-around-arrow-param.js"},{"name":"requireParenthesesAroundIIFE","description":"<h1 id=\"requireparenthesesaroundiife\">requireParenthesesAroundIIFE</h1>\n<p>Requires parentheses around immediately invoked function expressions.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>JSHint: <a href=\"http://www.jshint.com/docs/options/#immed\"><code>immed</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireParenthesesAroundIIFE\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>; })();\n<span class=\"hljs-keyword\">var</span> b = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>; }());\n<span class=\"hljs-keyword\">var</span> c = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span>; }).call(<span class=\"hljs-keyword\">this</span>, arg1);\n<span class=\"hljs-keyword\">var</span> d = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span>; }.call(<span class=\"hljs-keyword\">this</span>, arg1));\n<span class=\"hljs-keyword\">var</span> e = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">return</span> d; }).apply(<span class=\"hljs-keyword\">this</span>, args);\n<span class=\"hljs-keyword\">var</span> f = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">return</span> d; }.apply(<span class=\"hljs-keyword\">this</span>, args));\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>; }();\n<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span>; }.call(<span class=\"hljs-keyword\">this</span>, arg1);\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">return</span> d; }.apply(<span class=\"hljs-keyword\">this</span>, args);\n</code></pre>\n","shortDescription":"<p>Requires parentheses around immediately invoked function expressions.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-parentheses-around-iife.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-parentheses-around-iife.js","filename":"require-parentheses-around-iife.js"},{"name":"requireQuotedKeysInObjects","description":"<h1 id=\"requirequotedkeysinobjects\">requireQuotedKeysInObjects</h1>\n<p>Requires quoted keys in objects.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireQuotedKeysInObjects\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">  * <span class=\"hljs-keyword\">var</span> x = { <span class=\"hljs-string\">'a'</span>: { <span class=\"hljs-string\">\"default\"</span>: <span class=\"hljs-number\">1</span> } };\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: <span class=\"hljs-number\">1</span> };\n</code></pre>\n","shortDescription":"<p>Requires quoted keys in objects.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-quoted-keys-in-objects.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-quoted-keys-in-objects.js","filename":"require-quoted-keys-in-objects.js"},{"name":"requireSemicolons","description":"<h1 id=\"requiresemicolons\">requireSemicolons</h1>\n<p>Requires semicolon after:</p>\n<ul>\n<li>var declaration</li>\n<li>expression statement</li>\n<li>return</li>\n<li>throw</li>\n<li>break</li>\n<li>continue</li>\n<li>do-while</li>\n</ul>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSemicolons\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n</code></pre>\n","shortDescription":"<p>Requires semicolon after:</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-semicolons.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-semicolons.js","filename":"require-semicolons.js"},{"name":"requireShorthandArrowFunctions","description":"<h1 id=\"requireshorthandarrowfunctions\">requireShorthandArrowFunctions</h1>\n<p>Require arrow functions to use an expression body when returning a single statement\n(no block statement, implicit return).</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<p>Version: <code>ES6</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireShorthandArrowFunctions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// single expression</span>\nevens.map(v =&gt; v + <span class=\"hljs-number\">1</span>);\n<span class=\"hljs-comment\">// multiple statments require a block</span>\nevens.map(v =&gt; {\n    v = v + <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">return</span> v;\n});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">evens.map(v =&gt; { <span class=\"hljs-keyword\">return</span> v + <span class=\"hljs-number\">1</span>; });\n</code></pre>\n","shortDescription":"<p>Require arrow functions to use an expression body when returning a single statement\n(no block statement, implicit return).</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-shorthand-arrow-functions.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-shorthand-arrow-functions.js","filename":"require-shorthand-arrow-functions.js"},{"name":"requireSpaceAfterBinaryOperators","description":"<h1 id=\"requirespaceafterbinaryoperators\">requireSpaceAfterBinaryOperators</h1>\n<p>Disallows sticking binary operators to the right.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to require space after all possible binary operators</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceAfterBinaryOperators\"</span>: [\n    <span class=\"hljs-string\">\"=\"</span>,\n    <span class=\"hljs-string\">\",\"</span>,\n    <span class=\"hljs-string\">\"+\"</span>,\n    <span class=\"hljs-string\">\"-\"</span>,\n    <span class=\"hljs-string\">\"/\"</span>,\n    <span class=\"hljs-string\">\"*\"</span>,\n    <span class=\"hljs-string\">\"==\"</span>,\n    <span class=\"hljs-string\">\"===\"</span>,\n    <span class=\"hljs-string\">\"!=\"</span>,\n    <span class=\"hljs-string\">\"!==\"</span>\n    <span class=\"hljs-comment\">// etc</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x + y;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x +y;\n</code></pre>\n","shortDescription":"<p>Disallows sticking binary operators to the right.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-binary-operators.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-after-binary-operators.js","filename":"require-space-after-binary-operators.js"},{"name":"requireSpaceAfterComma","description":"<h1 id=\"requirespaceaftercomma\">requireSpaceAfterComma</h1>\n<p>Requires space after comma</p>\n<p>Types: <code>Boolean</code></p>\n<p>Values: <code>true</code> to require a space after any comma</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceAfterComma\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a, b;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a,b;\n</code></pre>\n","shortDescription":"<p>Requires space after comma</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-comma.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-after-comma.js","filename":"require-space-after-comma.js"},{"name":"requireSpaceAfterKeywords","description":"<h1 id=\"requirespaceafterkeywords\">requireSpaceAfterKeywords</h1>\n<p>Requires space after keyword.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted keywords or <code>true</code> to require all of the keywords below to have a space afterward.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceAfterKeywords\"</span>: [\n    <span class=\"hljs-string\">\"do\"</span>,\n    <span class=\"hljs-string\">\"for\"</span>,\n    <span class=\"hljs-string\">\"if\"</span>,\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"switch\"</span>,\n    <span class=\"hljs-string\">\"case\"</span>,\n    <span class=\"hljs-string\">\"try\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>,\n    <span class=\"hljs-string\">\"void\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"with\"</span>,\n    <span class=\"hljs-string\">\"return\"</span>,\n    <span class=\"hljs-string\">\"typeof\"</span>,\n    <span class=\"hljs-string\">\"function\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span>(x) {\n    x++;\n}\n</code></pre>\n","shortDescription":"<p>Requires space after keyword.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-keywords.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-after-keywords.js","filename":"require-space-after-keywords.js"},{"name":"requireSpaceAfterLineComment","description":"<h1 id=\"requirespaceafterlinecomment\">requireSpaceAfterLineComment</h1>\n<p>Requires that a line comment (<code>//</code>) be followed by a space.</p>\n<p>Types: <code>Boolean</code>, <code>Object</code> or <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code></li>\n<li><code>&quot;allowSlash&quot;</code> (<em>deprecated</em> use <code>&quot;allExcept&quot;: [&quot;/&quot;]</code>) allows <code>///</code> format</li>\n<li><code>Object</code>:<ul>\n<li><code>allExcept</code>: array of allowed strings before space <code>//(here)</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceAfterLineComment\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [<span class=\"hljs-string\">\"#\"</span>, <span class=\"hljs-string\">\"=\"</span>] }\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// A comment</span>\n<span class=\"hljs-comment\">/*A comment*/</span>\n<span class=\"hljs-comment\">//# sourceURL=filename.js</span>\n<span class=\"hljs-comment\">//= require something</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">//A comment</span>\n</code></pre>\n","shortDescription":"<p>Requires that a line comment (<code>//</code>) be followed by a space.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-line-comment.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-after-line-comment.js","filename":"require-space-after-line-comment.js"},{"name":"requireSpaceAfterObjectKeys","description":"<h1 id=\"requirespaceafterobjectkeys\">requireSpaceAfterObjectKeys</h1>\n<p>Requires space after object keys.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceAfterObjectKeys\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a : <span class=\"hljs-number\">1</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>};\n</code></pre>\n","shortDescription":"<p>Requires space after object keys.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-object-keys.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-after-object-keys.js","filename":"require-space-after-object-keys.js"},{"name":"requireSpaceAfterPrefixUnaryOperators","description":"<h1 id=\"requirespaceafterprefixunaryoperators\">requireSpaceAfterPrefixUnaryOperators</h1>\n<p>Disallows sticking unary operators to the right.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to require space after prefix for all unary operators</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceAfterPrefixUnaryOperators\"</span>: [<span class=\"hljs-string\">\"++\"</span>, <span class=\"hljs-string\">\"--\"</span>, <span class=\"hljs-string\">\"+\"</span>, <span class=\"hljs-string\">\"-\"</span>, <span class=\"hljs-string\">\"~\"</span>, <span class=\"hljs-string\">\"!\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x = ! y; y = ++ z;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x = !y; y = ++z;\n</code></pre>\n","shortDescription":"<p>Disallows sticking unary operators to the right.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-prefix-unary-operators.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-after-prefix-unary-operators.js","filename":"require-space-after-prefix-unary-operators.js"},{"name":"requireSpaceBeforeBinaryOperators","description":"<h1 id=\"requirespacebeforebinaryoperators\">requireSpaceBeforeBinaryOperators</h1>\n<p>Disallows sticking binary operators to the left.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to require space before all possible binary operators\nwithout comma operator, since it&#39;s rarely used with this rule</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBeforeBinaryOperators\"</span>: [\n    <span class=\"hljs-string\">\"=\"</span>,\n    <span class=\"hljs-string\">\",\"</span>,\n    <span class=\"hljs-string\">\"+\"</span>,\n    <span class=\"hljs-string\">\"-\"</span>,\n    <span class=\"hljs-string\">\"/\"</span>,\n    <span class=\"hljs-string\">\"*\"</span>,\n    <span class=\"hljs-string\">\"==\"</span>,\n    <span class=\"hljs-string\">\"===\"</span>,\n    <span class=\"hljs-string\">\"!=\"</span>,\n    <span class=\"hljs-string\">\"!==\"</span>\n    <span class=\"hljs-comment\">// etc</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x !== y;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x!== y;\n</code></pre>\n","shortDescription":"<p>Disallows sticking binary operators to the left.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-before-binary-operators.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-before-binary-operators.js","filename":"require-space-before-binary-operators.js"},{"name":"requireSpaceBeforeBlockStatements","description":"<h1 id=\"requirespacebeforeblockstatements\">requireSpaceBeforeBlockStatements</h1>\n<p>Requires space(s) before block statements (for loops, control structures).</p>\n<p>Type: <code>Boolean</code> or <code>Integer</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> require <em>at least</em> a single space</li>\n<li><code>Integer</code> require <em>at least</em> specified number of spaces</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBeforeBlockStatements\"</span>: <span class=\"hljs-number\">1</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (cond) {\n    foo();\n} <span class=\"hljs-keyword\">else</span> {\n    bar();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements) {\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond) {\n    foo();\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (cond){\n    foo();\n} <span class=\"hljs-keyword\">else</span>{\n    bar();\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e <span class=\"hljs-keyword\">in</span> elements){\n    bar(e);\n}\n\n<span class=\"hljs-keyword\">while</span> (cond){\n    foo();\n}\n</code></pre>\n","shortDescription":"<p>Requires space(s) before block statements (for loops, control structures).</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-before-block-statements.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-before-block-statements.js","filename":"require-space-before-block-statements.js"},{"name":"requireSpaceBeforeComma","description":"<h1 id=\"requirespacebeforecomma\">requireSpaceBeforeComma</h1>\n<p>Requires space before comma</p>\n<p>Types: <code>Boolean</code></p>\n<p>Values: <code>true</code> to require a space before any comma</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBeforeComma\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a ,b;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a,b;\n</code></pre>\n","shortDescription":"<p>Requires space before comma</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-before-comma.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-before-comma.js","filename":"require-space-before-comma.js"},{"name":"requireSpaceBeforeKeywords","description":"<h1 id=\"requirespacebeforekeywords\">requireSpaceBeforeKeywords</h1>\n<p>Requires space before keyword.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted keywords or <code>true</code> to require all possible keywords to have a preceding space.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBeforeKeywords\"</span>: [\n    <span class=\"hljs-string\">\"else\"</span>,\n    <span class=\"hljs-string\">\"while\"</span>,\n    <span class=\"hljs-string\">\"catch\"</span>\n]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">} <span class=\"hljs-keyword\">else</span> {\n    x++;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">}<span class=\"hljs-keyword\">else</span> {\n    x++;\n}\n</code></pre>\n","shortDescription":"<p>Requires space before keyword.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-before-keywords.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-before-keywords.js","filename":"require-space-before-keywords.js"},{"name":"requireSpaceBeforeObjectValues","description":"<h1 id=\"requirespacebeforeobjectvalues\">requireSpaceBeforeObjectValues</h1>\n<p>Requires space after object keys.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBeforeObjectValues\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a:<span class=\"hljs-number\">1</span>};\n</code></pre>\n","shortDescription":"<p>Requires space after object keys.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-before-object-values.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-before-object-values.js","filename":"require-space-before-object-values.js"},{"name":"requireSpaceBeforePostfixUnaryOperators","description":"<h1 id=\"requirespacebeforepostfixunaryoperators\">requireSpaceBeforePostfixUnaryOperators</h1>\n<p>Disallows sticking unary operators to the left.</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of quoted operators or <code>true</code> to require space before postfix for all unary operators\n(i.e. increment/decrement operators).</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBeforePostfixUnaryOperators\"</span>: [<span class=\"hljs-string\">\"++\"</span>, <span class=\"hljs-string\">\"--\"</span>]\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">x = y ++; y = z --;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">x = y++; y = z--;\n</code></pre>\n","shortDescription":"<p>Disallows sticking unary operators to the left.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-before-postfix-unary-operators.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-before-postfix-unary-operators.js","filename":"require-space-before-postfix-unary-operators.js"},{"name":"requireSpaceBetweenArguments","description":"<h1 id=\"requirespacebetweenarguments\">requireSpaceBetweenArguments</h1>\n<p>Ensure there are spaces after argument separators in call expressions.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpaceBetweenArguments\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\">a(b, c);\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\">a(b,c);\n</code></pre>\n","shortDescription":"<p>Ensure there are spaces after argument separators in call expressions.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-between-arguments.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-space-between-arguments.js","filename":"require-space-between-arguments.js"},{"name":"requireSpacesInAnonymousFunctionExpression","description":"<h1 id=\"requirespacesinanonymousfunctionexpression\">requireSpacesInAnonymousFunctionExpression</h1>\n<p>Requires space before <code>()</code> or <code>{}</code> in anonymous function expressions.</p>\n<p>Type: <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>Object</code> with the following properties. One of <code>&quot;beforeOpeningRoundBrace&quot;</code>\nand <code>&quot;beforeOpeningCurlyBrace&quot;</code> must be provided:<ul>\n<li><code>&quot;beforeOpeningRoundBrace&quot;</code> validates that there is a space before\nthe opening round brace <code>()</code>. If provided, it must be set to <code>true</code>.</li>\n<li><code>&quot;beforeOpeningCurlyBrace&quot;</code> validates that there is a space before\nthe opening curly brace <code>{}</code>. If provided, it must be set to <code>true</code>.</li>\n<li><code>&quot;allExcept&quot;</code> may be an Array containing <code>&quot;shorthand&quot;</code>, or\nthe Boolean <code>true</code> to enable all configuration exceptions. If\n<code>&quot;shorthand&quot;</code> is provided, spaces will not be required for\nES6 method definitions.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInAnonymousFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> Foo = {\n    foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}\n}\narray.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> Foo = {\n    foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{}\n}\narray.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{});\n</code></pre>\n","shortDescription":"<p>Requires space before <code>()</code> or <code>{}</code> in anonymous function expressions.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-anonymous-function-expression.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-in-anonymous-function-expression.js","filename":"require-spaces-in-anonymous-function-expression.js"},{"name":"requireSpacesInCallExpression","description":"<h1 id=\"requirespacesincallexpression\">requireSpacesInCallExpression</h1>\n<p>Requires space before <code>()</code> in call expressions.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInCallExpression\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = foobar ();\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = foobar();\n</code></pre>\n","shortDescription":"<p>Requires space before <code>()</code> in call expressions.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-call-expression.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-in-call-expression.js","filename":"require-spaces-in-call-expression.js"},{"name":"requireSpacesInConditionalExpression","description":"<h1 id=\"requirespacesinconditionalexpression\">requireSpacesInConditionalExpression</h1>\n<p>Requires space before and/or after <code>?</code> or <code>:</code> in conditional expressions.</p>\n<p>Types: <code>Object</code> or <code>Boolean</code></p>\n<p>Values: <code>&quot;afterTest&quot;</code>, <code>&quot;beforeConsequent&quot;</code>, <code>&quot;afterConsequent&quot;</code>, <code>&quot;beforeAlternate&quot;</code> as child properties,\nor <code>true</code> to set all properties to <code>true</code>. Child properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInConditionalExpression\"</span>: {\n    <span class=\"hljs-string\">\"afterTest\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeConsequent\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"afterConsequent\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeAlternate\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b ? c : d;\n<span class=\"hljs-keyword\">var</span> a= b ? c : d;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b? c : d;\n<span class=\"hljs-keyword\">var</span> a = b ?c : d;\n<span class=\"hljs-keyword\">var</span> a = b ? c: d;\n<span class=\"hljs-keyword\">var</span> a = b ? c :d;\n</code></pre>\n","shortDescription":"<p>Requires space before and/or after <code>?</code> or <code>:</code> in conditional expressions.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-conditional-expression.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-in-conditional-expression.js","filename":"require-spaces-in-conditional-expression.js"},{"name":"requireSpacesInForStatement","description":"<h1 id=\"requirespacesinforstatement\">requireSpacesInForStatement</h1>\n<p>Requires spaces inbetween for statement.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code> to requires spaces inbetween for statement.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInForStatement\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i&lt;l; i++) {\n    x++;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;i&lt;l;i++) {\n    x++;\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i&lt;l;i++) {\n    x++;\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;i&lt;l; i++) {\n    x++;\n}\n</code></pre>\n","shortDescription":"<p>Requires spaces inbetween for statement.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-for-statement.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-in-for-statement.js","filename":"require-spaces-in-for-statement.js"},{"name":"requireSpacesInFunctionDeclaration","description":"<h1 id=\"requirespacesinfunctiondeclaration\">requireSpacesInFunctionDeclaration</h1>\n<p>Requires space before <code>()</code> or <code>{}</code> in function declarations.</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInFunctionDeclaration\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{}\n</code></pre>\n","shortDescription":"<p>Requires space before <code>()</code> or <code>{}</code> in function declarations.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-function-declaration.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-in-function-declaration.js","filename":"require-spaces-in-function-declaration.js"},{"name":"requireSpacesInFunctionExpression","description":"<h1 id=\"requirespacesinfunctionexpression\">requireSpacesInFunctionExpression</h1>\n<p>Requires space before <code>()</code> or <code>{}</code> in function expressions (both <a href=\"#requirespacesinnamedfunctionexpression\">named</a>\nand <a href=\"#requirespacesinanonymousfunctionexpression\">anonymous</a>).</p>\n<p>Type: <code>Object</code></p>\n<p>Values: <code>&quot;beforeOpeningRoundBrace&quot;</code> and <code>&quot;beforeOpeningCurlyBrace&quot;</code> as child properties.\nChild properties must be set to <code>true</code>.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">async</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">async</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">async</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{};\n</code></pre>\n","shortDescription":"<p>Requires space before <code>()</code> or <code>{}</code> in function expressions (both <a href=\"#requirespacesinnamedfunctionexpression\">named</a>\nand <a href=\"#requirespacesinanonymousfunctionexpression\">anonymous</a>).</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-function-expression.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-in-function-expression.js","filename":"require-spaces-in-function-expression.js"},{"name":"requireSpacesInFunction","description":"<h1 id=\"requirespacesinfunction\">requireSpacesInFunction</h1>\n<p>Requires space before <code>()</code> or <code>{}</code> in function expressions (both <a href=\"#requirespacesinnamedfunctionexpression\">named</a>\nand <a href=\"#requirespacesinanonymousfunctionexpression\">anonymous</a>) and function declarations.</p>\n<p>Types: <code>Object</code></p>\n<ul>\n<li><code>Object</code> (at least one of properties must be present and it must be set to true):<ul>\n<li><code>&#39;beforeOpeningRoundBrace&#39;</code><ul>\n<li><code>true</code> validates that there is a space before <code>()</code></li>\n</ul>\n</li>\n<li><code>&#39;beforeOpeningCurlyBrace&#39;</code><ul>\n<li><code>true</code> validates that there is a space before <code>{}</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInFunction\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInFunction\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInFunction\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid-for-mode-beforeopeningroundbrace-true-beforeopeningcurlybrace-true\">Valid for mode <code>{ &quot;beforeOpeningRoundBrace&quot;: true, &quot;beforeOpeningCurlyBrace&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"valid-for-mode-beforeopeningroundbrace-true\">Valid for mode <code>{ &quot;beforeOpeningRoundBrace&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{}\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{}\n</code></pre>\n<h5 id=\"valid-for-mode-beforeopeningcurlybrace-true\">Valid for mode <code>{ &quot;beforeOpeningCurlyBrace&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n<h5 id=\"invalid-for-mode-beforeopeningroundbrace-true-beforeopeningcurlybrace-true\">Invalid for mode <code>{ &quot;beforeOpeningRoundBrace&quot;: true, &quot;beforeOpeningCurlyBrace&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{}\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{}\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{}\n</code></pre>\n","shortDescription":"<p>Requires space before <code>()</code> or <code>{}</code> in function expressions (both <a href=\"#requirespacesinnamedfunctionexpression\">named</a>\nand <a href=\"#requirespacesinanonymousfunctionexpression\">anonymous</a>) and function declarations.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-function.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-in-function.js","filename":"require-spaces-in-function.js"},{"name":"requireSpacesInNamedFunctionExpression","description":"<h1 id=\"requirespacesinnamedfunctionexpression\">requireSpacesInNamedFunctionExpression</h1>\n<p>Requires space before <code>()</code> or <code>{}</code> in named function expressions.</p>\n<p>Types: <code>Object</code></p>\n<ul>\n<li><code>Object</code> (at least one of properties must be present and it must be set to true):<ul>\n<li><code>&#39;beforeOpeningRoundBrace&#39;</code><ul>\n<li><code>true</code> validates that there is a space before <code>()</code></li>\n</ul>\n</li>\n<li><code>&#39;beforeOpeningCurlyBrace&#39;</code><ul>\n<li><code>true</code> validates that there is a space before <code>{}</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInNamedFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInNamedFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningRoundBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInNamedFunctionExpression\"</span>: {\n    <span class=\"hljs-string\">\"beforeOpeningCurlyBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid-for-mode-beforeopeningroundbrace-true-beforeopeningcurlybrace-true\">Valid for mode <code>{ &quot;beforeOpeningRoundBrace&quot;: true, &quot;beforeOpeningCurlyBrace&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<h5 id=\"valid-for-mode-beforeopeningroundbrace-true\">Valid for mode <code>{ &quot;beforeOpeningRoundBrace&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{};\n</code></pre>\n<h5 id=\"valid-for-mode-beforeopeningcurlybrace-true\">Valid for mode <code>{ &quot;beforeOpeningCurlyBrace&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n<h5 id=\"invalid-for-mode-beforeopeningroundbrace-true-beforeopeningcurlybrace-true\">Invalid for mode <code>{ &quot;beforeOpeningRoundBrace&quot;: true, &quot;beforeOpeningCurlyBrace&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{};\n</code></pre>\n","shortDescription":"<p>Requires space before <code>()</code> or <code>{}</code> in named function expressions.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-named-function-expression.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-in-named-function-expression.js","filename":"require-spaces-in-named-function-expression.js"},{"name":"requireSpacesInsideArrayBrackets","description":"<h1 id=\"requirespacesinsidearraybrackets\">requireSpacesInsideArrayBrackets</h1>\n<p>Requires space after opening array square bracket and before closing.\nReports only on arrays, not on property accessors.\nUse <a href=\"http://jscs.info/rule/requireSpacesInsideBrackets.html\">requireSpacesInsideBrackets</a>\nto report on all brackets.</p>\n<p>Types: <code>String</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>String</code><ul>\n<li><code>&quot;all&quot;</code>: strict mode</li>\n<li><code>&quot;allButNested&quot;</code>: (<em>deprecated</em> use Object version with <code>&quot;allExcept&quot;: [ &quot;[&quot;, &quot;]&quot; ]</code>) ignores nested\nclosing brackets in a row</li>\n</ul>\n</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code>: Array specifying list of tokens that can occur after an opening square bracket or before a\nclosing square bracket without a space</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideArrayBrackets\"</span>: <span class=\"hljs-string\">\"all\"</span>\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideArrayBrackets\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"[\"</span>, <span class=\"hljs-string\">\"]\"</span>, <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span> ]\n}\n</code></pre>\n<h5 id=\"valid-for-mode-all\">Valid for mode <code>&quot;all&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ <span class=\"hljs-number\">1</span> ];\n<span class=\"hljs-keyword\">var</span> x = a[<span class=\"hljs-number\">1</span>];\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept-or-allbutnested\">Valid for mode <code>{ &quot;allExcept&quot;: [ &quot;[&quot;, &quot;]&quot; ] }</code> or <code>&quot;allButNested&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [[ <span class=\"hljs-number\">1</span> ], [ <span class=\"hljs-number\">2</span> ]];\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept\">Valid for mode <code>{ &quot;allExcept&quot;: [ &quot;[&quot;, &quot;]&quot;, &quot;{&quot;, &quot;}&quot; ] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [[ <span class=\"hljs-number\">1</span> ], [ <span class=\"hljs-number\">2</span> ]];\n<span class=\"hljs-keyword\">var</span> x = [{ a: <span class=\"hljs-number\">1</span> }, { b: <span class=\"hljs-number\">2</span>}];\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>];\n</code></pre>\n","shortDescription":"<p>Requires space after opening array square bracket and before closing.\nReports only on arrays, not on property accessors.\nUse <a href=\"http://jscs.info/rule/requireSpacesInsideBrackets.html\">requireSpacesInsideBrackets</a>\nto report on all brackets.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-inside-array-brackets.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-inside-array-brackets.js","filename":"require-spaces-inside-array-brackets.js"},{"name":"requireSpacesInsideBrackets","description":"<h1 id=\"requirespacesinsidebrackets\">requireSpacesInsideBrackets</h1>\n<p>Requires space after opening square bracket and before closing.\nReports on all on brackets, even on property accessors.\nUse <a href=\"http://jscs.info/rule/requireSpacesInsideArrayBrackets.html\">requireSpacesInsideArrayBrackets</a>\nto exclude property accessors.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>Boolean</code><ul>\n<li><code>true</code>: strict mode</li>\n</ul>\n</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code>: Array specifying list of tokens that can occur after an opening square bracket or before a\nclosing square bracket without a space</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideBrackets\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideBrackets\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"[\"</span>, <span class=\"hljs-string\">\"]\"</span>, <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span> ]\n}\n</code></pre>\n<h5 id=\"valid-for-mode-true\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [ <span class=\"hljs-number\">1</span> ];\n<span class=\"hljs-keyword\">var</span> x = a[ <span class=\"hljs-number\">1</span> ];\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept\">Valid for mode <code>{ allExcept&quot;: [ &quot;[&quot;, &quot;]&quot;, &quot;{&quot;, &quot;}&quot; ] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [[ <span class=\"hljs-number\">1</span> ], [ <span class=\"hljs-number\">2</span> ]];\n<span class=\"hljs-keyword\">var</span> x = [{ a: <span class=\"hljs-number\">1</span> }, { b: <span class=\"hljs-number\">2</span>}];\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>];\n</code></pre>\n","shortDescription":"<p>Requires space after opening square bracket and before closing.\nReports on all on brackets, even on property accessors.\nUse <a href=\"http://jscs.info/rule/requireSpacesInsideArrayBrackets.html\">requireSpacesInsideArrayBrackets</a>\nto exclude property accessors.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-inside-brackets.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-inside-brackets.js","filename":"require-spaces-inside-brackets.js"},{"name":"requireSpacesInsideObjectBrackets","description":"<h1 id=\"requirespacesinsideobjectbrackets\">requireSpacesInsideObjectBrackets</h1>\n<p>Requires space after opening object curly brace and before closing.</p>\n<p>Types: <code>String</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>String</code><ul>\n<li><code>&quot;all&quot;</code>: strict mode</li>\n<li><code>&quot;allButNested&quot;</code>: (<em>deprecated</em> use Object version with <code>&quot;allExcept&quot;: [&#39;}&#39;]</code>) ignores nested\nclosing object braces in a row</li>\n</ul>\n</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code>: Array specifying list of tokens that can occur after an opening object brace or before a\nclosing object brace without a space</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideObjectBrackets\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"}\"</span>, <span class=\"hljs-string\">\")\"</span> ]\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideObjectBrackets\"</span>: <span class=\"hljs-string\">\"all\"</span>\n</code></pre>\n<h5 id=\"valid-for-mode-all\">Valid for mode <code>&quot;all&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: { b: <span class=\"hljs-number\">1</span> } };\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept-or-allbutnested\">Valid for mode <code>{ &quot;allExcept&quot;: [ &quot;}&quot; ] }</code> or <code>&quot;allButNested&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: { b: <span class=\"hljs-number\">1</span> }};\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept\">Valid for mode <code>&quot;allExcept&quot;: [ &quot;}&quot;, &quot;)&quot; ]</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = { a: (b ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>)};\n<span class=\"hljs-keyword\">var</span> x = { a: { b: <span class=\"hljs-number\">1</span> }};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {a: <span class=\"hljs-number\">1</span>};\n</code></pre>\n","shortDescription":"<p>Requires space after opening object curly brace and before closing.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-inside-object-brackets.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-inside-object-brackets.js","filename":"require-spaces-inside-object-brackets.js"},{"name":"requireSpacesInsideParentheses","description":"<h1 id=\"requirespacesinsideparentheses\">requireSpacesInsideParentheses</h1>\n<p>Requires space after opening round bracket and before closing.</p>\n<p>Types: <code>String</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>String</code><ul>\n<li><code>&quot;all&quot;</code>: strict mode</li>\n<li><code>&quot;allButNested&quot;</code>: (<em>deprecated</em> use Object version with <code>&quot;except&quot;: [&quot;(&quot;, &quot;)&quot;]</code>) ignores nested brackets\nin a row</li>\n</ul>\n</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;all&quot;</code>: true</li>\n<li><code>&quot;ignoreParenthesizedExpression&quot;</code>: true</li>\n<li><code>&quot;except&quot;</code>: Array specifying list of tokens that can occur after an opening bracket or before a\nclosing bracket without a space</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideParentheses\"</span>: <span class=\"hljs-string\">\"all\"</span>\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideParentheses\"</span>: {\n    <span class=\"hljs-string\">\"all\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-string\">\"except\"</span>: [ <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span>, <span class=\"hljs-string\">\"\\\"\"</span> ]\n}\n</code></pre>\n<h5 id=\"valid-for-mode-all\">Valid for mode <code>&quot;all&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-built_in\">Math</span>.pow( ( <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span> ), ( <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">4</span> ) );\n</code></pre>\n<h5 id=\"valid-for-mode-all-true-except-or-allbutnested\">Valid for mode <code>{ &quot;all&quot;: true, &quot;except&quot;: [ &quot;(&quot;, &quot;)&quot; ] }</code> or <code>&quot;allButNested&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-built_in\">Math</span>.pow(( <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span> ), ( <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">4</span> ));\n</code></pre>\n<h5 id=\"valid-for-mode-all-true-ignoreparenthesizedexpression-true\">Valid for mode <code>{ &quot;all&quot;: true, &quot;ignoreParenthesizedExpression&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> ( !(<span class=\"hljs-string\">\"foo\"</span> <span class=\"hljs-keyword\">in</span> obj) ) {}\n</code></pre>\n<h5 id=\"valid-for-mode-all-true-except\">Valid for mode <code>{ &quot;all&quot;: true, &quot;except&quot;: [ &quot;{&quot;, &quot;}&quot; ] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-built_in\">Math</span>.pow( foo({ test: <span class=\"hljs-number\">1</span> }) );\n</code></pre>\n<h5 id=\"valid-for-mode-all-true-except\">Valid for mode <code>{ &quot;all&quot;: true, &quot;except&quot;: [ &quot;\\&quot;&quot; ] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = foo(<span class=\"hljs-string\">\"string\"</span>);\n<span class=\"hljs-keyword\">var</span> x = foo( <span class=\"hljs-number\">1</span> );\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">4</span>);\n</code></pre>\n","shortDescription":"<p>Requires space after opening round bracket and before closing.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-inside-parentheses.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-inside-parentheses.js","filename":"require-spaces-inside-parentheses.js"},{"name":"requireSpacesInsideParenthesizedExpression","description":"<h1 id=\"requirespacesinsideparenthesizedexpression\">requireSpacesInsideParenthesizedExpression</h1>\n<p>Requires space after opening and before closing grouping parentheses.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code>: always require spaces inside grouping parentheses</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code>: <code>[ &quot;{&quot;, &quot;}&quot;, &quot;function&quot; ]</code> Ignore parenthesized objects and functions</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpacesInsideParenthesizedExpression\"</span>: <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\">// or</span>\n\n<span class=\"hljs-string\">\"requireSpacesInsideParenthesizedExpression\"</span>: {\n    <span class=\"hljs-string\">\"allExcept\"</span>: [ <span class=\"hljs-string\">\"{\"</span>, <span class=\"hljs-string\">\"}\"</span> ]\n}\n</code></pre>\n<h5 id=\"valid-for-mode-true\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = ( <span class=\"hljs-number\">1</span> + obj.size ) * ( <span class=\"hljs-number\">2</span> );\n</code></pre>\n<h5 id=\"valid-for-mode-allexcept-function\">Valid for mode <code>{ allExcept&quot;: [ &quot;{&quot;, &quot;}&quot;, &quot;function&quot; ] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = ( options || { x: <span class=\"hljs-literal\">true</span> }).x;\n<span class=\"hljs-keyword\">var</span> global = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>; })();\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = (<span class=\"hljs-number\">1</span> + obj.size) * (<span class=\"hljs-number\">2</span>);\n</code></pre>\n","shortDescription":"<p>Requires space after opening and before closing grouping parentheses.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-inside-parenthesized-expression.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spaces-inside-parenthesized-expression.js","filename":"require-spaces-inside-parenthesized-expression.js"},{"name":"requireSpread","description":"<h1 id=\"requirespread\">requireSpread</h1>\n<p>Disallows using <code>.apply</code> in favor of the spread operator</p>\n<p>Types: <code>Boolean</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> specifies that apply <code>.apply</code> is disallowed</li>\n</ul>\n<p>Version: <code>ES6</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireSpread\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-mode-true\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> wrap = (f, g) =&gt; (...args) =&gt; g(f, ...args)\ninstance.method(...args)\n</code></pre>\n<h5 id=\"invalid-for-mode-true\">Invalid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> wrap = (f, g) =&gt; (...args) =&gt; g.apply(g, [f].concat(args))\ninstance.method.apply(instance, args);\n</code></pre>\n","shortDescription":"<p>Disallows using <code>.apply</code> in favor of the spread operator</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spread.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-spread.js","filename":"require-spread.js"},{"name":"requireTemplateStrings","description":"<h1 id=\"requiretemplatestrings\">requireTemplateStrings</h1>\n<p>Requires the use of template strings instead of string concatenation.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li>true</li>\n<li><code>Object</code>:<ul>\n<li><code>&quot;allExcept&quot;</code>: array of quoted exceptions:<ul>\n<li><code>&quot;stringConcatenation&quot;</code> ignores strings concatenated with other strings</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Version: <code>ES6</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireTemplateStrings\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-string\">\"requireTemplateStrings\"</span>: { <span class=\"hljs-string\">\"allExcept\"</span>: [<span class=\"hljs-string\">\"stringConcatenation\"</span>] }\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\">name</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`How are you, <span class=\"hljs-subst\">${name}</span>?`</span>;\n}\n<span class=\"hljs-string\">`a <span class=\"hljs-subst\">${b + c}</span>`</span>\n<span class=\"hljs-string\">`a <span class=\"hljs-subst\">${a()}</span>`</span>\n</code></pre>\n<h5 id=\"valid-for-allexcept-stringconcatenation\">Valid for <code>{ &quot;allExcept&quot;: [&quot;stringConcatenation&quot;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayBye</span>(<span class=\"hljs-params\">name</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`It was good seeing you, <span class=\"hljs-subst\">${name}</span>! Let's hang out again sometime and`</span> +\n        <span class=\"hljs-string\">' grab some chicken and waffles.'</span>;\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\">name</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'How are you, '</span> + name + <span class=\"hljs-string\">'?'</span>;\n}\n<span class=\"hljs-string\">\"a\"</span> + (b + c)\n<span class=\"hljs-string\">\"a\"</span> + a()\n</code></pre>\n","shortDescription":"<p>Requires the use of template strings instead of string concatenation.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-template-strings.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-template-strings.js","filename":"require-template-strings.js"},{"name":"requireTrailingComma","description":"<h1 id=\"requiretrailingcomma\">requireTrailingComma</h1>\n<p>Requires an extra comma following the final element of an array or object literal.</p>\n<p>Types: <code>Boolean</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code>: validates all arrays and objects</li>\n<li><code>Object</code>:<ul>\n<li><code>ignoreSingleValue</code>: allows single property objects and single element arrays to not require a trailing comma</li>\n<li><code>ignoreSingleLine</code>: allows objects and arrays on a single line to not require a trailing comma</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireTrailingComma\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>,];\n<span class=\"hljs-keyword\">var</span> bar = {a: <span class=\"hljs-string\">\"a\"</span>, b: <span class=\"hljs-string\">\"b\"</span>,}\n</code></pre>\n<h5 id=\"valid-with-ignoresinglevalue\">Valid with ignoreSingleValue</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> car = [<span class=\"hljs-number\">1</span>];\n<span class=\"hljs-keyword\">var</span> dar = {a: <span class=\"hljs-string\">\"a\"</span>};\n</code></pre>\n<h5 id=\"valid-with-ignoresingleline\">Valid with ignoreSingleLine</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> car = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> dar = {a: <span class=\"hljs-string\">\"a\"</span>, b: <span class=\"hljs-string\">\"b\"</span>};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> foo = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> bar = {a: <span class=\"hljs-string\">\"a\"</span>, b: <span class=\"hljs-string\">\"b\"</span>}\n</code></pre>\n","shortDescription":"<p>Requires an extra comma following the final element of an array or object literal.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-trailing-comma.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-trailing-comma.js","filename":"require-trailing-comma.js"},{"name":"requireVarDeclFirst","description":"<h1 id=\"requirevardeclfirst\">requireVarDeclFirst</h1>\n<p>Requires <code>var</code> declaration to be on the top of an enclosing scope</p>\n<p>Types: <code>Boolean</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> specifies that <code>var</code> declarations must occur the top of a function scope.</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireVarDeclFirst\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h5 id=\"valid-for-mode-true\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>,\n    y = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">'use strict;'</span>\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>,\n    y = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-comment\">// comments</span>\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-comment\">// comments</span>\n<span class=\"hljs-comment\">// comments 2</span>\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-keyword\">var</span> z;};\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-keyword\">var</span> z;};\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> w = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\"></span>) </span>{\n <span class=\"hljs-keyword\">var</span> y;\n<span class=\"hljs-comment\">// comments</span>\n<span class=\"hljs-comment\">// comments 2</span>\n <span class=\"hljs-keyword\">var</span> z;\n};\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> w = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-pi\"> \"use strict\"</span>;\n <span class=\"hljs-keyword\">var</span> y;\n};\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y;\n<span class=\"hljs-keyword\">for</span> (y = <span class=\"hljs-number\">0</span>; y &lt; <span class=\"hljs-number\">10</span>; y++) {};\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x;\nx = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> w = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-keyword\">var</span> y;};\n<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">2</span>;\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> w = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\"></span>) </span>{\n <span class=\"hljs-keyword\">var</span> y;\n y = <span class=\"hljs-number\">2</span>;\n <span class=\"hljs-keyword\">var</span> z;\n};\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a;\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> count=<span class=\"hljs-number\">0</span>;count &lt; <span class=\"hljs-number\">10</span>;count++){}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x;\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> count=<span class=\"hljs-number\">0</span>;count &lt; <span class=\"hljs-number\">10</span>;count++){\n <span class=\"hljs-keyword\">var</span> y;\n}\n</code></pre>\n","shortDescription":"<p>Requires <code>var</code> declaration to be on the top of an enclosing scope</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-var-decl-first.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-var-decl-first.js","filename":"require-var-decl-first.js"},{"name":"requireYodaConditions","description":"<h1 id=\"requireyodaconditions\">requireYodaConditions</h1>\n<p>Requires the variable to be the right hand operator when doing a boolean comparison</p>\n<p>Types: <code>Array</code> or <code>Boolean</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> specifies that yoda conditions are required for most possible comparison operators</li>\n<li><code>Array</code>: represents the list of quoted operators that requires yoda conditions</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireYodaConditions\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"requireYodaConditions\"</span>: [\n    <span class=\"hljs-string\">\"==\"</span>,\n    <span class=\"hljs-string\">\"===\"</span>,\n    <span class=\"hljs-string\">\"!=\"</span>,\n    <span class=\"hljs-string\">\"!==\"</span>\n]\n</code></pre>\n<h5 id=\"valid-for-mode-true-or\">Valid for mode <code>true</code> or <code>[&#39;==&#39;]</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">1</span> == a) {\n    <span class=\"hljs-keyword\">return</span>\n}\n</code></pre>\n<h5 id=\"invalid-for-mode-true-or\">Invalid for mode <code>true</code> or <code>[&#39;==&#39;]</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span>\n}\n</code></pre>\n","shortDescription":"<p>Requires the variable to be the right hand operator when doing a boolean comparison</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-yoda-conditions.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-yoda-conditions.js","filename":"require-yoda-conditions.js"},{"name":"safeContextKeyword","description":"<h1 id=\"safecontextkeyword\">safeContextKeyword</h1>\n<p>Option to check <code>var that = this</code> expressions</p>\n<p>Types: <code>String</code>, <code>Array</code></p>\n<p>Values:</p>\n<ul>\n<li><code>String</code>: represents the keyword that can assigned to <code>this</code> context</li>\n<li><code>Array</code>: represents the list of keywords that can assigned to <code>this</code> context</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"safeContextKeyword\"</span>: [<span class=\"hljs-string\">\"that\"</span>]\n</code></pre>\n<h5 id=\"valid-for-mode-that\">Valid for mode <code>[&quot;that&quot;]</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> that = <span class=\"hljs-keyword\">this</span>;\n</code></pre>\n<h5 id=\"invalid-for-mode-that\">Invalid for mode <code>[&quot;that&quot;]</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> _this = <span class=\"hljs-keyword\">this</span>;\n</code></pre>\n","shortDescription":"<p>Option to check <code>var that = this</code> expressions</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/safe-context-keyword.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/safe-context-keyword.js","filename":"safe-context-keyword.js"},{"name":"validateAlignedFunctionParameters","description":"<h1 id=\"validatealignedfunctionparameters\">validateAlignedFunctionParameters</h1>\n<p>Validates proper alignment of function parameters.</p>\n<p>Types: <code>Boolean</code>, <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code>: setting this is the same as validating the rule using\n<code>{lineBreakAfterOpeningBrace: true, lineBreakBeforeClosingBrace: true}</code></li>\n<li><code>Object</code>:<ul>\n<li><code>lineBreakAfterOpeningBrace</code><ul>\n<li><code>true</code> specifies that the first function parameter must not be on the same line as the opening brace <code>(</code>\nof the function parameters list</li>\n</ul>\n</li>\n<li><code>lineBreakBeforeClosingBrace</code><ul>\n<li><code>true</code> specifies that the last function parameter must not be on the same line as the closing brace <code>)</code>\nof the function parameters list</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateAlignedFunctionParameters\"</span>: {\n  <span class=\"hljs-string\">\"lineBreakAfterOpeningBrace\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-string\">\"lineBreakBeforeClosingBrace\"</span>: <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<h5 id=\"valid-for-mode-linebreakafteropeningbrace-true-linebreakbeforeclosingbrace-true\">Valid for mode <code>{ &quot;lineBreakAfterOpeningBrace&quot;: true, &quot;lineBreakBeforeClosingBrace&quot;: true}</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">\n  thisIs,\n  theLongestList,\n  ofParametersEverWritten\n</span>) </span>{}\n</code></pre>\n<h5 id=\"invalid-for-mode-linebreakafteropeningbrace-true-linebreakbeforeclosingbrace-true\">Invalid for mode <code>{ &quot;lineBreakAfterOpeningBrace&quot;: true, &quot;lineBreakBeforeClosingBrace&quot;: true}</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">thisIs,\n          theLongestList,\n          ofParametersEverWritten</span>) </span>{}\n</code></pre>\n","shortDescription":"<p>Validates proper alignment of function parameters.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-aligned-function-parameters.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/validate-aligned-function-parameters.js","filename":"validate-aligned-function-parameters.js"},{"name":"validateCommentPosition","description":"<h1 id=\"validatecommentposition\">validateCommentPosition</h1>\n<p>This rule is for validating the positioning of line comments. Block comments are ignored.</p>\n<p>Comments that start with the following keywords are also ignored:\n<code>eslint</code>, <code>jshint</code>, <code>jslint</code>, <code>istanbul</code>, <code>global</code>, <code>exported</code>, <code>jscs</code>, <code>falls through</code>\neg. // jshint strict: true</p>\n<p>Type: <code>Object</code></p>\n<p>Value:</p>\n<ul>\n<li><code>Object</code>:<ul>\n<li><code>position</code>: <code>above</code> or <code>beside</code></li>\n<li><code>allExcept</code>: array of quoted exceptions (comments that start with these values will be excepted)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateCommentPosition\"</span>: { position: <span class=\"hljs-string\">`above`</span>, allExcept: [<span class=\"hljs-string\">`pragma`</span>] }\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// This is a valid comment</span>\n<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>;\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// This is an invalid comment</span>\n<span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// pragma (this comment is fine)</span>\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateCommentPosition\"</span>: { position: <span class=\"hljs-string\">`beside`</span> }\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// This is a valid comment</span>\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// This is an invalid comment</span>\n<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>;\n</code></pre>\n","shortDescription":"<p>This rule is for validating the positioning of line comments. Block comments are ignored.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-comment-position.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/validate-comment-position.js","filename":"validate-comment-position.js"},{"name":"validateIndentation","description":"<h1 id=\"validateindentation\">validateIndentation</h1>\n<p>Validates indentation for switch statements and block statements</p>\n<p>Types: <code>Integer</code>, <code>String</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>Integer</code>: A positive number of spaces</li>\n<li><code>String</code>: <code>&quot;\\t&quot;</code> for tab indentation</li>\n<li><code>Object</code>:<ul>\n<li><code>value</code>: (required) the same effect as the non-object values</li>\n<li><code>includeEmptyLines</code> (<em>deprecated</em>): (default: <code>false</code>) require empty lines to be indented</li>\n<li><code>&#39;allExcept&#39;</code> array of exceptions:<ul>\n<li><code>&#39;comments&#39;</code> ignores comments</li>\n<li><code>&#39;emptyLines&#39;</code> ignore empty lines, included by default</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#indent\"><code>indent</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateIndentation\"</span>: <span class=\"hljs-string\">\"\\t\"</span>\n</code></pre>\n<h5 id=\"valid-example-for-mode-2\">Valid example for mode <code>2</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n  b=c;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) </span>{\n    e=f;\n  }\n}\n</code></pre>\n<h5 id=\"invalid-example-for-mode-2\">Invalid example for mode <code>2</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n   b=c;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) </span>{\n       e=f;\n}\n}\n</code></pre>\n<h5 id=\"valid-example-for-mode-t\">Valid example for mode <code>&quot;\\t&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n    b=c;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) </span>{\n        e=f;\n    }\n}\n</code></pre>\n<h5 id=\"invalid-example-for-mode-t\">Invalid example for mode <code>&quot;\\t&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n     b=c;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) </span>{\n           e=f;\n }\n}\n</code></pre>\n<h5 id=\"valid-example-for-mode-value-t-includeemptylines-true\">Valid example for mode <code>{ &quot;value&quot;: &quot;\\t&quot;, &quot;includeEmptyLines&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n    b=c;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) </span>{\n        e=f;\n    }\n\n} <span class=\"hljs-comment\">// single tab character on previous line</span>\n</code></pre>\n<h5 id=\"invalid-example-for-mode-value-t-includeemptylines-true\">Invalid example for mode <code>{ &quot;value&quot;: &quot;\\t&quot;, &quot;includeEmptyLines&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n    b=c;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">d</span>) </span>{\n        e=f;\n    }\n\n} <span class=\"hljs-comment\">// no tab character on previous line</span>\n</code></pre>\n<h5 id=\"valid-example-for-mode-value-t-allexcept-comments\">Valid example for mode <code>{ &quot;value&quot;: &quot;\\t&quot;, &quot;allExcept&quot;: [&quot;comments&quot;] }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (a) {\n    b=c;\n<span class=\"hljs-comment\">//    e=f</span>\n}\n</code></pre>\n","shortDescription":"<p>Validates indentation for switch statements and block statements</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-indentation.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/validate-indentation.js","filename":"validate-indentation.js"},{"name":"validateLineBreaks","description":"<h1 id=\"validatelinebreaks\">validateLineBreaks</h1>\n<p>Option to check line break characters</p>\n<p>Types: <code>String</code>, <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>String</code>: setting this is the same as validating the rule using <code>{character: String, reportOncePerFile: false}</code></li>\n<li><code>Object</code>:<ul>\n<li><code>character</code><ul>\n<li><code>String</code> specifies the line break character that is allowed. (Values allowed: <code>&quot;CR&quot;</code>, <code>&quot;LF&quot;</code> or <code>&quot;CRLF&quot;</code>)</li>\n</ul>\n</li>\n<li><code>reportOncePerFile</code><ul>\n<li><code>true</code> specifies that validation for the file should stop running upon encountering the first rule\nviolation and return the details of that violation in the report</li>\n<li><code>false</code> specifies that all lines in the file should be validated with all rule violations captured in\nthe final report</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateLineBreaks\"</span>: <span class=\"hljs-string\">\"LF\"</span>\n</code></pre>\n<h5 id=\"valid-for-mode-lf\">Valid for mode <code>&quot;LF&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">LF</span>&gt;</span>\nx++;</span>\n</code></pre>\n<h5 id=\"invalid-for-mode-lf\">Invalid for mode <code>&quot;LF&quot;</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">CRLF</span>&gt;</span>\nx++;</span>\n</code></pre>\n","shortDescription":"<p>Option to check line break characters</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-line-breaks.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/validate-line-breaks.js","filename":"validate-line-breaks.js"},{"name":"validateNewlineAfterArrayElements","description":"<h1 id=\"validatenewlineafterarrayelements\">validateNewlineAfterArrayElements</h1>\n<p>Requires each element in array on a single line when array length is more than passed maximum\nnumber or array fills more than one line.</p>\n<p>Types: <code>Boolean</code>, <code>Integer</code>, <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code>: setting this is the same as validating the rule using <code>{maximum: Infinity, ignoreBrackets: false}</code></li>\n<li><code>Integer</code>: setting this is the same as validating the rule using <code>{maximum: Integer, ignoreBrackets: false}</code></li>\n<li><code>Object</code>:<ul>\n<li><code>maximum</code><ul>\n<li><code>Integer</code> specifies the maximum number of elements that a single line array can contain</li>\n</ul>\n</li>\n<li><code>ignoreBrackets</code><ul>\n<li><code>true</code> specifies that the <code>[</code> and <code>]</code> brackets can be placed on the same line as the array elements</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateNewlineAfterArrayElements\"</span>: {\n  <span class=\"hljs-string\">\"maximum\"</span>: <span class=\"hljs-number\">3</span>\n}\n</code></pre>\n<h5 id=\"valid-for-mode-true\">Valid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [{a: <span class=\"hljs-number\">1</span>}, [<span class=\"hljs-number\">2</span>], <span class=\"hljs-string\">'3'</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n<span class=\"hljs-keyword\">var</span> x = [\n  {a: <span class=\"hljs-number\">1</span>},\n  [<span class=\"hljs-number\">2</span>],\n  <span class=\"hljs-string\">'3'</span>,\n  <span class=\"hljs-number\">4</span>\n];\n</code></pre>\n<h5 id=\"invalid-for-mode-true\">Invalid for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-number\">2</span>];\n</code></pre>\n<h5 id=\"valid-for-mode-3\">Valid for mode <code>3</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [{a: <span class=\"hljs-number\">1</span>}, [<span class=\"hljs-number\">2</span>], <span class=\"hljs-string\">'3'</span>];\n<span class=\"hljs-keyword\">var</span> x = [\n  <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-number\">3</span>,\n  <span class=\"hljs-number\">4</span>\n];\n</code></pre>\n<h5 id=\"invalid-for-mode-3\">Invalid for mode <code>3</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> x = [\n    <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>\n];\n</code></pre>\n<h5 id=\"valid-for-mode-maximum-2-ignorebrackets-true\">Valid for mode <code>{maximum: 2, ignoreBrackets: true}</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [{a: <span class=\"hljs-number\">1</span>}, [<span class=\"hljs-number\">2</span>]];\n<span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-number\">3</span>];\n</code></pre>\n<h5 id=\"invalid-for-mode-maximum-2-ignorebrackets-true\">Invalid for mode <code>{maximum: 2, ignoreBrackets: true}</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n</code></pre>\n","shortDescription":"<p>Requires each element in array on a single line when array length is more than passed maximum\nnumber or array fills more than one line.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-newline-after-array-elements.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/validate-newline-after-array-elements.js","filename":"validate-newline-after-array-elements.js"},{"name":"validateOrderInObjectKeys","description":"<h1 id=\"validateorderinobjectkeys\">validateOrderInObjectKeys</h1>\n<p>Validates the order in object keys.</p>\n<p>Types: <code>Boolean</code> or <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>true</code> (alias to <code>asc</code>)</li>\n<li><code>&quot;asc&quot;</code>: requires sorting in ascending order</li>\n<li><code>&quot;asc-insensitive&quot;</code>: requires sorting in ascending order (case-insensitive)</li>\n<li><code>&quot;asc-natural&quot;</code>: requires sorting in ascending natural order</li>\n<li><code>&quot;desc&quot;</code>: requires sorting in descending order</li>\n<li><code>&quot;desc-insensitive&quot;</code>: requires sorting in descending order (case-insensitive)</li>\n<li><code>&quot;desc-natural&quot;</code>: requires sorting in descending natural order</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateOrderInObjectKeys\"</span>: <span class=\"hljs-string\">\"asc\"</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n x: <span class=\"hljs-string\">'foo'</span>,\n y: <span class=\"hljs-string\">'bar'</span>\n}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = {\n y: <span class=\"hljs-string\">'foo'</span>,\n x: <span class=\"hljs-string\">'bar'</span>\n}\n</code></pre>\n","shortDescription":"<p>Validates the order in object keys.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-order-in-object-keys.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/validate-order-in-object-keys.js","filename":"validate-order-in-object-keys.js"},{"name":"validateParameterSeparator","description":"<h1 id=\"validateparameterseparator\">validateParameterSeparator</h1>\n<p>Enable validation of separators between function parameters. Will ignore newlines.</p>\n<p>Type: <code>String</code></p>\n<p>Values:</p>\n<ul>\n<li><code>&quot;,&quot;</code>: function parameters are immediately followed by a comma</li>\n<li><code>&quot;, &quot;</code>: function parameters are immediately followed by a comma and then a space</li>\n<li><code>&quot; ,&quot;</code>: function parameters are immediately followed by a space and then a comma</li>\n<li><code>&quot; , &quot;</code>: function parameters are immediately followed by a space, a comma, and then a space</li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateParameterSeparator\"</span>: <span class=\"hljs-string\">\", \"</span>\n</code></pre>\n<h5 id=\"valid\">Valid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\">b, c</span>) </span>{}\n</code></pre>\n<h5 id=\"invalid\">Invalid</h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\">b , c</span>) </span>{}\n</code></pre>\n","shortDescription":"<p>Enable validation of separators between function parameters. Will ignore newlines.</p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-parameter-separator.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/validate-parameter-separator.js","filename":"validate-parameter-separator.js"},{"name":"validateQuoteMarks","description":"<h1 id=\"validatequotemarks\">validateQuoteMarks</h1>\n<p>Requires all quote marks to be either the supplied value, or consistent if <code>true</code></p>\n<p>Types: <code>Boolean</code>, <code>String</code> or <code>Object</code></p>\n<p>Values:</p>\n<ul>\n<li><code>&quot;\\&quot;&quot;</code>: all strings require double quotes</li>\n<li><code>&quot;&#39;&quot;</code>: all strings require single quotes</li>\n<li><code>true</code>: all strings require the quote mark first encountered in the source code</li>\n<li><code>Object</code>:<ul>\n<li><code>escape</code>: allow the &quot;other&quot; quote mark to be used, but only to avoid having to escape</li>\n<li><code>mark</code>: the same effect as the non-object values</li>\n</ul>\n</li>\n</ul>\n<p>JSHint: <a href=\"http://jshint.com/docs/options/#quotmark\"><code>quotmark</code></a></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateQuoteMarks\"</span>: <span class=\"hljs-string\">\"\\\"\"</span>\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"validateQuoteMarks\"</span>: { <span class=\"hljs-string\">\"mark\"</span>: <span class=\"hljs-string\">\"\\\"\"</span>, <span class=\"hljs-string\">\"escape\"</span>: <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<h5 id=\"valid-example-for-mode-mark-escape-true\">Valid example for mode <code>{ &quot;mark&quot;: &quot;\\&quot;&quot;, &quot;escape&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"x\"</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-string\">'\"x\"'</span>;\n</code></pre>\n<h5 id=\"invalid-example-for-mode-mark-escape-true\">Invalid example for mode <code>{ &quot;mark&quot;: &quot;\\&quot;&quot;, &quot;escape&quot;: true }</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"x\"</span>;\n<span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-string\">'x'</span>;\n</code></pre>\n<h5 id=\"valid-example-for-mode-or-mode-true\">Valid example for mode <code>&quot;\\&quot;&quot;</code> or mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"x\"</span>;\n</code></pre>\n<h5 id=\"valid-example-for-mode-or-mode-true\">Valid example for mode <code>&quot;&#39;&quot;</code> or mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">'x'</span>;\n</code></pre>\n<h5 id=\"invalid-example-for-mode-true\">Invalid example for mode <code>true</code></h5>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">\"x\"</span>, y = <span class=\"hljs-string\">'y'</span>;\n</code></pre>\n","shortDescription":"<p>Requires all quote marks to be either the supplied value, or consistent if <code>true</code></p>\n","sourceUrl":"https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-quote-marks.js","renderTestLink":true,"testUrl":"https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/validate-quote-marks.js","filename":"validate-quote-marks.js"}],"index":{"introduction":"JSCS is a code style linter for programmatically enforcing your style guide.\nYou can configure JSCS for your project in detail using over 150 validation rules,\nincluding presets from popular style guides like jQuery, Airbnb, Google, and more.\n","badges":[{"title":"Build Status","url":"https://travis-ci.org/jscs-dev/node-jscs","imageUrl":"https://travis-ci.org/jscs-dev/node-jscs.svg?branch=master"},{"title":"Coverage Status","url":"https://coveralls.io/r/jscs-dev/node-jscs?branch=master","imageUrl":"https://img.shields.io/coveralls/jscs-dev/node-jscs.svg?style=flat"},{"title":"Dependency Status","url":"https://david-dm.org/jscs-dev/node-jscs","imageUrl":"https://david-dm.org/jscs-dev/node-jscs.svg?theme=shields.io&style=flat"},{"title":"devDependency Status","url":"https://david-dm.org/jscs-dev/node-jscs#info=devDependencies","imageUrl":"https://david-dm.org/jscs-dev/node-jscs/dev-status.svg?theme=shields.io&style=flat"},{"title":"Gitter","url":"https://gitter.im/jscs-dev/node-jscs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge","imageUrl":"https://img.shields.io/badge/gitter-join%20chat-green.svg?style=flat"}],"title":"JSCS — JavaScript Code Style\n","users":[{"name":"jQuery","url":"http://jquery.com/"},{"name":"Adobe","url":"http://www.adobe.com/"},{"name":"Bootstrap","url":"http://getbootstrap.com/"},{"name":"AngularJS","url":"https://angularjs.org/"},{"name":"Yandex","url":"https://yandex.com/"},{"name":"Wikimedia","url":"https://www.wikimedia.org/"},{"name":"Grunt","url":"http://gruntjs.com/"},{"name":"Ember.js","url":"http://www.emberjs.com/"},{"name":"Ionic","url":"http://ionicframework.com/"},{"name":"Moment.js","url":"http://momentjs.com/"},{"name":"TodoMVC","url":"http://todomvc.com/"},{"name":"Famous","url":"http://famo.us/"},{"name":"less.js","url":"http://lesscss.org/"},{"name":"Goodvidio","url":"http://goodvid.io/"}]},"maintainers":[{"name":"Marat Dulin","email":"mdevils@yandex.ru","githubUsername":"mdevils"},{"name":"Oleg Gaidarenko","email":"markelog@gmail.com","githubUsername":"markelog"},{"name":"Mike Sherov","email":"mike.sherov@gmail.com","githubUsername":"mikesherov"},{"name":"Joel Kemp","email":"joel@mrjoelkemp.com","githubUsername":"mrjoelkemp"},{"name":"Alexej Yaroshevich","email":"zxqfox@gmail.com","githubUsername":"zxqfox"},{"name":"Henry Zhu","email":"hi@henryzoo.com","githubUsername":"hzoo"}],"overview":"<div class=\"toc\"><div class=\"toc-header\">Table of contents:</div>\n<ul>\n<li><a href=\"#presets\">Presets</a></li>\n<li><a href=\"#friendly-packages\">Friendly packages</a></li>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#programmatic-usage\">Programmatic Usage</a></li>\n<li><a href=\"#cli\">CLI</a></li>\n<li><a href=\"#options\">Options</a></li>\n<li><a href=\"#error-suppression\">Error Suppression</a></li>\n<li><a href=\"#versioning-semver\">Versioning &amp; Semver</a></li>\n</ul>\n</div>\n<h2 id=\"presets\">Presets</h2>\n<p>Note: the easiest way to use a preset is with the <a href=\"#preset\">preset</a> option described below.</p>\n<ul>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json\">Airbnb</a> — <a href=\"https://github.com/airbnb/javascript\">https://github.com/airbnb/javascript</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/crockford.json\">Crockford</a> — <a href=\"http://javascript.crockford.com/code.html\">http://javascript.crockford.com/code.html</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/google.json\">Google</a> — <a href=\"https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\">https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/grunt.json\">Grunt</a> — <a href=\"http://gruntjs.com/contributing#syntax\">http://gruntjs.com/contributing#syntax</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/idiomatic.json\">Idiomatic</a> — <a href=\"https://github.com/rwaldron/idiomatic.js#idiomatic-style-manifesto\">https://github.com/rwaldron/idiomatic.js#idiomatic-style-manifesto</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/jquery.json\">jQuery</a> — <a href=\"https://contribute.jquery.org/style-guide/js/\">https://contribute.jquery.org/style-guide/js/</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/mdcs.json\">MDCS</a> — <a href=\"https://github.com/mrdoob/three.js/wiki/Mr.doob&#39;s-Code-Style%E2%84%A2\">https://github.com/mrdoob/three.js/wiki/Mr.doob&#39;s-Code-Style™</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/node-style-guide.json\">node-style-guide</a> - <a href=\"https://github.com/felixge/node-style-guide\">https://github.com/felixge/node-style-guide</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/wikimedia.json\">Wikimedia</a> — <a href=\"https://www.mediawiki.org/wiki/Manual:Coding_conventions/JavaScript\">https://www.mediawiki.org/wiki/Manual:Coding_conventions/JavaScript</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/wordpress.json\">WordPress</a> — <a href=\"https://make.wordpress.org/core/handbook/coding-standards/javascript/\">https://make.wordpress.org/core/handbook/coding-standards/javascript/</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/yandex.json\">Yandex</a> — <a href=\"https://github.com/yandex/codestyle/blob/master/javascript.md\">https://github.com/yandex/codestyle/blob/master/javascript.md</a></li>\n</ul>\n<p>You can specifically disable any preset rule by creating a <code>.jscsrc</code> config file and assigning it to null or false, like so:</p>\n<pre><code class=\"lang-json\">{\n    \"<span class=\"hljs-attribute\">preset</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"jquery\"</span></span>,\n    \"<span class=\"hljs-attribute\">requireCurlyBraces</span>\": <span class=\"hljs-value\"><span class=\"hljs-literal\">null</span> // or <span class=\"hljs-literal\">false</span>\n</span>}\n</code></pre>\n<h2 id=\"friendly-packages\">Friendly packages</h2>\n<ul>\n<li>Atom plugin: <a href=\"https://atom.io/packages/linter-jscs\">https://atom.io/packages/linter-jscs</a></li>\n<li>Brackets Extension: <a href=\"https://github.com/globexdesigns/brackets-jscs\">https://github.com/globexdesigns/brackets-jscs</a></li>\n<li>Grunt task: <a href=\"https://github.com/jscs-dev/grunt-jscs/\">https://github.com/jscs-dev/grunt-jscs/</a></li>\n<li>Gulp task: <a href=\"https://github.com/jscs-dev/gulp-jscs/\">https://github.com/jscs-dev/gulp-jscs/</a></li>\n<li>Overcommit Git pre-commit hook manager: <a href=\"https://github.com/brigade/overcommit/\">https://github.com/brigade/overcommit/</a></li>\n<li>SublimeText 3 Plugin: <a href=\"https://github.com/SublimeLinter/SublimeLinter-jscs/\">https://github.com/SublimeLinter/SublimeLinter-jscs/</a></li>\n<li>Syntastic VIM Plugin: <a href=\"https://github.com/scrooloose/syntastic/blob/master/syntax_checkers/javascript/jscs.vim/\">https://github.com/scrooloose/syntastic/.../syntax_checkers/javascript/jscs.vim/</a></li>\n<li>Web Essentials for Visual Studio 2013: <a href=\"https://github.com/madskristensen/WebEssentials2013/\">https://github.com/madskristensen/WebEssentials2013/</a></li>\n<li>IntelliJ IDEA, RubyMine, WebStorm, PhpStorm, PyCharm plugin: <a href=\"https://www.jetbrains.com/webstorm/help/jscs.html\">https://www.jetbrains.com/webstorm/help/jscs.html</a></li>\n</ul>\n<h3 id=\"extensions\">Extensions</h3>\n<ul>\n<li>A TeamCity reporter: <a href=\"https://github.com/wurmr/jscs-teamcity-reporter\">https://github.com/wurmr/jscs-teamcity-reporter</a></li>\n<li>JSDoc rules extension: <a href=\"https://github.com/jscs-dev/jscs-jsdoc\">https://github.com/jscs-dev/jscs-jsdoc</a></li>\n</ul>\n<h2 id=\"installation\">Installation</h2>\n<p><code>jscs</code> can be installed using <code>npm</code>:</p>\n<pre><code>npm install jscs -g\n</code></pre><p>To run <code>jscs</code>, you can use the following command from the project root:</p>\n<pre><code>jscs path[ path[...]]\n</code></pre><p>You can also pipe input into jscs:</p>\n<pre><code>cat myfile.js | jscs\n</code></pre><h2 id=\"programmatic-usage\">Programmatic Usage</h2>\n<p><code>jscs</code> can be used directly from your application code:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> Checker = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"jscs\"</span>);\n<span class=\"hljs-keyword\">var</span> checker = <span class=\"hljs-keyword\">new</span> Checker();\nchecker.registerDefaultRules();\n</code></pre>\n<p>You can configure the checker instance to use specific options, or a preset:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Configure the checker with an options object</span>\nchecker.configure({\n    <span class=\"hljs-string\">\"requireCurlyBraces\"</span>: [\n        <span class=\"hljs-string\">\"if\"</span>,\n        <span class=\"hljs-string\">\"else\"</span>,\n        <span class=\"hljs-string\">\"for\"</span>\n    ]\n});\n\n<span class=\"hljs-comment\">// Use the jQuery preset</span>\nchecker.configure({\n    preset: <span class=\"hljs-string\">\"jquery\"</span>\n});\n\n<span class=\"hljs-comment\">// Use the Google preset, but override or remove some options</span>\nchecker.configure({\n    preset: <span class=\"hljs-string\">\"google\"</span>,\n    disallowMultipleLineBreaks: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-comment\">// or false</span>\n    validateIndentation: <span class=\"hljs-string\">\"\\t\"</span>\n});\n</code></pre>\n<p>To check a string of code, pass it to the <code>checkString</code> method:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> results = checker.checkString(stringOfCode);\n<span class=\"hljs-keyword\">var</span> errors = results.getErrorList();\n</code></pre>\n<p>The results object can be used to render a descriptive explanation of each error:</p>\n<pre><code class=\"lang-js\">results.getErrorList().forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">error</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> colorizeOutput = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-built_in\">console</span>.log(results.explainError(error, colorizeOutput) + <span class=\"hljs-string\">\"\\n\"</span>);\n});\n</code></pre>\n<h2 id=\"cli\">CLI</h2>\n<p>Some CLI options can be put in your <code>.jscsrc</code> as well (such as <code>esnext</code>).</p>\n<h3 id=\"-fix-x\"><code>--fix</code> (<code>-x</code>)</h3>\n<p>Will apply fixes to all supported style rules. (Currently whitespace rules, <a href=\"http://jscs.info/rules.html#requirelinefeedatfileend\">EOF rule</a>, and <a href=\"http://jscs.info/rules.html#validateindentation\">validateIndentation</a>)</p>\n<pre><code>jscs path[ path[...]] --fix\n</code></pre><h3 id=\"-auto-configure\"><code>--auto-configure</code></h3>\n<p>Presents a walkthrough that allows you to generate a JSCS configuration by\nchoosing a preset and handling violated rules.</p>\n<pre><code>jscs --auto-configure path\n</code></pre><p><code>path</code> can be a file or directory to check the presets against</p>\n<h3 id=\"-config-c\"><code>--config</code> (<code>-c</code>)</h3>\n<p>Allows to define path to the config file.</p>\n<pre><code>jscs path[ path[...]] --config=./.config.json\n</code></pre><p>If there is no <code>--config</code> option specified, <code>jscs</code> it will consequentially search for <code>jscsConfig</code> option in <code>package.json</code> file then for <code>.jscsrc</code> (which is a just JSON with comments) and <code>.jscs.json</code> files in the current working directory then in nearest ancestor until it hits the system root.</p>\n<h3 id=\"-preset-p\"><code>--preset</code> (<code>-p</code>)</h3>\n<p>If defined will use predefined rules for specific code style.</p>\n<pre><code>jscs path[ path[...]] --preset=jquery\n</code></pre><p>In order to add/remove preset rules you will need to create a <code>.jscsrc</code> config file.</p>\n<h3 id=\"-extract\"><code>--extract</code></h3>\n<p>With this option you can set glob pattern for files which embedded JavaScript should be checked.</p>\n<pre><code>jscs path[ path[...]] --extract *.html\n</code></pre><p>You can set several patterns if necessary.</p>\n<pre><code>jscs path[ path[...]] --extract *.html --extract *.htm\n</code></pre><p>Currently, only the <code>html</code> format is supported (JavaScript inside <code>&lt;script&gt;</code> will be checked) and extracted code cannot be auto fixed.</p>\n<h3 id=\"-reporter-r\"><code>--reporter</code> (<code>-r</code>)</h3>\n<p><code>jscs</code> itself provides eight reporters: <code>checkstyle</code>, <code>console</code>, <code>inline</code>, <code>inlinesingle</code>, <code>junit</code>, <code>text</code>, <code>unix</code> and <code>json</code>.</p>\n<pre><code>jscs path[ path[...]] --reporter=console\n</code></pre><p>But you also can specify your own reporter, since this flag accepts relative or absolute paths too.</p>\n<pre><code>jscs path[ path[...]] --reporter=./some-dir/my-reporter.js\n</code></pre><h3 id=\"-esnext-e\"><code>--esnext</code> (<code>-e</code>)</h3>\n<p>Attempts to parse your code as ES6+, JSX, and Flow using the babel-jscs package as the parser. Please note that this is experimental, and will improve over time.</p>\n<h3 id=\"-esprima-s\"><code>--esprima</code> (<code>-s</code>)</h3>\n<p>Attempts to parse your code with a custom Esprima version.</p>\n<pre><code>jscs path[ path[...]] --esprima=esprima-fb\n</code></pre><h3 id=\"-error-filter-f\"><code>--error-filter</code> (<code>-f</code>)</h3>\n<p>The path to a module that determines whether or not an error should be reported.</p>\n<pre><code>jscs path[ path[...]] --error-filter=path/to/my/module.js\n</code></pre><h3 id=\"-no-colors-n\"><code>--no-colors</code> (<code>-n</code>)</h3>\n<p>Clean output without colors.</p>\n<h3 id=\"-max-errors-m\"><code>--max-errors</code> (<code>-m</code>)</h3>\n<p>Set the maximum number of errors to report (pass -1 to report all errors).</p>\n<h3 id=\"-help-h\"><code>--help</code> (<code>-h</code>)</h3>\n<p>Outputs usage information.</p>\n<h3 id=\"-verbose-v\"><code>--verbose</code> (<code>-v</code>)</h3>\n<p>Prepends the name of the offending rule to all error messages.</p>\n<h3 id=\"-version-v\"><code>--version</code> (<code>-V</code>)</h3>\n<p>Outputs version of <code>jscs</code>.</p>\n<h2 id=\"options\">Options</h2>\n<h3 id=\"plugins\">plugins</h3>\n<p>Paths to load plugins. See the wiki page for more details about the <a href=\"https://github.com/jscs-dev/node-jscs/wiki/Plugin-API\">Plugin API</a></p>\n<p>Values: Array of NPM package names or paths</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"plugins\"</span>: [<span class=\"hljs-string\">\"jscs-plugin\"</span>, <span class=\"hljs-string\">\"./lib/project-jscs-plugin\"</span>]\n</code></pre>\n<h3 id=\"additionalrules\">additionalRules</h3>\n<p>Path to load additional rules</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of file matching patterns</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"additionalRules\"</span>: [<span class=\"hljs-string\">\"project-rules/*.js\"</span>]\n</code></pre>\n<h3 id=\"preset\">preset</h3>\n<p>Extends defined rules with preset rules.</p>\n<p>Type: <code>String</code></p>\n<p>Values: You can choose one of the default presets: <code>&quot;airbnb&quot;</code>, <code>&quot;crockford&quot;</code>, <code>&quot;google&quot;</code>, <code>&quot;jquery&quot;</code>, <code>&quot;mdcs&quot;</code>, <code>&quot;node-style-guide&quot;</code>, <code>&quot;wikimedia&quot;</code>, <code>&quot;wordpress&quot;</code>, <code>&quot;yandex&quot;</code>, <code>&quot;idiomatic&quot;</code>.</p>\n<p>Or you can load from it local path or as node module</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"preset\"</span>: <span class=\"hljs-string\">\"jquery\"</span>\n<span class=\"hljs-string\">\"preset\"</span>: <span class=\"hljs-string\">\"./path-to-your-preset\"</span>\n\n<span class=\"hljs-comment\">// If your preset called \"jscs-your-preset-node_modules-path\"</span>\n<span class=\"hljs-comment\">// You can either define full name or omit \"jscs-\" prefix -</span>\n<span class=\"hljs-string\">\"preset\"</span>: <span class=\"hljs-string\">\"your-preset-node_modules-path\"</span>\n</code></pre>\n<p>You can specifically disable any preset rule by assigning it to null or false, like so:</p>\n<pre><code class=\"lang-json\">{\n    \"<span class=\"hljs-attribute\">preset</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"jquery\"</span></span>,\n    \"<span class=\"hljs-attribute\">requireCurlyBraces</span>\": <span class=\"hljs-value\"><span class=\"hljs-literal\">null</span> // or <span class=\"hljs-literal\">false</span>\n</span>}\n</code></pre>\n<h3 id=\"excludefiles\">excludeFiles</h3>\n<p>Disables style checking for specified paths declared with glob patterns.</p>\n<p>Type: <code>Array</code></p>\n<p>Values: Array of file matching patterns</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Use `\"!foo\"` to specifically include a file/folder</span>\n<span class=\"hljs-string\">\"excludeFiles\"</span>: [<span class=\"hljs-string\">\"folder_to_exclude/**\"</span>, <span class=\"hljs-string\">\"src/!(bar|foo)\"</span>]\n</code></pre>\n<h4 id=\"default\">Default</h4>\n<p>The <code>.git</code> and <code>node_modules</code> folders are excluded by default.</p>\n<h3 id=\"fileextensions\">fileExtensions</h3>\n<p>Changes the set of file extensions that will be processed.</p>\n<p>Type: <code>Array</code> or <code>String</code> or <code>&quot;*&quot;</code></p>\n<p>Values: A single file extension or an Array of file extensions, beginning with a <code>.</code>. The matching is case <em>insensitive</em>. If <code>&quot;*&quot;</code> is provided, all files regardless of extension will match.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"fileExtensions\"</span>: [<span class=\"hljs-string\">\".js\"</span>, <span class=\"hljs-string\">\".jsx\"</span>]\n</code></pre>\n<h4 id=\"default\">Default</h4>\n<p><code>.js</code> files are processed by default</p>\n<h3 id=\"extract\">extract</h3>\n<p>Set list of glob patterns for files which embedded JavaScript should be checked.</p>\n<p>Type: <code>Array</code> or <code>Boolean</code></p>\n<p>Values: Array of file matching patterns</p>\n<p>JavaScript extracting from files that doesn&#39;t match to <a href=\"#fileExtensions\">fileExtensions</a> or <a href=\"#excludefiles\">excludeFiles</a>, but match to patterns in this list. Currently, only <code>html</code> format is supported.</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"extract\"</span>: [<span class=\"hljs-string\">\"*.htm\"</span>, <span class=\"hljs-string\">\"*.html\"</span>]\n</code></pre>\n<h4 id=\"value-true\">Value <code>true</code></h4>\n<p>JavaScript is extracted from files with <code>.htm</code>, <code>.html</code> or <code>.xhtml</code> extension with value <code>true</code>.</p>\n<h3 id=\"maxerrors\">maxErrors</h3>\n<p>Set the maximum number of errors to report (pass -1 or null to report all errors).\nIgnored if <code>--fix</code> flag is provided.</p>\n<p>Type: <code>Number|null</code></p>\n<p>Default: 50</p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Report only the first 10 errors</span>\n<span class=\"hljs-string\">\"maxErrors\"</span>: <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-comment\">// Report all errors</span>\n<span class=\"hljs-string\">\"maxErrors\"</span>: -<span class=\"hljs-number\">1</span>\n<span class=\"hljs-string\">\"maxErrors\"</span>: <span class=\"hljs-literal\">null</span>\n</code></pre>\n<h3 id=\"esnext\">esnext</h3>\n<p>Attempts to parse your code as ES6+, JSX, and Flow using the babel-jscs package as the parser. Please note that this is experimental, and will improve over time.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"esnext\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h3 id=\"es3\">es3</h3>\n<p>Use ES3 reserved words.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Value: <code>true</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"es3\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h3 id=\"verbose\">verbose</h3>\n<p>Prepends the name of the offending rule to all error messages.</p>\n<p>Type: <code>Boolean</code></p>\n<p>Default: <code>false</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"verbose\"</span>: <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h3 id=\"esprima\">esprima</h3>\n<p>Attempts to parse your code with a custom Esprima version.</p>\n<p>Type: <code>String</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"esprima\"</span>: <span class=\"hljs-string\">\"esprima-fb\"</span> <span class=\"hljs-comment\">// You should install custom esprima first</span>\n</code></pre>\n<h3 id=\"esprimaoptions\">esprimaOptions</h3>\n<p>Custom <code>options</code> to be passed to <code>esprima.parse(code, options)</code></p>\n<p>Type: <code>Object</code></p>\n<p>Default: <code>{ &quot;tolerant&quot;: true }</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"esprimaOptions\"</span>: { <span class=\"hljs-string\">\"tolerant\"</span>: <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<h3 id=\"errorfilter\">errorFilter</h3>\n<p>A filter function that determines whether or not to report an error.\nThis will be called for every found error.</p>\n<p>Type: <code>String</code></p>\n<h4 id=\"example\">Example</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-string\">\"errorFilter\"</span>: <span class=\"hljs-string\">\"path/to/my/filter.js\"</span>\n</code></pre>\n<p>See <a href=\"https://github.com/jscs-dev/node-jscs/wiki/Error-Filters\">how to define an error filter</a>.</p>\n<h2 id=\"error-suppression\">Error Suppression</h2>\n<h3 id=\"disabling-a-rule\">Disabling a Rule</h3>\n<p>You can specifically disable any rule by omitting it from your <code>.jscsrc</code> config or by assigning it to null, like so:</p>\n<pre><code class=\"lang-json\">{\n    \"<span class=\"hljs-attribute\">preset</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"jquery\"</span></span>,\n    \"<span class=\"hljs-attribute\">requireCurlyBraces</span>\": <span class=\"hljs-value\"><span class=\"hljs-literal\">null</span>\n</span>}\n</code></pre>\n<h3 id=\"inline-comments\">Inline Comments</h3>\n<p>You can disable and re-enable rules inline with two special comments: <code>// jscs:disable</code> and <code>// jscs:enable</code>. Spacing in these comments is fairly lenient. All of the following are equivalent:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/* jscs: enable */</span>\n<span class=\"hljs-comment\">// jscs: enable</span>\n</code></pre>\n<p>You can use them to disable rules in several ways.</p>\n<h4 id=\"disabling-all-rules\">Disabling All Rules</h4>\n<p>The placement of the special comments will disable or enable the checking of all rules against the code that appears after the comments</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> a = b;\n<span class=\"hljs-comment\">// jscs:disable</span>\n<span class=\"hljs-keyword\">var</span> c = d; <span class=\"hljs-comment\">// all errors on this line will be ignored</span>\n<span class=\"hljs-comment\">// jscs:enable</span>\n<span class=\"hljs-keyword\">var</span> e = f; <span class=\"hljs-comment\">// all errors on this line will be reported</span>\n</code></pre>\n<h4 id=\"disabling-specific-rules\">Disabling Specific Rules</h4>\n<p>Including a comma separated list of rules to modify after <code>// jscs:disable</code> or <code>// jscs:enable</code> will modify only those rules.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// jscs:disable requireCurlyBraces</span>\n<span class=\"hljs-keyword\">if</span> (x) y(); <span class=\"hljs-comment\">// all errors from requireCurlyBraces on this line will be ignored</span>\n<span class=\"hljs-comment\">// jscs:enable requireCurlyBraces</span>\n<span class=\"hljs-keyword\">if</span> (z) a(); <span class=\"hljs-comment\">// all errors, including from requireCurlyBraces, on this line will be reported</span>\n</code></pre>\n<h4 id=\"disabling-specific-rules-for-a-single-line\">Disabling Specific Rules For a Single Line</h4>\n<p>Rules can be disabled for a single line with <code>// jscs:ignore</code>.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x) y(); <span class=\"hljs-comment\">// jscs:ignore requireCurlyBraces</span>\n<span class=\"hljs-keyword\">if</span> (z) a();\n</code></pre>\n<p>You can enable all rules after disabling a specific rule, and that rule becomes re-enabled as well.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// jscs:disable requireCurlyBraces</span>\n<span class=\"hljs-keyword\">if</span> (x) y(); <span class=\"hljs-comment\">// all errors from requireCurlyBraces on this line will be ignored</span>\n<span class=\"hljs-comment\">// jscs:enable</span>\n<span class=\"hljs-keyword\">if</span> (z) a(); <span class=\"hljs-comment\">// all errors, even from requireCurlyBraces, will be reported</span>\n</code></pre>\n<p>You can disable multiple rules at once and progressively re-enable them.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// jscs:disable requireCurlyBraces, requireDotNotation</span>\n<span class=\"hljs-keyword\">if</span> (x[<span class=\"hljs-string\">'a'</span>]) y(); <span class=\"hljs-comment\">// all errors from requireCurlyBraces OR requireDotNotation on this line will be ignored</span>\n<span class=\"hljs-comment\">// jscs:enable requireCurlyBraces</span>\n<span class=\"hljs-keyword\">if</span> (z[<span class=\"hljs-string\">'a'</span>]) a(); <span class=\"hljs-comment\">// all errors from requireDotNotation, but not requireCurlyBraces, will be ignored</span>\n<span class=\"hljs-comment\">// jscs:enable requireDotNotation</span>\n<span class=\"hljs-keyword\">if</span> (z[<span class=\"hljs-string\">'a'</span>]) a(); <span class=\"hljs-comment\">// all errors will be reported</span>\n</code></pre>\n<h3 id=\"disabling-rule-checks-on-the-entire-file\">Disabling rule checks on the entire file</h3>\n<p>All rule checks on the entire file can be disabled by placing the special comment below on the top of the file</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// jscs:disable</span>\n</code></pre>\n<p>As the comments are applicable only to the file they are placed in there is no requirement to put the special comment <code>// jscs:enable</code> at the end of the file.</p>\n<p>The same concept is applicable to disable only specific rules in the file. So instead of <code>// jscs:disable</code>, you can put <code>// jscs:disable requireCurlyBraces</code> to disable a single rule or <code>// jscs:disable requireCurlyBraces, requireDotNotation</code> to disable multiple rules</p>\n<h2 id=\"versioning-semver\">Versioning &amp; Semver</h2>\n<p>We recommend installing JSCS via NPM using <code>^</code>, or <code>~</code> if you want more stable releases.</p>\n<p>Semver (<a href=\"http://semver.org/\">http://semver.org/</a>) dictates that breaking changes be major version bumps. In the context of a linting tool, a bug fix that causes more errors to be reported can be interpreted as a breaking change. However, that would require major version bumps to occur more often than can be desirable. Therefore, as a compromise, we will only release bug fixes that cause more errors to be reported in minor versions.</p>\n<p>Below you fill find our versioning strategy, and what you can expect to come out of a new JSCS release.</p>\n<ul>\n<li>Patch release:<ul>\n<li>A bug fix in a rule that causes JSCS to report less errors.</li>\n<li>Docs, refactoring and other &quot;invisible&quot; changes for user;</li>\n</ul>\n</li>\n<li>Minor release:<ul>\n<li>Any preset changes.</li>\n<li>A bug fix in a rule that causes JSCS to report more errors.</li>\n<li>New rules or new options for existing rules that don&#39;t change existing behavior.</li>\n<li>Modifying rules so they report less errors, and don&#39;t cause build failures.</li>\n</ul>\n</li>\n<li>Major release:<ul>\n<li>Purposefully modifying existing rules so that they report more errors or change the meaning of a rule.</li>\n<li>Any architectural changes that could cause builds to fail.</li>\n</ul>\n</li>\n</ul>\n","contributing":"<h1 id=\"contribution-guide\">Contribution Guide</h1>\n<p>Thanks for wanting to contribute! This document describes some points about the contribution process for the JSCS package.</p>\n<ol>\n<li><a href=\"#maintainers\">Maintainers</a></li>\n<li><a href=\"#how-you-can-help\">How you can help</a></li>\n<li><a href=\"#pull-requests\">Pull Requests</a><ul>\n<li><a href=\"#before-submitting-a-pr\">Before Submitting a PR</a></li>\n<li><a href=\"#why-did-you-close-my-pull-request-or-issue\">Why did you close my PR or Issue?</a></li>\n<li><a href=\"#prissue-closing-criteria\">PR/Issue Closing Criteria</a></li>\n</ul>\n</li>\n<li><a href=\"#filing-bugs\">Filing Bugs</a></li>\n<li><a href=\"#proposing-features\">Proposing Features</a></li>\n<li><a href=\"#implementing-features\">Implementing Features</a></li>\n<li><a href=\"#proposing-additional-presets\">Proposing Additional Presets</a></li>\n<li><a href=\"#setting-up-your-environment\">Setting up Your Environment</a></li>\n<li><a href=\"#commit-message-format\">Commit Message Format</a></li>\n</ol>\n<h2 id=\"maintainers\">Maintainers</h2>\n<p>The maintainers of the project are:</p>\n<ul>\n<li>Marat Dulin (@mdevils).</li>\n<li>Oleg Gaidarenko (@markelog).</li>\n<li>Mike Sherov (@mikesherov).</li>\n<li>Joel Kemp (@mrjoelkemp).</li>\n<li>Alexej Yaroshevich (@zxqfox).</li>\n</ul>\n<p>The project is being developed by the community. Maintainers merge pull-requests and fix critical bugs. All other features\nand patches are welcomed to be implemented by community members.</p>\n<h2 id=\"how-you-can-help\">How You Can Help</h2>\n<p>Many of the community requests/issues relate new rule requests, supporting additional style variations via\nextending the supported options of a rule, bug fixes for existing rules, or strengthening presets by specifying more rules.\nAll of those issues are great starting places for beginners to contribute.</p>\n<p>If you&#39;d like to work on an issue, just leave a comment on the issue saying that you&#39;ll work on a PR.</p>\n<p>Also check out the <a href=\"https://github.com/jscs-dev/node-jscs/labels/beginner-friendly\">beginner-friendly</a> label for an additional set\nof beginner-friendly tickets.</p>\n<h2 id=\"pull-requests\">Pull-requests</h2>\n<p>If you fixed or added something useful to the project, you can send a pull-request.\nIt will be reviewed by a maintainer and accepted, or commented for rework, or declined.</p>\n<h5 id=\"before-submitting-a-pr\">Before submitting a PR</h5>\n<ol>\n<li>Please review our suggested <a href=\"#commit-message-format\">commit message format</a>.</li>\n<li>Make sure you have tests for your modifications (we use <a href=\"https://mochajs.org/\">Mocha</a> and <a href=\"http://nodejs.org/api/assert.html\">Assert</a>)<ul>\n<li>Tests for rules are located in <code>test/specs/rules</code></li>\n<li>Code to validate default presets are located in <code>test/data/options/preset</code></li>\n</ul>\n</li>\n<li>Run <code>npm test</code> locally to catch any JSHint and JSCS errors.</li>\n</ol>\n<h5 id=\"why-did-you-close-my-pull-request-or-issue\">Why did you close my pull request or issue?</h5>\n<p>Nothing is worse than a project with hundreds of stale issues. To keep things orderly, the maintainers try to\nclose/resolve issues as quickly as possible.</p>\n<h5 id=\"prissue-closing-criteria\">PR/Issue closing criteria</h5>\n<p>We&#39;ll close your PR or issue if:</p>\n<ol>\n<li>It&#39;s a duplicate of an existing issue</li>\n<li>Outside of the style-driven scope of the project</li>\n<li>You are unresponsive after a few days</li>\n<li>The bug is not reproducible</li>\n<li>The feature request or rule modification request introduces too much complexity (or too many edge cases) to the tool<ul>\n<li>We weigh a request&#39;s complexity with the value it brings to the community.</li>\n</ul>\n</li>\n</ol>\n<p>Please do not take offense if your ticket is closed. We&#39;re only trying to keep the number of issues manageable.</p>\n<h2 id=\"filing-bugs\">Filing Bugs</h2>\n<p>If you found an error, typo, or any other flaw in the project,\nplease report it using <a href=\"https://github.com/jscs-dev/node-jscs/issues\">GitHub Issues</a>. Try searching\nthe issues to see if there is an existing report of your bug or feature request.</p>\n<p>When it comes to bugs, the more details you provide, the easier it is to reproduce the issue and the faster it could be fixed.</p>\n<p>Some helpful datapoints to provide (if you can):</p>\n<ol>\n<li>Specific rules that that have issues (<code>jscs --verbose</code> helps with this)</li>\n<li>A failing test would be amazing</li>\n<li>Code snippets that make jscs exhibit the issue</li>\n<li>The version of jscs that you&#39;re using</li>\n<li>Your operating system (Windows, Mac, or Linux)</li>\n<li>Screenshots</li>\n</ol>\n<p>Unfortunately, sometimes a bug can only be reproduced in your project or in your environment,\nso the maintainers cannot reproduce it. In this case we welcome you to try fixing the bug; we&#39;ll be more than happy to\ntake a look at (and possibly incorporate) the fix.</p>\n<h2 id=\"proposing-features\">Proposing Features</h2>\n<p>If you&#39;ve got an idea for a new feature, file an issue providing some details on your idea.</p>\n<p>If it&#39;s a new rule that you&#39;re proposing:</p>\n<ul>\n<li>Provide the possible configuration inputs<ul>\n<li>Look at the rules in the readme for examples</li>\n</ul>\n</li>\n<li>You&#39;ll also have to think about (and implement) the reverse rule (Before|After) or (Require|Disallow)</li>\n<li>Provide snippets to show code that your rule deems as valid and invalid.<ul>\n<li>Check out the readme for examples</li>\n</ul>\n</li>\n</ul>\n<p>If you&#39;d like to modify the possible values for existing rules:</p>\n<ul>\n<li>Provide code snippets showing the need for additional configuration values</li>\n</ul>\n<h2 id=\"implementing-features\">Implementing Features</h2>\n<p>It&#39;s likely that you&#39;ll have to implement feature requests or enhancements on your own. To do that, you&#39;ll need\nto be comfortable with JavaScript, Promises, Node.js, and familiar with Javascript abstract syntax trees (specifically Esprima and Bablyon).\nCheck out <a href=\"http://astexplorer.net/\">AST Explorer</a>.</p>\n<p>To understand how JSCS works, the best place to start is in the <code>lib/</code> directory: starting with <code>lib/cli.js</code>\n(to see the processing flow when <code>jscs</code> is invoked in the terminal) then going to <code>lib/checker.js</code> and <code>lib/string-checker.js</code>\nfor understanding how JSCS checks files. The <code>lib/js-file.js</code> and <code>lib/errors.js</code> contain the internal data structures.</p>\n<p>All of the rules are located in <code>lib/rules</code> and the tests for the rules are in <code>test/rules</code>.</p>\n<p>If you cannot implement the feature, but you feel that it would be helpful to others, you can create an issue on GitHub.\nIf the maintainers feel that the issue satisfies our <a href=\"#prissue-closing-criteria\">criteria for closing issues</a>, your issue\nwill be closed with a genuine thank you and an explanation for the closure.</p>\n<h2 id=\"proposing-additional-presets\">Proposing Additional Presets</h2>\n<p>If you&#39;d like to add an additional preset, please add the following (maintaining alphabetical order when possible):</p>\n<ul>\n<li>The new preset&#39;s configuration to <code>/presets</code></li>\n<li>A file containing sample code, including any necessary license (ideally from that organization/project&#39;s codebase) to <code>/test/data/options/preset/</code></li>\n<li>An integration test by adding the line <code>testPreset(&#39;mynewpreset&#39;);</code> to <code>/test/string-checker.js</code></li>\n<li>The presets name to the possible values of the preset option in OVERVIEW.md</li>\n<li>A link to the preset following the existing style in the &quot;Presets&quot; section of OVERVIEW.md</li>\n</ul>\n<h2 id=\"setting-up-your-environment\">Setting up your environment</h2>\n<ol>\n<li>Fork the node-jscs repository</li>\n<li>Clone your fork to your local machine</li>\n<li>Run <code>npm install</code> in your local fork</li>\n<li>Consider setting up the appropriate <a href=\"http://jscs.info/overview#friendly-packages\">JSCS package</a> for your text editor<ul>\n<li>We use JSCS to check the JSCS codebase</li>\n</ul>\n</li>\n<li>Create a new branch for your fix: <code>git checkout -b my-fix-branch master</code></li>\n<li>Implement your bug fix or feature request</li>\n<li>Implement the tests for your fix or feature</li>\n<li>Run <code>npm test</code> frequently to find stylistic errors before issuing a PR</li>\n<li>Commit your code with a commit message that follows our <a href=\"#commit-message-format\">commit message format</a><ul>\n<li>If you don&#39;t feel comfortable with that format, no worries, we&#39;ll fix up your commit after merging your PR.</li>\n<li>Try to have a single commit per modified/added rule</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"commit-message-format\">Commit Message Format</h2>\n<p>We adhere to the <a href=\"http://contribute.jquery.org/commits-and-pull-requests/#commit-guidelines\">jQuery commit message</a> guidelines.</p>\n<p>This format can be achieved via:</p>\n<ul>\n<li><code>git commit</code> to open your editor to create a multi-line commit message</li>\n</ul>\n<pre><code>&lt;rulename&gt;: short message\n&lt;emptyline&gt;\nLong description (if useful)\n&lt;emptyline&gt;\nCloses gh-&lt;pullRequestNumber&gt;\nFixes #&lt;issueNumber&gt;\n</code></pre><p>Example:</p>\n<pre><code>validateIndentation: remove array and object indentation validation\n\nFixes #627 - issue\nCloses gh-545 - pull request\n</code></pre><p>You can find other examples of this format by <a href=\"https://github.com/jscs-dev/node-jscs/commits/master\">viewing recent commits</a> made to master.</p>\n","changelog":"<div class=\"toc\"><div class=\"toc-header\">Table of contents:</div>\n<ul>\n<li><a href=\"#version-2-3-3-https-github-comjscs-devnode-jscscomparev2-3-2-v2-3-3-10-16-2015\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.3.2...v2.3.3\">2.3.3</a> (10-16-2015):</a></li>\n<li><a href=\"#version-2-3-2-https-github-comjscs-devnode-jscscomparev2-3-1-v2-3-2-10-14-2015\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.3.1...v2.3.2\">2.3.2</a> (10-14-2015):</a></li>\n<li><a href=\"#version-2-3-1-https-github-comjscs-devnode-jscscomparev2-3-0-v2-3-1-10-14-2015\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.3.0...v2.3.1\">2.3.1</a> (10-14-2015):</a></li>\n<li><a href=\"#version-2-3-0-https-github-comjscs-devnode-jscscomparev2-2-1-v2-3-0-10-07-2015\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.2.1...v2.3.0\">2.3.0</a> (10-07-2015):</a></li>\n<li><a href=\"#version-2-2-1-https-github-comjscs-devnode-jscscomparev2-2-0-v2-2-1-09-29-2015\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.2.0...v2.2.1\">2.2.1</a> (09-29-2015):</a></li>\n<li><a href=\"#version-2-2-0-https-github-comjscs-devnode-jscscomparev2-1-1-v2-2-0-09-28-2015\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.1.1...v2.2.0\">2.2.0</a> (09-28-2015):</a></li>\n<li><a href=\"#version-2-1-1-https-github-comjscs-devnode-jscscomparev2-1-0-v2-1-1\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.1.0...v2.1.1\">2.1.1</a></a></li>\n<li><a href=\"#version-2-1-0-https-github-comjscs-devnode-jscscomparev2-0-0-v2-1-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.0.0...v2.1.0\">2.1.0</a></a></li>\n<li><a href=\"#version-2-0-0-https-github-comjscs-devnode-jscscomparev1-13-1-v2-0-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.13.1...v2.0.0\">2.0.0</a></a></li>\n<li><a href=\"#version-1-13-1-https-github-comjscs-devnode-jscscomparev1-13-0-v1-13-1\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.13.0...v1.13.1\">1.13.1</a></a></li>\n<li><a href=\"#version-1-13-0-https-github-comjscs-devnode-jscscomparev1-12-0-v1-13-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.12.0...v1.13.0\">1.13.0</a></a></li>\n<li><a href=\"#version-1-12-0-https-github-comjscs-devnode-jscscomparev1-11-0-v1-12-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.11.0...v1.12.0\">1.12.0</a></a></li>\n<li><a href=\"#version-1-11-3-https-github-comjscs-devnode-jscscomparev1-10-0-v1-11-3\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.10.0...v1.11.3\">1.11.3</a></a></li>\n<li><a href=\"#version-1-11-2-https-github-comjscs-devnode-jscscomparev1-10-0-v1-11-2\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.10.0...v1.11.2\">1.11.2</a></a></li>\n<li><a href=\"#version-1-11-1-https-github-comjscs-devnode-jscscomparev1-10-0-v1-11-1\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.10.0...v1.11.1\">1.11.1</a></a></li>\n<li><a href=\"#version-1-11-0-https-github-comjscs-devnode-jscscomparev1-10-0-v1-11-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.10.0...v1.11.0\">1.11.0</a></a></li>\n<li><a href=\"#version-1-10-0-https-github-comjscs-devnode-jscscomparev1-9-0-v1-10-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.9.0...v1.10.0\">1.10.0</a></a></li>\n<li><a href=\"#version-1-9-0-https-github-comjscs-devnode-jscscomparev1-8-0-v1-9-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.8.0...v1.9.0\">1.9.0</a></a></li>\n<li><a href=\"#version-1-8-1-https-github-comjscs-devnode-jscscomparev1-7-0-v1-8-1\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.7.0...v1.8.1\">1.8.1</a></a></li>\n<li><a href=\"#version-1-8-0-https-github-comjscs-devnode-jscscomparev1-7-0-v1-8-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.7.0...v1.8.0\">1.8.0</a></a></li>\n<li><a href=\"#version-1-7-3-https-github-comjscs-devnode-jscscomparev1-6-0-v1-7-3\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.6.0...v1.7.3\">1.7.3</a></a></li>\n<li><a href=\"#version-1-7-2-https-github-comjscs-devnode-jscscomparev1-6-0-v1-7-2\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.6.0...v1.7.2\">1.7.2</a></a></li>\n<li><a href=\"#version-1-7-1-https-github-comjscs-devnode-jscscomparev1-6-0-v1-7-1\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.6.0...v1.7.1\">1.7.1</a></a></li>\n<li><a href=\"#version-1-7-0-https-github-comjscs-devnode-jscscomparev1-6-0-v1-7-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.6.0...v1.7.0\">1.7.0</a></a></li>\n<li><a href=\"#version-1-6-2-https-github-comjscs-devnode-jscscomparev1-5-0-v1-6-2\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.5.0...v1.6.2\">1.6.2</a></a></li>\n<li><a href=\"#version-1-6-1-https-github-comjscs-devnode-jscscomparev1-5-0-v1-6-1\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.5.0...v1.6.1\">1.6.1</a></a></li>\n<li><a href=\"#version-1-6-0-https-github-comjscs-devnode-jscscomparev1-5-0-v1-6-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.5.0...v1.6.0\">1.6.0</a></a></li>\n<li><a href=\"#version-1-5-9\">Version 1.5.9</a></li>\n<li><a href=\"#version-1-5-8\">Version 1.5.8</a></li>\n<li><a href=\"#version-1-5-7\">Version 1.5.7</a></li>\n<li><a href=\"#version-1-5-6\">Version 1.5.6</a></li>\n<li><a href=\"#version-1-5-5\">Version 1.5.5</a></li>\n<li><a href=\"#version-1-5-4\">Version 1.5.4</a></li>\n<li><a href=\"#version-1-5-3\">Version 1.5.3</a></li>\n<li><a href=\"#version-1-5-2\">Version 1.5.2</a></li>\n<li><a href=\"#version-1-5-1\">Version 1.5.1</a></li>\n<li><a href=\"#version-1-5-0\">Version 1.5.0</a></li>\n<li><a href=\"#version-1-4-5\">Version 1.4.5</a></li>\n<li><a href=\"#version-1-4-4\">Version 1.4.4</a></li>\n<li><a href=\"#version-1-4-3\">Version 1.4.3:</a></li>\n<li><a href=\"#version-1-4-2\">Version 1.4.2:</a></li>\n<li><a href=\"#version-1-4-1\">Version 1.4.1:</a></li>\n<li><a href=\"#version-1-4-0\">Version 1.4.0:</a></li>\n<li><a href=\"#version-1-3-0\">Version 1.3.0:</a></li>\n<li><a href=\"#version-1-2-4\">Version 1.2.4:</a></li>\n<li><a href=\"#version-1-2-3\">Version 1.2.3:</a></li>\n<li><a href=\"#version-1-2-2\">Version 1.2.2:</a></li>\n<li><a href=\"#version-1-2-1\">Version 1.2.1:</a></li>\n<li><a href=\"#version-1-2-0\">Version 1.2.0:</a></li>\n<li><a href=\"#version-1-0-15\">Version 1.0.15:</a></li>\n<li><a href=\"#version-1-0-14\">Version 1.0.14:</a></li>\n<li><a href=\"#version-1-0-13\">Version 1.0.13:</a></li>\n<li><a href=\"#version-1-0-12\">Version 1.0.12:</a></li>\n<li><a href=\"#version-1-0-11\">Version 1.0.11:</a></li>\n<li><a href=\"#version-1-0-10\">Version 1.0.10:</a></li>\n<li><a href=\"#version-1-0-9\">Version 1.0.9:</a></li>\n<li><a href=\"#version-1-0-8\">Version 1.0.8:</a></li>\n<li><a href=\"#version-1-0-7\">Version 1.0.7:</a></li>\n<li><a href=\"#version-1-0-6\">Version 1.0.6:</a></li>\n<li><a href=\"#version-1-0-4-1-0-5\">Version 1.0.4-1.0.5:</a></li>\n<li><a href=\"#version-1-0-3\">Version 1.0.3:</a></li>\n<li><a href=\"#version-1-0-2\">Version 1.0.2:</a></li>\n<li><a href=\"#version-1-0-1\">Version 1.0.1:</a></li>\n<li><a href=\"#version-1-0-0\">Version 1.0.0:</a></li>\n<li><a href=\"#version-0-0-12\">Version 0.0.12:</a></li>\n<li><a href=\"#version-0-0-11\">Version 0.0.11:</a></li>\n<li><a href=\"#version-0-0-10\">Version 0.0.10:</a></li>\n<li><a href=\"#version-0-0-9\">Version 0.0.9:</a></li>\n<li><a href=\"#version-0-0-8\">Version 0.0.8:</a></li>\n<li><a href=\"#version-0-0-7\">Version 0.0.7:</a></li>\n<li><a href=\"#version-0-0-6\">Version 0.0.6:</a></li>\n<li><a href=\"#version-0-0-5\">Version 0.0.5:</a></li>\n<li><a href=\"#version-0-0-4\">Version 0.0.4:</a></li>\n<li><a href=\"#version-0-0-3\">Version 0.0.3:</a></li>\n<li><a href=\"#version-0-0-2\">Version 0.0.2:</a></li>\n<li><a href=\"#version-0-0-1\">Version 0.0.1:</a></li>\n</ul>\n</div>\n<h2 id=\"version-2-3-3-https-github-comjscs-devnode-jscscomparev2-3-2-v2-3-3-10-16-2015\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.3.2...v2.3.3\">2.3.3</a> (10-16-2015):</h2>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li><p>Fixed an error with <code>disallowUnusedParams</code> and es6 imports <a href=\"https://github.com/jscs-dev/node-jscs/commit/63526b73d55eed3719d79527a7a7c7490b4cd2cb\"><code>63526b7</code></a> <a href=\"https://github.com/jscs-dev/node-jscs/issues/1875\"><code>#1875</code></a></p>\n</li>\n<li><p>Fixed an autofix issue with all function spacing rules and not accounting for the async keyword <a href=\"https://github.com/jscs-dev/node-jscs/commit/cf134a12c1ab0bb7a23c7197780593bfdb8682e2\"><code>cf134a1</code></a> <a href=\"https://github.com/jscs-dev/node-jscs/issues/1873\"><code>#1873</code></a></p>\n</li>\n</ul>\n<p>@hzoo</p>\n<h2 id=\"version-2-3-2-https-github-comjscs-devnode-jscscomparev2-3-1-v2-3-2-10-14-2015\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.3.1...v2.3.2\">2.3.2</a> (10-14-2015):</h2>\n<p>Fix an issue with <code>--extract</code> option being true by default</p>\n<h2 id=\"version-2-3-1-https-github-comjscs-devnode-jscscomparev2-3-0-v2-3-1-10-14-2015\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.3.0...v2.3.1\">2.3.1</a> (10-14-2015):</h2>\n<p>A bunch of bug fixes in this release!</p>\n<h3 id=\"the-future\">The Future</h3>\n<p>We are probably going to start 3.0 for the next release (mainly integrating <a href=\"https://github.com/cst/cst\">CST</a> into JSCS). If you want to know more about CST check out the <a href=\"https://github.com/jscs-dev/node-jscs/blob/master/CHANGELOG.md#-つ-_-つ--give-cst\">previous changelog</a>.</p>\n<p>Our current plan is to move our 3.0/cst branch to master and then create a 2.x branch to continue to release bug fixes / contributer PRs. The core team will be mainly focused on tackling issues on our <a href=\"https://github.com/jscs-dev/node-jscs/issues/1854\">3.0 roadmap</a> (which we are still planning). We would love to hear your feedback on what you think should be in 3.0 and beyond!</p>\n<h3 id=\"bug-fixes\">Bug Fixes:</h3>\n<ul>\n<li><a href=\"http://jscs.info/rule/disallowMultipleVarDecl\"><code>disallowMultipleVarDecl</code></a> - improve <code>{&quot;allExcept&quot;: [&quot;require&quot;]}</code> logic (ValYouW)</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Allow MemberExpressions: require('a').b.c;</span>\n<span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n<span class=\"hljs-keyword\">var</span> Emitter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'events'</span>).EventEmitter;\n</code></pre>\n<ul>\n<li><a href=\"http://jscs.info/rule/disallowSpaceAfterObjectKeys\"><code>disallowSpaceAfterObjectKeys</code></a> - Allow no space after key with <code>align</code> option. (Andrey Ermakov)</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// this should be allowed</span>\n<span class=\"hljs-keyword\">var</span> f = {\n    <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-string\">\"x\"</span>: <span class=\"hljs-number\">2</span>\n};\n</code></pre>\n<ul>\n<li><a href=\"http://jscs.info/rule/disallowUnusedParams\"><code>disallowUnusedParams</code></a> - correctly output unused param name (Oleg Gaidarenko)</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Should output:</span>\n<span class=\"hljs-comment\">// Param unusedParam is not used at input</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">unusedParam</span>) </span>{}\n</code></pre>\n<ul>\n<li><a href=\"http://jscs.info/rule/requireDollarBeforejQueryAssignment\"><code>requireDollarBeforejQueryAssignment</code></a> - validate all keys (Brian Dixon)</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// check all keys</span>\n<span class=\"hljs-keyword\">var</span> x = {\n  bar: <span class=\"hljs-number\">1</span>,\n  foo: $(<span class=\"hljs-string\">\".foo\"</span>) <span class=\"hljs-comment\">// error here</span>\n};\n</code></pre>\n<ul>\n<li><a href=\"http://jscs.info/rule/requireDollarBeforejQueryAssignment\"><code>requireDollarBeforejQueryAssignment</code></a> - Ignore array\ndestructuring (Simen Bekkhus)</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Don't error with this</span>\n<span class=\"hljs-keyword\">const</span> [beep, boop] = meep;\n<span class=\"hljs-keyword\">var</span> $s = $(<span class=\"hljs-string\">\"#id\"</span>)\n</code></pre>\n<ul>\n<li><code>CLI</code> - &quot;auto-configure&quot; argument should always be at the end\n(Oleg Gaidarenko)</li>\n</ul>\n<pre><code class=\"lang-bash\">// correct autoconfigure args\njscs --autoconfigure ./files/here\n</code></pre>\n<ul>\n<li><code>js-file</code> - make parser not confuse token types (Oleg Gaidarenko)</li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Fixes issues with keywords like with</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> </span>{\n  <span class=\"hljs-keyword\">catch</span>() {}\n}\n</code></pre>\n<p>Again, a big thanks to everything using <a href=\"jscs.info\">JSCS</a>! Definitely continue to report any bugs and new ideas! We always appreciate any help/PRs!</p>\n<p>We&#39;ll probably be moving more of the new rule/option issues to <a href=\"https://github.com/jscs-dev/node-jscs/issues?q=label%3Aorphaned+is%3Aclosed\"><code>orphaned</code></a> which just means that they are on hold but anyone can still PR it or reopen it later. Remember to tweet at us at <a href=\"https://twitter.com/jscs_dev\">@jscs_dev</a> and chat with us on our <a href=\"https://gitter.im/jscs-dev/node-jscs\">gitter room</a>!</p>\n<p>@hzoo</p>\n<h2 id=\"version-2-3-0-https-github-comjscs-devnode-jscscomparev2-2-1-v2-3-0-10-07-2015\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.2.1...v2.3.0\">2.3.0</a> (10-07-2015):</h2>\n<p>A quick update! A few more rules, preset updates, and bug fixes!</p>\n<blockquote>\n<p>If anyone missed it from the previous minor release, we&#39;ve been working on <a href=\"https://github.com/cst/cst\">https://github.com/cst/cst</a>. This will help us continue to autofix more complex rules in the future. If you want to know more about it check out the <a href=\"https://github.com/jscs-dev/node-jscs/blob/master/CHANGELOG.md#-つ-_-つ--give-cst\">changelog</a>.</p>\n</blockquote>\n<p>Now that we&#39;re done implementing all of ES6 the next major thing we&#39;ll be working on is intergrating CST into JSCS.</p>\n<h3 id=\"new-rules\">New Rules:</h3>\n<h4 id=\"-disallowidenticaldestructuringnames-http-jscs-inforuledisallowidenticaldestructuringnames-es6-henry-zhu\"><a href=\"http://jscs.info/rule/disallowIdenticalDestructuringNames\"><code>disallowIdenticalDestructuringNames</code></a> (ES6) (Henry Zhu)</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Valid for \"disallowIdenticalDestructuringNames\": true</span>\n<span class=\"hljs-keyword\">var</span> {left, top} = obj; <span class=\"hljs-comment\">// shorthand</span>\n<span class=\"hljs-keyword\">var</span> {left, top: topper} = obj; <span class=\"hljs-comment\">// different identifier</span>\n<span class=\"hljs-keyword\">let</span> { [key]: key } = obj; <span class=\"hljs-comment\">// computed property</span>\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Invalid for \"disallowIdenticalDestructuringNames\": true</span>\n<span class=\"hljs-keyword\">var</span> {left: left, top: top} = obj;\n</code></pre>\n<h4 id=\"-disallownestedternaries-http-jscs-inforuledisallownestedternaries-brian-dixon\"><a href=\"http://jscs.info/rule/disallowNestedTernaries\"><code>disallowNestedTernaries</code></a> (Brian Dixon)</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Valid for \"disallowNestedTernaries\": \"true\"</span>\n<span class=\"hljs-comment\">// Valid for \"disallowNestedTernaries\": { \"maxLevel\": 0 }</span>\n<span class=\"hljs-keyword\">var</span> foo = (a === b) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Invalid for \"disallowNestedTernaries\": true</span>\n<span class=\"hljs-comment\">// Valid for \"disallowNestedTernaries\": { \"maxLevel\": 0 }</span>\n<span class=\"hljs-keyword\">var</span> foo = (a === b)\n  ? (a === c)\n    ? <span class=\"hljs-number\">1</span>\n    : <span class=\"hljs-number\">2</span>\n  : (b === c)\n    ? <span class=\"hljs-number\">3</span>\n    : <span class=\"hljs-number\">4</span>;\n</code></pre>\n<h4 id=\"-requirespaceaftercomma-http-jscs-inforulerequirespaceaftercomma-brian-dixon\"><a href=\"http://jscs.info/rule/requireSpaceAfterComma\"><code>requireSpaceAfterComma</code></a> (Brian Dixon)</h4>\n<blockquote>\n<p>To match <a href=\"http://jscs.info/rule/requireSpaceBeforeComma\">requireSpaceBeforeComma</a></p>\n</blockquote>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Valid for \"requireSpaceAfterComma\": true</span>\n<span class=\"hljs-keyword\">var</span> a, b;\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Invalid for \"requireSpaceAfterComma\": true</span>\n<span class=\"hljs-keyword\">var</span> a,b;\n</code></pre>\n<h3 id=\"preset-updates\">Preset Updates:</h3>\n<ul>\n<li>Preset: add more comma rules to jquery and airbnb presets (Oleg Gaidarenko) <a href=\"https://github.com/jscs-dev/node-jscs/commit/94f175eec822f62528e6e5ca5aab0eb1de037243\"><code>94f175e</code></a></li>\n<li>Preset: <code>wordpress</code> - change <code>requireCamelCaseOrUpperCaseIdentifiers</code> from <code>true</code> to <code>ignoreProperties</code> <a href=\"https://github.com/jscs-dev/node-jscs/commit/58ba030744e8c7e55fa40a08bf19e89fc93a7eed\"><code>58ba037</code></a></li>\n</ul>\n<h3 id=\"bug-fixes\">Bug Fixes:</h3>\n<ul>\n<li>Fix: <code>disallowParenthesesAroundArrowParam</code> - account for non-identifiers (<code>RestElement</code>, <code>ArrayPattern</code>) correctly (Henry Zhu) <a href=\"https://github.com/jscs-dev/node-jscs/commit/bcfaa5192b09391bdec31adecab14d3861817c8a\"><code>bcfaa51</code></a> <a href=\"https://github.com/jscs-dev/node-jscs/issues/1831\">#1831</a></li>\n<li>Fix: <code>disallowCommaBeforeLineBreak</code> correctly handle empty object (Oleg Gaidarenko)\n<a href=\"https://github.com/jscs-dev/node-jscs/commit/6571ebbbf29e5b96be45ade585e4676de3c2817d\"><code>6571ebb</code></a> <a href=\"https://github.com/jscs-dev/node-jscs/issues/1841\">#1841</a></li>\n</ul>\n<p>Again, a big thanks to everything using JSCS! Definitely continue to report any bugs and new ideas! We always appreciate any help/PRs as we don&#39;t have that many resources!</p>\n<p>@hzoo</p>\n<h3 id=\"other\">Other</h3>\n<ul>\n<li>disallowDanglingUnderscores: correct documentation (Oleg Gaidarenko)</li>\n<li>Docs: <code>disallowMultipleVarDecl</code> typo (ValYouW)</li>\n<li>Docs: couple small fixes (Oleg Gaidarenko)</li>\n<li>Internal: <code>Checker</code> - return correct arguments for excluded files (Oleg Gaidarenko)</li>\n<li>Misc: remove babelType and just use node.type (Henry Zhu)</li>\n<li>Misc: Update CHANGELOG.md (Craig Klementowski)</li>\n<li>Misc: Use Chai (Marat Dulin)</li>\n</ul>\n<h2 id=\"version-2-2-1-https-github-comjscs-devnode-jscscomparev2-2-0-v2-2-1-09-29-2015\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.2.0...v2.2.1\">2.2.1</a> (09-29-2015):</h2>\n<h3 id=\"bug-fix\">Bug Fix:</h3>\n<p>Quick fix related to checker not returning correctly with excluded files.</p>\n<ul>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/commit/f12830a469959f3543c51bfc632fe37292ea6d09\"><code>f12830a</code></a> <a href=\"https://github.com/jscs-dev/node-jscs/issues/1816\">#1816</a><ul>\n<li>Internal: <code>Checker</code> - return correct arguments for excluded files (<a href=\"https://github.com/markelog\">markelog</a>)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"version-2-2-0-https-github-comjscs-devnode-jscscomparev2-1-1-v2-2-0-09-28-2015\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.1.1...v2.2.0\">2.2.0</a> (09-28-2015):</h2>\n<p>Again, it&#39;s been way too long since the last version; we&#39;re going to be releasing more often in the future!</p>\n<p>In this release, we have a nicer <a href=\"http://jscs.info/\">homepage</a>, 5 new rules, 4 more autofixable rules, many new rule options/bug fixes, and a <a href=\"https://github.com/jscs-dev/jscs-jsdoc/blob/master/CHANGELOG.md#v120---2015-09-22\">jscs-jsdoc@1.2.0</a> update.</p>\n<p>We also added support for using YAML in config files, checking JS style in HTML files, and are <strong>trying out some non-stylistic rules</strong> (like <a href=\"http://jscs.info/rule/disallowUnusedParams\"><code>disallowUnusedParams</code></a>)!</p>\n<p>Be on the look out for <a href=\"https://github.com/cst/cst\">https://github.com/cst/cst</a> (just finished ES6 support this weekend) if you haven&#39;t already.</p>\n<h3 id=\"autofixing-support-for-4-more-rules\">Autofixing: Support for 4 more rules!</h3>\n<p>Thanks to <a href=\"https://github.com/markelog\">@markelog</a>, we also have autofix support for the following rules:</p>\n<ul>\n<li><a href=\"http://jscs.info/rule/disallowSemicolons\"><code>disallowSemicolons</code></a></li>\n<li><a href=\"http://jscs.info/rule/requireSemicolons\"><code>requireSemicolons</code></a></li>\n<li><a href=\"http://jscs.info/rule/disallowQuotedKeysInObjects\"><code>disallowQuotedKeysInObjects</code></a></li>\n<li><a href=\"http://jscs.info/rule/requireCapitalizedComments\"><code>requireCapitalizedComments</code></a></li>\n</ul>\n<blockquote>\n<p>We will also be labeling which rules don&#39;t support autofixing (only a few).</p>\n</blockquote>\n<h3 id=\"configuration-yaml-support-and-linting-js-in-html-files\">Configuration: YAML support, and linting JS in HTML files</h3>\n<p>We weren&#39;t even thinking about different config formats, but <a href=\"https://github.com/ronkorving\">@ronkorving</a> stepped in and added support for using YAML as a config format!</p>\n<p>So now you can use a <code>.jscsrc / jscs.json</code> (JSON) file or a <code>.jscs.yaml</code> (YAML) file.</p>\n<p><a href=\"https://github.com/lahmatiy\">@lahmatiy</a> has landed support for linting javascript in HTML files with the <a href=\"http://jscs.info/overview#extract\">extract</a> option! Thanks so much for sticking with us for that PR.</p>\n<p>Example usage:</p>\n<pre><code>jscs ./hello.html --extract *.html\n</code></pre><h3 id=\"new-rules\">New Rules</h3>\n<h4 id=\"-disallowmultilineternary-http-jscs-inforuledisallowmultilineternary-brian-dixon\"><a href=\"http://jscs.info/rule/disallowMultiLineTernary\"><code>disallowMultiLineTernary</code></a> (Brian Dixon)</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Valid for \"disallowMultiLineTernary\": true</span>\n<span class=\"hljs-keyword\">var</span> foo = (a === b) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\n</code></pre>\n<h4 id=\"-requiremultilineternary-http-jscs-inforulerequiremultilineternary-brian-dixon\"><a href=\"http://jscs.info/rule/requireMultiLineTernary\"><code>requireMultiLineTernary</code></a> (Brian Dixon)</h4>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Valid for \"requireMultiLineTernary\": true</span>\n<span class=\"hljs-keyword\">var</span> foo = (a === b)\n  ? <span class=\"hljs-number\">1</span>\n  : <span class=\"hljs-number\">2</span>;\n</code></pre>\n<h4 id=\"-disallowtabs-http-jscs-inforuledisallowtabs-mike-ottum\"><a href=\"http://jscs.info/rule/disallowTabs\"><code>disallowTabs</code></a> (Mike Ottum)</h4>\n<p>It disallows tab characters everywhere!</p>\n<h4 id=\"-disallowunusedparams-http-jscs-inforuledisallowunusedparams-oleg-gaidarenko\"><a href=\"http://jscs.info/rule/disallowUnusedParams\"><code>disallowUnusedParams</code></a> (Oleg Gaidarenko)</h4>\n<p>Another cool rule <a href=\"https://github.com/markelog\">@markelog</a> added is actually a non-stylistic rule with autofixing support! It checks to make sure you use the parameters in function declarations and function expressions!</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// Invalid since test is unused</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\">test</span>) </span>{\n}\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">test</span>) </span>{\n}\n</code></pre>\n<h4 id=\"-validatecommentposition-http-jscs-inforulevalidatecommentposition-brian-dixon\"><a href=\"http://jscs.info/rule/validateCommentPosition\"><code>validateCommentPosition</code></a> (Brian Dixon)</h4>\n<p>Comments that start with keywords like <code>eslint, jscs, jshint</code> are ignored by default.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">/* Valid for \"validateCommentPosition\": { position: `above`, allExcept: [`pragma`] } */</span>\n<span class=\"hljs-comment\">// This is a valid comment</span>\n<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// pragma (this comment is fine)</span>\n\n<span class=\"hljs-comment\">/* Valid for \"validateCommentPosition\": { position: `beside` } */</span>\n<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// This is a valid comment</span>\n</code></pre>\n<p>Just as a reminder, you can disable certain AST node types with the <a href=\"http://jscs.info/rule/disallowNodeTypes.html\"><code>disallowNodeTypes</code></a> rule which takes in an array of node types.</p>\n<p>For example: if you want to disable arrow functions for some reason, you could do</p>\n<p><code>&quot;disallowNodeTypes&quot;: [&#39;ArrowFunctionExpression&#39;]</code>.</p>\n<h3 id=\"presets-idiomatic-js-and-other-updates\">Presets: Idiomatic.js and other updates</h3>\n<p>We finally added support for <a href=\"https://github.com/rwaldron/idiomatic.js\">Idiomatic.js</a>! There are a few more rules we still need to add, so leave a comment in the <a href=\"https://github.com/jscs-dev/node-jscs/issues/1065\">issue</a> or create a new one.</p>\n<ul>\n<li><code>Google</code>: remove <code>capitalizedNativeCase</code> option in the JSDoc <code>checkTypes</code> rule (Sam Thorogood)</li>\n<li><code>Idiomatic</code>: add initial preset (Henry Zhu)</li>\n<li><code>jQuery</code>: add <code>disallowSpacesInCallExpression</code> rule to (Oleg Gaidarenko)</li>\n<li><code>jQuery</code>: use <code>ignoreIfInTheMiddle</code> value for <code>requireCapitalizedComments</code> rule (Oleg Gaidarenko)</li>\n<li><code>jQuery</code>: add <code>validateIndentation</code> rule (Oleg Gaidarenko)</li>\n<li><code>Wikimedia</code>: enable <code>es3</code> (James Forrester)</li>\n</ul>\n<h3 id=\"rule-optionschanges\">Rule Options/Changes</h3>\n<ul>\n<li><code>requireSpacesInsideParentheses</code>: <code>ignoreParenthesizedExpression</code> option (Oleg Gaidarenko)</li>\n<li><code>disallowSpaceAfterObjectKeys</code>: add <code>method</code> exception option (Alexander Zeilmann)</li>\n<li><code>disallowSpaceBeforeSemicolon</code>: add <code>allExcept</code> option (Oleg Gaidarenko)</li>\n<li><code>requireCapitalizedComments</code>: add <code>ignoreIfInTheMiddle</code> option (Oleg Gaidarenko)</li>\n<li><code>disallowSpacesInsideParentheses</code>: add quotes option (Oleg Gaidarenko)</li>\n<li><code>requireSpacesInsideParentheses</code>: add quotes option (Oleg Gaidarenko)</li>\n<li><code>requireCapitalizedComments</code>: add default exceptions (alawatthe)</li>\n<li><code>requireArrowFunctions</code>: create an error on function bind (Henry Zhu)</li>\n<li>Misc: Bucket all rules into groups, test case to ensure new rules have a group (indexzero)</li>\n</ul>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<p>We fixed a bug with exit codes not matching the <a href=\"https://github.com/jscs-dev/node-jscs/wiki/Exit-codes\">wiki</a> (Oleg Gaidarenko).</p>\n<ul>\n<li><code>disallowParenthesesAroundArrowParam</code>: fix check for params (Henry Zhu)</li>\n<li><code>spacesInsideBrackets</code>: account for block comments (Oleg Gaidarenko)</li>\n<li><code>disallowSemicolons</code>: ignore needed exceptions (Oleg Gaidarenko)</li>\n<li><code>spacesInFunctionExpression</code>: account for async functions (MikeMac)</li>\n<li><code>disallowSpaceBeforeSemicolon</code>: do not trigger error if it&#39;s first token (Oleg Gaidarenko)</li>\n<li><code>requireCapitalizedComments</code>: consider edge cases (Oleg Gaidarenko)</li>\n<li><code>requireSemicolons</code>: handle phantom cases (Oleg Gaidarenko)</li>\n<li><code>spaceAfterObjectKeys</code>: fix for computed properties with more than one token (Henry Zhu)</li>\n<li>Exclude <code>.git</code> folder by default (Vladimir Starkov)</li>\n</ul>\n<h3 id=\"jsdoc-updates\">JSDoc updates</h3>\n<ul>\n<li>New Rule: <a href=\"http://jscs.info/rule/jsDoc#checkparamexistence\"><code>checkParamExistence</code></a></li>\n<li>New Rule: <a href=\"http://jscs.info/rule/jsDoc#requirereturndescription\"><code>requireReturnDescription</code></a></li>\n<li><a href=\"http://jscs.info/rule/jsDoc#enforceexistence\"><code>enforceExistence</code></a> add <code>paramless-procedures</code> exception</li>\n</ul>\n<h3 id=\"what-s-jscs\">What&#39;s JSCS?</h3>\n<p>The homepage now showcases what JSCS actually does. We were missing a :cat: picture as well so ...</p>\n<p><img src=\"http://i.imgur.com/sIIoLDI.png\" alt=\"cat\"></p>\n<blockquote>\n<p>If you have any feedback on the site, leave a comment at our <a href=\"https://github.com/jscs-dev/jscs-dev.github.io\">website repo</a>.</p>\n</blockquote>\n<h3 id=\"༼-つ-◕_◕-༽つ-give-cst\">༼ つ ◕_◕ ༽つ  GIVE CST!</h3>\n<p>We&#39;ve also been busy working on <a href=\"https://github.com/cst/cst\">https://github.com/cst/cst</a>.</p>\n<p><img src=\"https://raw.githubusercontent.com/cst/cst/master/docs/cst-example.png\" alt=\"cst\"></p>\n<p>CST stands for <code>Concrete Syntax Tree</code>, as opposed to AST which stands for <code>Abstract Syntax Tree</code>. CST uses a regular AST but adds support for information that you normally don&#39;t care about but is vital for a style checker, e.g. spaces, newlines, comments, semicolons, etc. Using a CST will allow us to support more complex autofixing such as adding curly braces while retaining other formatting or much larger transformations.</p>\n<p>We just finished supporting all of ES6 this past weekend. <a href=\"https://github.com/cst/cst/issues/39\">ES6+</a> and <a href=\"https://github.com/cst/cst/issues/3\">JSX</a> support is also in progress! We&#39;ll be integrating CST into JSCS in the <a href=\"https://github.com/jscs-dev/node-jscs/tree/3.0\">3.0 branch</a>, so look out for that soon (CST uses babel as its AST parser).</p>\n<p>If you&#39;re interested, there was a lot of discussion on CSTs at the <a href=\"https://github.com/estree/estree/issues/41\">ESTree</a> repo.</p>\n<hr>\n<p>Hopefully we can get more community help for JSCS! (check out <a href=\"https://github.com/jscs-dev/node-jscs/blob/master/CONTRIBUTING.md#how-you-can-help\">CONTRIBUTING.md</a> if you&#39;re interested)</p>\n<p>We have a <a href=\"https://github.com/jscs-dev/node-jscs/labels/beginner-friendly\"><code>beginner-friendly</code></a> tag for people to get started on issues.</p>\n<h3 id=\"small-personal-sidenote\">Small personal sidenote</h3>\n<p>Thanks to everyone who has been submitting issues/PRs!</p>\n<p>It&#39;s been almost a year since I (@hzoo) really started contributing to open source. It&#39;s still crazy to me that my first pull request was just adding the <a href=\"https://github.com/jscs-dev/node-jscs/pull/677\">table of contents</a>. I was so excited to contribute that day!</p>\n<p>Little did I know I would slowly do more and more - typo fixes, docs changes, bugfixes, rules, and then eventually become part of the team! I&#39;ve become a better communicator and become more confident to give and take constructive feedback. I&#39;m currently still figuring out how to review PRs, label issues, do changelogs (like right now), release, etc.</p>\n<p>So much has happened after starting that one simple contribution! Even though I know a lot more about ASTs, javascript/node, and programming style, it all adds up to much more than that technical knowledge.</p>\n<p>Contributing here helped me make PRs to a lot of other projects (in my case babel, eslint, and others). I understand more that it doesn&#39;t take a special person to start helping out. I really hope to encourage others to join our awesome open source community at large!</p>\n<p><a href=\"https://github.com/hzoo\">@hzoo</a></p>\n<h3 id=\"other-awesome-changes\">Other Awesome Changes!</h3>\n<ul>\n<li>CLI: correct <code>describe</code> description (Roman Dvornov)</li>\n<li>ClI: move <code>handleMaxErrors</code> helper to the more appropriate place (Oleg Gaidarenko)</li>\n<li>CLI: set <code>maxErrors</code> to <code>Infinity</code> for autoconfigure (Henry Zhu)</li>\n<li>disallowSemicolons: simplify <code>disallowSemicolons</code> rule (Oleg Gaidarenko)</li>\n<li>Docs: another portion of changelog fixes (Oleg Gaidarenko)</li>\n<li>Docs: Correct documentation for <code>requireCapitalizedComments</code> (Alexander Zeilmann)</li>\n<li>Docs: <code>disallowParenthesesAroundArrowParam</code> (Samuel Lindblom)</li>\n<li>Docs: fix markdown for <code>disallowMultipleSpaces</code> (Marián Rusnák)</li>\n<li>Docs: fix markdown in <code>requireBlocksOnNewline</code> (Marián Rusnák)</li>\n<li>Docs: fix markdown in <code>requireCapitalizedComments</code> (Marián Rusnák)</li>\n<li>Docs: fixup broken links (Henry Zhu)</li>\n<li>Docs: improve documentation for various rules (oredi)</li>\n<li>Docs: improve documentation for various rules (oredi)</li>\n<li>Docs: remove unnecessary paragraph, use js syntax highlighting (Dennis Wissel)</li>\n<li>Docs: small changelog corrections (Oleg Gaidarenko)</li>\n<li>Docs: small correction for the <code>disallowEmptyBlocks</code> rule (Oleg Gaidarenko)</li>\n<li>js-file: add <code>getScope</code> method (Oleg Gaidarenko)</li>\n<li>js-file: add <code>removeToken</code> method (Oleg Gaidarenko)</li>\n<li>js-file: all return values should be consistent (Oleg Gaidarenko)</li>\n<li>js-file: check argument of the <code>file#getNodeRange</code> (Oleg Gaidarenko)</li>\n<li>js-file: do not interpret html as grit instructions (Oleg Gaidarenko)</li>\n<li>js-file: make grit regexp case-insensitive (Oleg Gaidarenko)</li>\n<li>Misc: add <code>only</code> property to <code>reportAndFix</code> assert helper (Oleg Gaidarenko)</li>\n<li>Misc: make jslint happy (Oleg Gaidarenko)</li>\n<li>Misc: make lint happy (Oleg Gaidarenko)</li>\n<li>Misc: use node &quot;4&quot; instead of node &quot;4.0&quot; in travis (Henry Zhu)</li>\n<li>Misc: correct code style violations (Oleg Gaidarenko)</li>\n<li>Misc: add node 4.0 to travis (Henry Zhu)</li>\n<li>Misc: autofix tests for rules that are not supported by default presets (Oleg Gaidarenko)</li>\n<li>Misc: change default mocha reporter (Oleg Gaidarenko)</li>\n<li>Misc: disable duplicative jshint check for semicolons (Oleg Gaidarenko)</li>\n<li>Misc: do not show console.error at the test run (Oleg Gaidarenko)</li>\n<li>Misc: increase coverage and use console.error for maxError output (Oleg Gaidarenko)</li>\n<li>Misc: increase rules coverage (Oleg Gaidarenko)</li>\n<li>Misc: use full lodash package (Oleg Gaidarenko)</li>\n<li>Misc: add <code>requireSemicolons</code> rule to our jscsrc (Oleg Gaidarenko)</li>\n<li><code>requireCapitalizedComments</code>: remove merge artefacts (Oleg Gaidarenko)</li>\n<li><code>*Semicolons</code>: increase coverage (Oleg Gaidarenko)</li>\n<li>String-checker: pass <code>file</code> instance to <code>_fix</code> method (Oleg Gaidarenko)</li>\n<li>Strip <code>BOM</code> from config files (Jonathan Wilsson)</li>\n<li>Support <code>null</code> and <code>-1</code> values for <code>maxErrors</code> option (Daniel Anechitoaie)</li>\n<li>Tests: improve <code>reportAndFix</code> assertion helper (Oleg Gaidarenko)</li>\n<li>Utils: add <code>isPragma</code> method (Brian Dixon)</li>\n</ul>\n<h2 id=\"version-2-1-1-https-github-comjscs-devnode-jscscomparev2-1-0-v2-1-1\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.1.0...v2.1.1\">2.1.1</a></h2>\n<h3 id=\"overview\">Overview</h3>\n<p>This release consists mostly of bug-fixes. Check them out – there are a lot of them!</p>\n<p>We also managed to squeeze two new rules - <a href=\"http://jscs.info/rule/requireSpacesInsideParenthesizedExpression.html\">requireSpacesInsideParenthesizedExpression</a> and <a href=\"http://jscs.info/rule/disallowSpacesInsideParenthesizedExpression.html\">disallowSpacesInsideParenthesizedExpression</a>, increase performance, and improve ES6 support.</p>\n<h4 id=\"fix-regarding-global-jscs-installs-and-plugins\">Fix regarding global jscs installs and plugins</h4>\n<p>One of the biggest issues fixed: a <strong>global</strong> jscs install can finally load <strong>local</strong> extensions (à la gulp style) like error-filters, plugins, additional rules, and presets.</p>\n<p>This will fix issues with using a custom preset with something like <a href=\"https://packagecontrol.io/packages/SublimeLinter-jscs\">SublimeLinter</a> which uses the global jscs install.</p>\n<ul>\n<li>To make a custom preset, you need to publish a npm package with a jscs config file</li>\n<li>We recommend the package name starts with <code>jscs-preset-</code> or with <code>jscs-config-</code> to help with searching for presets on npm and defining it in your config</li>\n<li>This would allow you to specify your preset more succinctly: <code>”preset”: “awesome”</code> instead of <code>”preset”: “jscs-preset-awesome”</code></li>\n<li>You can also share multiple presets in one package with <code>”preset”: “awesome/super-awesome”</code>, provided that you have <code>super-awesome.{json, js}</code> in your package root directory</li>\n<li>Create a <code>jscs.json</code> file to store your jscs config</li>\n<li>In your <code>package.json</code>, set the <code>main</code> field to <code>jscs.json</code></li>\n</ul>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// example package.json in `jscs-config-awesome`</span>\n{\n  “name”: “jscs-config-awesome”,\n  “version”: “<span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.0</span>”,\n  “main”: “jscs.json”\n}\n\n<span class=\"hljs-comment\">// example .jscsrc using a custom preset</span>\n<span class=\"hljs-comment\">// assuming the preset package name is `jscs-config-awesome`</span>\n{\n  “preset”: “awesome”,\n  “disallowEmptyBlocks”: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// example of disabling a preset rule with false</span>\n}\n</code></pre>\n<p>We will add more comprehensive documentation for this feature a bit later, so stay tuned.</p>\n<h4 id=\"disable-a-rule-with-false-or-null\">Disable a rule with <code>false</code> or <code>null</code></h4>\n<p>You can use <code>false</code> (instead of only <code>null</code>) to disable a rule (such as in a preset). This was a point of confusion for newer users. To disable a rule you can do:</p>\n<pre><code class=\"lang-js\">{\n  “preset”: “airbnb”,\n  “disallowEmptyBlocks”: <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// disabling a rule with null</span>\n  “disallowSpacesInCallExpression”: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// disabling a rule with false</span>\n}\n</code></pre>\n<h3 id=\"new-rules\">New Rules</h3>\n<ul>\n<li>New Rule: SpacesInsideParenthesizedExpression (Richard Gibson)</li>\n</ul>\n<h3 id=\"enhancements\">Enhancements</h3>\n<ul>\n<li>Configuration: disable any rule if its value equals to &quot;false” (Oleg Gaidarenko)</li>\n</ul>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li>requireDollarBeforejQueryAssignment: Ignore destructuring assignment (Simen Bekkhus)</li>\n<li>validateIdentation: fix on empty switch blocks (Henry Zhu)</li>\n<li>disallowQuotedKeysInObjects: fix allowing quoted non-reserved keys (Alexej Yaroshevich)</li>\n<li>disallowParenthesesAroundArrowParam: allow destructuring of param (Henry Zhu)</li>\n<li>requireTrailingComma: correct error message (monk-time)</li>\n<li>requirePaddingNewLinesAfterBlocks: do not report arrow fn chaining (Oleg Gaidarenko)</li>\n<li>safeContextKeyword: miss destructuring assignment (Oleg Gaidarenko)</li>\n<li>disallowNodeTypes: correct configure error (Alexander Zeilmann)</li>\n<li>requireDollarBeforejQueryAssignment: Ignore destructuring assignment (Simen Bekkhus)</li>\n<li>paddingNewlinesInBlocks: add exceptions and open/close options (Kai Cataldo)</li>\n<li>requireSpacesInAnonymousFunctionExpression: add allExcept option (Ken Sheedlo)</li>\n<li>curlyBraces: support <code>for..of</code> statements (regseb)</li>\n</ul>\n<h3 id=\"misc\">Misc</h3>\n<ul>\n<li>Configuration: allow load of external entities from external preset (Oleg Gaidarenko)</li>\n<li>CLI:Configuration: load local jscs modules if present (Oleg Gaidarenko)</li>\n<li>JsFile: Improve getNodeByRange performance (Richard Gibson)</li>\n<li>disallowQuotedKeysInObjects: rework tests and deprecate allButReserved value (Alexej Yaroshevich)</li>\n</ul>\n<h3 id=\"docs\">Docs</h3>\n<ul>\n<li>Docs: update examples on how to disable (Oleg Gaidarenko)</li>\n<li>Docs: improve documentation for various rules (oredi)</li>\n<li>Docs: fix typos in examples for disallowSpaceAfterObjectKeys (Yoni Medoff)</li>\n<li>Docs: improve documentation for various rules (oredi)</li>\n<li>Docs: small changelog corrections (Oleg Gaidarenko)</li>\n<li>Docs: make it clearer node_modules is excluded, and ! can be used to include (Henry Zhu)</li>\n</ul>\n<h2 id=\"version-2-1-0-https-github-comjscs-devnode-jscscomparev2-0-0-v2-1-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v2.0.0...v2.1.0\">2.1.0</a></h2>\n<h3 id=\"overview\">Overview</h3>\n<p>In this release, we added three more rules: two of them are ES6-only, they &quot;protect&quot; you\nfrom the downside of arrow functions (see <a href=\"http://jscs.info/rule/disallowArrowFunctions.html\">1</a> and <a href=\"http://jscs.info/rule/disallowShorthandArrowFunctions.html\">2</a> for an explanation of why you might want to enable them) and another universal one if you <a href=\"http://jscs.info/rule/validateOrderInObjectKeys.html\">like</a> to keep your object neat and tidy.</p>\n<p>Airbnb, jQuery, and Wordpress presets are now using some of the new rules we added in the previous release. Whereas, the wikimedia preset is now less strict for <a href=\"http://jscs.info/rule/jsDoc.html\">JSDoc</a> comments.</p>\n<p>This release also includes a JSON reporter, lots of bug fixes and enhancements, plus couple new rule values for your linting pleasure.</p>\n<h3 id=\"presets\">Presets</h3>\n<ul>\n<li>Preset: define exclusions for wordpress preset (Weston Ruter)</li>\n<li>Preset: add couple new rules to airbnb preset (Christophe Hurpeau)</li>\n<li>Preset: Set jsDoc.checkTypes to &quot;strictNativeCase&quot; for Wikimedia (Timo Tijhof)</li>\n<li>Preset: add &quot;disallowSpaceBeforeComma&quot; rule to jquery preset (Oleg Gaidarenko)</li>\n</ul>\n<h3 id=\"new-rules\">New rules</h3>\n<ul>\n<li>New Rule: disallowShorthandArrowFunctions (Jackson Ray Hamilton)</li>\n<li>New Rule: disallowArrowFunctions (Jackson Ray Hamilton)</li>\n<li>New Rule: validateOrderInObjectKeys (Rui Marinho)</li>\n</ul>\n<h3 id=\"new-rule-values\">New rule values</h3>\n<ul>\n<li>disallowEmptyBlocks: allow blocks with comments (Michael Robinson)</li>\n<li>requirePaddingNewlinesAfterUseStrict: allow immediate &quot;require&quot; (Michael Robinson)</li>\n<li>requireAnonymousFunctions: Add exception for function declarations (Kai Cataldo)</li>\n<li>requireBlocksOnNewline: Add object option to handle comments (oredi)</li>\n<li>requireTemplateString: string and template string concatentation support (Michelle Bu)</li>\n</ul>\n<h3 id=\"enhancements\">Enhancements</h3>\n<ul>\n<li>Configuration: allow load configs with &quot;.jscsrc&quot; extension (Oleg Gaidarenko)</li>\n<li>Reporters: add new JSON reporter (Roman Blanco)</li>\n<li>Configuration: extend and improve default value of array options (Oleg Gaidarenko)</li>\n<li>SpaceBeforeObject(Keys|Values): support spread in object literals (Ronn Ross)</li>\n<li>SpacesInAnonymousFunctionExpression: consider ES6 &quot;constructor&quot; method (Oleg Gaidarenko)</li>\n<li>validateIndentation: reduce RegExp create count (optimization) (Roman Dvornov)</li>\n<li>validateAlignedFunctionParameters: small simplification (Oleg Gaidarenko)</li>\n<li>disallowEmptyBlocks: should not report empty arrow blocks (Jake Zatecky)</li>\n<li>validateAlignedFunctionParameters: account for arrow functions (Jake Zatecky)</li>\n<li>requirePaddingNewlinesAfterBlocks: ignore parentheses of last item (Christophe Hurpeau)</li>\n</ul>\n<h3 id=\"bugs\">Bugs</h3>\n<ul>\n<li>requireMatchingFunctionName: fix critical bug and add tests (Alexej Yaroshevich)</li>\n<li>disallowSpacesInCallExpression: report only on a node&#39;s round brace (Joel Kemp)</li>\n<li>disallowSpacesInCallExpression: consider fitting parentheses case (Oleg Gaidarenko)</li>\n<li>CLI: correct reporter error (Roman Dvornov)</li>\n<li>SpacesIn*: fix for shorthand methods/class methods, update tests (Henry Zhu)</li>\n<li>requireAlignedObjectValues: fix computed keys with MemberExpressions (Henry Zhu)</li>\n<li>requireParenthesesAroundArrowParam: account for a single rest parameter (Henry Zhu)</li>\n<li>requirePaddingNewLinesBeforeLineComments: fix for newlines above comment (Henry Zhu)</li>\n</ul>\n<h3 id=\"docs\">Docs</h3>\n<ul>\n<li>Docs: Fix a typo in requireVarDeclFirst (Chayoung You)</li>\n<li>Docs: point to jscs.info for the list of maintainers (Oleg Gaidarenko)</li>\n<li>Docs: improve preset documentation (Oleg Gaidarenko)</li>\n<li>Docs: Fix typos in requireCapitalizedComments (Chayoung You)</li>\n<li>Docs: Fix a typo in maximumNumberOfLines (Chayoung You)</li>\n<li>Docs: Add justifications for arrow function rules (Jackson Ray Hamilton)</li>\n<li>Docs: correct docs for the&quot; disallowNodeTypes&quot; rule (Dmitry Semigradsky)</li>\n<li>Docs: Fixed typo, update link for clarity/correct URL (Kai Cataldo)</li>\n<li>Docs: Fixed typo in disallowSpaceAfterObjectKeys (Brian Ng)</li>\n<li>Docs: use correct links to new rules (Pavel Zubkou)</li>\n<li>Docs: bring back coveralls badge (Oleg Gaidarenko)</li>\n<li>Docs: Error 404 on the requireObjectKeysOnNewLine link (Roman Nuritdinov)</li>\n<li>Docs: Link to built-in JSCS plugin for JetBrains IDEs (Simen Bekkhus)</li>\n<li>Docs: improve and correct the changelog (Oleg Gaidarenko)</li>\n<li>Docs: small example improvement for &quot;disallowSpaceBeforeComma&quot; rule (Oleg Gaidarenko)</li>\n</ul>\n<h3 id=\"misc\">Misc</h3>\n<ul>\n<li>requireLineFeedAtFileEnd: Test to ensure IIFE case still reports (Joel Kemp)</li>\n<li>Misc: add Henry to list of maintainers (Oleg Gaidarenko)</li>\n<li>Misc: make jshint happy (Oleg Gaidarenko)</li>\n<li>Misc: exclude only problematic module from coverage (Oleg Gaidarenko)</li>\n<li>Misc: once again hide coverage status (Oleg Gaidarenko)</li>\n<li>Misc: correct merge artefact (Oleg Gaidarenko)</li>\n<li>Misc: support spread in object literals (Henry Zhu)</li>\n<li>Misc: update Esprima to 2.5.0 (Henry Zhu)</li>\n<li>Misc: cache <code>node_modules</code> dir in travis CI (Oleg Gaidarenko)</li>\n<li>AutoConfigure: Tests now depend on a preset clone (Joel Kemp)</li>\n<li>Revert &quot;Changelog: use conventional-change...&quot; (Oleg Gaidarenko)</li>\n<li>Changelog: use conventional-changelog and conventional-github-releaser (Steve Mao)</li>\n</ul>\n<h2 id=\"version-2-0-0-https-github-comjscs-devnode-jscscomparev1-13-1-v2-0-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.13.1...v2.0.0\">2.0.0</a></h2>\n<h3 id=\"overview\">Overview</h3>\n<p>Gosh! We haven’t released a new version in more than two months! What have we done all this time?\nWell, we were working hard on the next big step - 2.0!</p>\n<p>And we’re finally ready to show it to you. We’ve improved JSCS all over the place!</p>\n<h3 id=\"-esnext\"><code>esnext</code></h3>\n<p>It was a big pain to check ES6/JSX code with JSCS, since you had to install special extensions or different parsers. Well, no more of that! Thanks to all the hard work of the @hzoo, now you can just write <code>&quot;esnext&quot;: true</code> in your config or execute JSCS from the CLI with the <code>--esnext</code> flag.\nNow all that new fancy code will be examined without any hassle, as <a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841\">decorators</a>, <a href=\"https://github.com/zenparsing/es-function-bind\">function bind (::)</a> operator, and all valid babel code can be checked by JSCS.</p>\n<p>We also added seven ES6-only rules; see below for more information.</p>\n<h3 id=\"autofixing\">Autofixing</h3>\n<p>We really want to support autofixing for as many rules as possible. But as it turns out, we are at forefront of this problem; it’s really hard to change the code without affecting unrelated instructions.</p>\n<p>What we need is a <a href=\"https://en.wikipedia.org/wiki/Parse_tree\">Concrete Syntax Tree</a>, instead of the <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">AST</a> + tokens structures that we use now. Unfortunately, there is no CST standard for JavaScript at the moment – this is why we decided to step up and come up with our vision of a CST - <a href=\"https://github.com/mdevils/cst\">https://github.com/mdevils/cst</a>. Currently, we are working with the <a href=\"https://github.com/estree/estree/issues/41\">estree</a> team on this proposal – hoping the development of this crucial part of JavaScript parsing will move faster.</p>\n<p>Meanwhile, using some workarounds and hacks, we managed to support autofixing for 4 more rules:</p>\n<ul>\n<li><a href=\"http://jscs.info/rule/requireTrailingComma.html\">requireTrailingComma</a></li>\n<li><a href=\"http://jscs.info/rule/disallowTrailingComma.html\">disallowTrailingComma</a></li>\n<li><a href=\"http://jscs.info/rule/disallowTrailingWhitespace.html\">disallowTrallingWhitespace</a></li>\n<li><a href=\"http://jscs.info/rule/validateQuoteMarks.html\">validateQuoteMarks</a></li>\n</ul>\n<h3 id=\"new-rules\">New rules</h3>\n<p>There are 31 new rules, including 16 rules for JSDoc <a href=\"http://jscs.info/rule/jsDoc.html\">validation</a>, and 7 ES6-only rules:</p>\n<ul>\n<li><a href=\"http://jscs.info/rule/requireSpaceBeforeComma.html\">requireSpaceBeforeComma</a>\nRequire spaces before commas</li>\n<li><a href=\"http://jscs.info/rule/disallowSpaceBeforeComma.html\">disallowSpaceBeforeComma</a>\nDisallow spaces before commas</li>\n<li><a href=\"http://jscs.info/rule/requireVarDeclFirst.html\">requireVarDeclFirst</a>\nRequires <code>var</code> declaration to be on the top of an enclosing scope</li>\n<li><a href=\"http://jscs.info/rule/disallowSpaceBeforeSemicolon.html\">disallowSpaceBeforeSemicolon</a>\nDisallows spaces before semicolons.</li>\n<li><a href=\"http://jscs.info/rule/requireMatchingFunctionName.html\">requireMatchingFunctionName</a>\nRequires function names to match member and property names.</li>\n<li><a href=\"http://jscs.info/rule/disallowNodeTypes.html\">disallowNodeTypes</a>\nDisallow use of certain <a href=\"https://github.com/jquery/esprima/blob/758196a1c5dd20c3ead6300283a1112428bc7045/esprima.js#L108-L169\">node types</a> (from Esprima/ESTree).</li>\n<li><a href=\"http://jscs.info/rule/requireObjectKeysOnNewLine.html\">requireObjectKeysOnNewLine</a>\nRequires placing object keys on new line</li>\n<li><a href=\"http://jscs.info/rule/disallowObjectKeysOnNewLine.html\">disallowObjectKeysOnNewLine</a>\nDisallows placing object keys on new line</li>\n</ul>\n<h4 id=\"new-es6-only-rules\">New ES6-only rules</h4>\n<ul>\n<li><a href=\"http://jscs.info/rule/disallowParenthesesAroundArrowParam.html\">disallowParenthesesAroundArrowParam</a>\nDisallows parentheses around arrow function expressions with a single parameter.</li>\n<li><a href=\"http://jscs.info/rule/requireArrowFunctions.html\">requireArrowFunctions</a>\nRequires that arrow functions are used instead of anonymous function expressions in callbacks.</li>\n<li><a href=\"http://jscs.info/rule/requireNumericLiterals.html\">requireNumericLiterals</a>\nRequires use of binary, hexadecimal, and octal literals instead of <code>parseInt</code>.</li>\n<li><a href=\"http://jscs.info/rule/requireParenthesesAroundArrowParam.html\">requireParenthesesAroundArrowParam</a>\nRequires parentheses around arrow function expressions with a single parameter.</li>\n<li><a href=\"http://jscs.info/rule/requireShorthandArrowFunctions.html\">requireShorthandArrowFunctions</a>\nRequire arrow functions to use an expression body when returning a single statement</li>\n<li><a href=\"http://jscs.info/rule/requireSpread.html\">requireSpread</a>\nDisallows using <code>.apply</code> in favor of the spread operator</li>\n<li><a href=\"http://jscs.info/rule/requireTemplateStrings.html\">requireTemplateStrings</a>\nRequires the use of template strings instead of string concatenation.</li>\n</ul>\n<p>There are also a lot of new rule values (see the <a href=\"#changelog\">&quot;Changelog&quot;</a> section) which makes a lot of rules more flexible.</p>\n<p>We also added new rules and values to some presets. If you feel that we’ve missed something, don&#39;t be quiet! Send us a PR and we will surely add the needed rules to your favorite preset.</p>\n<h3 id=\"simplified-inclusion-of-plugins-presets-and-custom-rules\">Simplified inclusion of plugins, presets, and custom rules</h3>\n<p>Since every possible JSCS extension can now be loaded without defining its full path, it is enough to just specify the needed dependency to your project so it can be found by JSCS.</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-string\">\"plugins\"</span>: [<span class=\"hljs-string\">\"./your-local-package\"</span>], <span class=\"hljs-comment\">// Same with `additionalRules` and `preset` options</span>\n  <span class=\"hljs-string\">\"plugins\"</span>: [<span class=\"hljs-string\">\"jscs-your-npm-package\"</span>],\n  <span class=\"hljs-string\">\"plugins\"</span>: [<span class=\"hljs-string\">\"your-npm-package\"</span>], <span class=\"hljs-comment\">// can omit “jscs-” prefix if you want</span>\n}\n</code></pre>\n<h3 id=\"other\">Other</h3>\n<ul>\n<li><p>Support for disabling rules on a <a href=\"http://jscs.info/overview.html#disabling-specific-rules-for-a-single-line\">single line</a> -</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">if</span> (x) y(); <span class=\"hljs-comment\">// jscs:ignore requireCurlyBraces</span>\n<span class=\"hljs-keyword\">if</span> (z) a(); <span class=\"hljs-comment\">// will show the error with `requireCurlyBraces`</span>\n</code></pre>\n</li>\n<li><p>Two new reporters - <code>summary</code> (could be very helpful to acquire full overview of all possible errors in your project) and <code>unix</code>. You could enable them by providing <a href=\"http://jscs.info/overview.html#-reporter-r\"><code>--reporter=&lt;reporter name&gt;</code></a> flag.</p>\n</li>\n<li><p><code>node_modules</code> path is included by default to <a href=\"http://jscs.info/overview.html#excludefiles\"><code>excludeFiles</code></a></p>\n</li>\n<li><p>For every possible error, like missing or corrupted config, JSCS now provides <a href=\"https://github.com/jscs-dev/node-jscs/wiki/Exit-codes\">different</a> exit-codes. We believe it might be useful for piping, editors plugins, etc.</p>\n</li>\n<li><p>JSCS (like any good unix program) now obeys the <a href=\"http://www.linfo.org/rule_of_silence.html\">rule of silence</a>.</p>\n</li>\n</ul>\n<p>And of course, a lot of bug-fixes, improved ES6 support of existing rules, docs, infrastructure changes, etc.</p>\n<p>Although this is major version, we didn&#39;t remove deprecated rule values or changed config format, we expecting to do this in the 3.0 version while switching to CST and fully refactor JSCS code-base.</p>\n<h3 id=\"changelog\">Changelog</h3>\n<p>Backward incompatible changes</p>\n<ul>\n<li>Utils: remove comma from list of binary operators (Oleg Gaidarenko)</li>\n<li>Checker: remove deprecated constructor options (Oleg Gaidarenko)</li>\n<li>Obey the Rule of Silence (Feross Aboukhadijeh)</li>\n<li>Configuration: add ability to load external presets (Oleg Gaidarenko)</li>\n<li>Configuration: small corrections to JSDoc of &quot;node-configuration&quot; module (Oleg Gaidarenko)</li>\n<li>Configuration: small refactoring of the configuration module (Oleg Gaidarenko)</li>\n<li>Configuration: allow &quot;getReporter&quot; method to require node modules (Oleg Gaidarenko)</li>\n<li>Configuration: initial pass on the polymorphic require (Oleg Gaidarenko)</li>\n<li>Checker: more API changes for 2.0 (Oleg Gaidarenko)</li>\n<li>CLI: Differentiate exit codes (Oleg Gaidarenko)</li>\n<li>Misc: set default value of maxErrors option to 50 (Oleg Gaidarenko)</li>\n<li>yodaConditions: remove comparison operators from default set (Oleg Gaidarenko)</li>\n<li>Misc: remove all deprecated rules/tests (Henry Zhu)</li>\n<li>API: allow external entities to be defined without &quot;jscs&quot; prefix (Oleg Gaidarenko)</li>\n<li>Configuration: exclude <code>node_modules/</code> by default (Louis Pilfold)</li>\n<li>CLI: set &quot;maxErrors&quot; to Infinity with enabled &quot;fix&quot; option (Oleg Gaidarenko)</li>\n<li>Misc: change default dialect to es5 and make appropriate changes (Alexej Yaroshevich)</li>\n</ul>\n<p>Autofix</p>\n<ul>\n<li>Autofix: remove merge artefact (Oleg Gaidarenko)</li>\n<li>Autofix: support disallowTrailingComma rule (Oleg Gaidarenko)</li>\n<li>Autofix: support trailing whitespaces and missing commas (Andrzej Wamicz)</li>\n<li>validateQuoteMarks: try out &quot;fix&quot; field (Oleg Gaidarenko)</li>\n</ul>\n<p>Preset</p>\n<ul>\n<li>Preset: requireSemicolons = true for google preset (BigBlueHat)</li>\n<li>Preset: add jsDoc rules to relevant presets (Oleg Gaidarenko)</li>\n<li>Preset: add disallowTrailingWhitespace to MDCS (Joshua Koo)</li>\n<li>Preset: add requireVarDeclFirst rule to the relevant presets (Oleg Gaidarenko)</li>\n<li>Preset: update Wordpress preset (Ivo Julca)</li>\n<li>Preset: add requireCapitalizedComments to jquery and wordpress presets (Oleg Gaidarenko)</li>\n<li>Preset: update mdcs (Joshua Koo)</li>\n<li>Preset: require trailing comma in airbnb preset (Christophe Hurpeau)</li>\n<li>Preset: add missing rules to google preset (Christophe Hurpeau)</li>\n<li>Preset: update airbnb preset (Craig Jennings)</li>\n<li>Preset: update jquery and dependant presets (Oleg Gaidarenko)</li>\n<li>Preset: require spaces in anonymous FE for crockford style (Oleg Gaidarenko)</li>\n<li>Preset: fix requireDotNotation rule value according to es3 changes (Alexej Yaroshevich)</li>\n<li>Preset: remove jsdoc rules from yandex preset (Oleg Gaidarenko)</li>\n</ul>\n<p>New rules</p>\n<ul>\n<li>New rules: add SpaceBeforeComma rules (shashanka)</li>\n<li>New Rule: requireVarDeclFirst (oredi)</li>\n<li>New Rule: add JSDoc rules (Oleg Gaidarenko)</li>\n<li>New Rule: (disallow|require)SpaceBeforeSemicolon (Richard Munroe)</li>\n<li>New Rule: requireMatchingFunctionName (Pavel Strashkin)</li>\n<li>New Rule: requireTemplateStrings (Henry Zhu)</li>\n<li>New Rule: (require|disallow)ParenthesesAroundArrowParam (Henry Zhu)</li>\n<li>New Rule: requireSpread (Henry Zhu)</li>\n<li>New Rule: requireShorthandArrowFunctions (Henry Zhu)</li>\n<li>New Rule: requireArrowFunctions (Henry Zhu)</li>\n<li>New Rule: disallowNodeTypes (Henry Zhu)</li>\n<li>New Rule: requireNumericLiterals (Henry Zhu)</li>\n<li>New Rule: (disallow|require)ObjectKeysOnNewLine (Eli White)</li>\n</ul>\n<p>New rule values</p>\n<ul>\n<li>requireYodaConditions: support an array of operators (Ivo Julca)</li>\n<li>disallowYodaConditions: support an array of operators (Ivo Julca)</li>\n<li>(require|disallow)AnonymousFunctionExpression: account for shorthand methods (Henry Zhu)</li>\n<li>disallowMultipleVarDecl: add exception for require statements (Stefano Sala)</li>\n<li>disallowSpaceAfterObjectKeys: added ignoreAligned option (Andrey Ermakov)</li>\n<li>maximumLineLength: allow function delcarations to exceed limit (Clay Reimann)</li>\n<li>requirePaddingNewLinesAfterBlocks: add &quot;inNewExpressions&quot; to exceptions (Mato Ilic)</li>\n<li>disallowCommaBeforeLineBreak: added allExcept function (Andrey Ermakov)</li>\n<li>requirePaddingNewlinesInBlocks: Add object option to configuration (oredi)</li>\n<li>maximumLineLength: Add exception for long require expressions (Philip Hayes)</li>\n<li>NewlineBeforeBlockStatement: allow settings per block statement type (Dave Hilton)</li>\n<li>validateIndentation: add option to ignore comments (Danny Shternberg)</li>\n</ul>\n<p>Enhancements for ES6 support</p>\n<ul>\n<li>requireSemicolons: Add support for import and export declarations (Roman Dvornov)</li>\n<li>Esprima: Upgrade to 2.4.0 (Joel Kemp)</li>\n<li>requireArrowFunctions: don&#39;t check AssignmentExpression or Property (Henry Zhu)</li>\n<li>SpacesInFunctionDeclaration: check export default function (Henry Zhu)</li>\n<li>AlignedObjectValues: support computed property names (Henry Zhu)</li>\n<li>(disallow|require)SpaceAfterObjectKeys: check object method shorthand (Henry Zhu)</li>\n<li>(require|disallow)SpaceAfterObjectKeys: support computed properties (Henry Zhu)</li>\n<li>SpacesInsideObjectBrackets: Add Check for destructive assignments (Oleg Gaidarenko)</li>\n<li>Misc: use babel-jscs for the esnext option (Henry Zhu)</li>\n<li>requireSemicolons: Don&#39;t warn on class and function exports (Roman Dvornov)</li>\n</ul>\n<p>Inline control</p>\n<ul>\n<li>Errors: Ability to suppress a single line (Louis Pilfold)</li>\n<li>StringChecker: Remove grit processing includes (Tony Ganch)</li>\n</ul>\n<p>New reporters</p>\n<ul>\n<li>Reporters: add new machine readable unix-style reporter (Andreas Tolfsen)</li>\n<li>Reporters: add new summary reporter (oredi)</li>\n</ul>\n<p>Bug fixes</p>\n<ul>\n<li>Revert &quot;New Rule: (disallow|require)SpaceBeforeSemicolon&quot; (Oleg Gaidarenko)</li>\n<li>requireMultipleVarDecl: add exception for require statements (Stefano Sala)</li>\n<li>requirePaddingNewlinesAfterBlocks: initialize exceptions in configure (Eli White)</li>\n<li>disallowSpaceAfterKeywords: fix &quot;else if&quot; case (Henry Zhu)</li>\n<li>String-checker: do not check empty strings (Oleg Gaidarenko)</li>\n<li>requirePaddingNewLinesAfterBlocks: fixing blocks that end with semicolons (Eli White)</li>\n<li>disallowPaddingNewLinesAfterBlocks: fix blocks which end with semicolon (Oleg Gaidarenko)</li>\n<li>disallowSpaceAfterObjectKeys: support for legacy options (Andrey Ermakov)</li>\n<li>requireAlignedObjectValues: do not assert exact amount of spaces before colons (Andrey Ermakov)</li>\n<li>disallowImplicitTypeConversion: Don&#39;t report concat for same string literals (Oleg Gaidarenko)</li>\n<li>disallowSpacesInCallExpression: Extend rule to validate NewExpression (Inian Parameshwaran)</li>\n<li>Iterator: correct &quot;TryStatement&quot; path (Oleg Gaidarenko)</li>\n<li>requirePaddingNewLinesAfterBlocks: consider IIFE case (Oleg Gaidarenko)</li>\n<li>disallowKeywordsOnNewLine: Allow comments before keywords (oredi)</li>\n</ul>\n<p>Docs</p>\n<ul>\n<li>Docs: last minutes updates for 2.0 (Oleg Gaidarenko)</li>\n<li>Docs: update rules sum (Oleg Gaidarenko)</li>\n<li>Docs: add es3 option to OVERVIEW.md (Oleg Gaidarenko)</li>\n<li>Docs: reflect some of the 2.0 changes (Oleg Gaidarenko)</li>\n<li>Docs: clarify space brackets rules description (Oleg Gaidarenko)</li>\n<li>Docs: Remove needless semicolon (yong woo jeon)</li>\n<li>Docs: fix diff range link for 1.13.1 version (Alexej Yaroshevich)</li>\n<li>Docs: add link to commits between minor releases in CHANGELOG (Henry Zhu)</li>\n<li>Docs: Document how to programmatically invoke jscs (K. Adam White)</li>\n<li>Docs: Add and improve docs for inline comments (oredi)</li>\n<li>Docs: add message about demo not working, fix link to team (Henry Zhu)</li>\n<li>Docs: Change label to beginner-friendly (oredi)</li>\n<li>Docs: Mention which tickets are beginner-friendly (Joel Kemp)</li>\n<li>Docs: add &quot;allowEOLComments&quot; option info for disallowMultipleSpaces rule (bigmonkeyboy)</li>\n<li>Docs: correct syntax error for disallowFunctionDeclarations rule (Christophe Hurpeau)</li>\n<li>Misc: Docs: add docs and test for &quot;esprima&quot; config option (Oleg Gaidarenko)</li>\n<li>Docs: correct <code>true</code> value description (Adrian Heine né Lang)</li>\n<li>Docs: add quotes to the &quot;wordpress&quot; preset (raimon)</li>\n<li>Docs: align gitter badge with others (Oleg Gaidarenko)</li>\n<li>Docs: Add gitter room to readme (Joel Kemp)</li>\n<li>Docs: fix table of contents anchor links in contributing.md (Henry Zhu)</li>\n<li>Docs: add protocol to homepage address (Oleg Gaidarenko)</li>\n<li>Docs: update outdated info &amp; fix small issue in jscs config (Oleg Gaidarenko)</li>\n<li>Docs: correct validateAlignedFunctionParameters values (Adrian Heine né Lang)</li>\n<li>Docs: various corrections for the rules page (Oleg Gaidarenko)</li>\n<li>disallowPaddingNewlinesInObjects: Clarify documentation (Ángel Sanz)</li>\n<li>requireSpacesInAnonymousFunctionExpression: fix syntax error in docs (Christophe Hurpeau)</li>\n</ul>\n<p>Misc</p>\n<ul>\n<li>Misc: add disallowTrailingComma rule to jscs config (Oleg Gaidarenko)</li>\n<li>Tests: correct preset examples (Oleg Gaidarenko)</li>\n<li>Misc: use babel-jscs 2.0.0, move jscs-jsdoc to dependencies (Henry Zhu)</li>\n<li>Misc: remove merge artefact (Oleg Gaidarenko)</li>\n<li>String-checker: make &quot;fix&quot; field private (Oleg Gaidarenko)</li>\n<li>Configuration: improve JSDoc notes (Oleg Gaidarenko)</li>\n<li>String-checker: use &quot;fix&quot; field in rule declaration if it exist (Oleg Gaidarenko)</li>\n<li>Errors: add &quot;cast&quot; method (Oleg Gaidarenko)</li>\n<li>Configuration: add &quot;getConfiguredRule&quot; method (Oleg Gaidarenko)</li>\n<li>Configuration: simplify and modulize configuration module (Oleg Gaidarenko)</li>\n<li>Tests: do not define anything if test should not run (Oleg Gaidarenko)</li>\n<li>Iterator: update to latest estraverse and don&#39;t monkeypatch (Oleg Gaidarenko)</li>\n<li>Misc: Add node .12 and io.js to the travis (Oleg Gaidarenko)</li>\n<li>Misc: add support for babel-jscs (Henry Zhu)</li>\n<li>Misc: bump estraverse to 2.x (Oleg Gaidarenko)</li>\n<li>requireArrowFunctions: only error for callbacks (Henry Zhu)</li>\n<li>Tests: Move require-matching-function-name to spec folder (Joel Kemp)</li>\n<li>requirePaddingNewlinesInBlocks: Refactor unit tests (oredi)</li>\n<li>requirePaddingNewlinesBeforeKeywords: Modify special scenarios (oredi)</li>\n<li>Tests: ES2015 Airbnb Preset (Christophe Hurpeau)</li>\n<li>requireTemplateStrings: refactor, check if either node is a string (Henry Zhu)</li>\n<li>Deps: Update JSHint and Lodash.assign (paladox)</li>\n<li>Improve JsFile constructor for better encapsulation (Marat Dulin)</li>\n<li>Refactor integration tests (Marat Dulin)</li>\n<li>Misc: remove extraneous file (Henry Zhu)</li>\n<li>Misc: increase coverage of remaining rules (Henry Zhu)</li>\n<li>disallowParenthesesAroundArrowParam: make exception when using a default parameter (Henry Zhu)</li>\n<li>requireTemplateStrings: improve logic (Oleg Gaidarenko)</li>\n<li>Misc: update dependencies (Henry Zhu)</li>\n<li>Misc: support class methods for various function rules (Henry Zhu)</li>\n<li>Misc: fix test filename for disallowSpaceBeforeObjectValues (Henry Zhu)</li>\n<li>Misc: add intergration tests for &quot;autofix&quot; feature (Oleg Gaidarenko)</li>\n<li>Tests: correct couple assertions (Oleg Gaidarenko)</li>\n<li>Misc: fix jsdoc types with non-standard Promise-star declaration (Alexej Yaroshevich)</li>\n<li>Lint: Add jscs-jsdoc plugin (Alexej Yaroshevich)</li>\n<li>Misc: update dependencies &amp; temporary remove coverage badge (Oleg Gaidarenko)</li>\n<li>Misc: code style fixes (Alexej Yaroshevich)</li>\n<li>Misc: introduce reservedWords instead of utils.isES3 (Alexej Yaroshevich)</li>\n<li>Intergration: correct integration tests for big amount of results (Oleg Gaidarenko)</li>\n<li>validateIndentation: deprecate includeEmptyLines in favour of allExcept (Oleg Gaidarenko)</li>\n</ul>\n<h2 id=\"version-1-13-1-https-github-comjscs-devnode-jscscomparev1-13-0-v1-13-1\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.13.0...v1.13.1\">1.13.1</a></h2>\n<h3 id=\"overview\">Overview</h3>\n<p>Small update for fix distribution of the <code>--esnext</code> CLI option (#1321)</p>\n<h3 id=\"bug-fixes\">Bug fixes</h3>\n<ul>\n<li>CLI: use &quot;esnext&quot; cli option in the configuration module (Oleg Gaidarenko)</li>\n<li>CLI: ensure options to path.resolve are strings (Jason Karns)</li>\n<li>disallowMultipleSpaces: fix configuration error message (Marc Knaup)</li>\n</ul>\n<h3 id=\"docs\">Docs</h3>\n<ul>\n<li>Docs: correct example for the &quot;requireCapitalizedComments&quot; rule (XhmikosR)</li>\n<li>Docs: Update mixup between rules in docstring example (Jérémie Astori)</li>\n<li>Docs: Fix missing quotes in a docstring example (Jérémie Astori)</li>\n</ul>\n<h2 id=\"version-1-13-0-https-github-comjscs-devnode-jscscomparev1-12-0-v1-13-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.12.0...v1.13.0\">1.13.0</a></h2>\n<h3 id=\"overview\">Overview</h3>\n<p>This is mostly an incremental update, which includes important fixes for annoyances like <code>npm ERR! EEXIST, symlink</code> error at <code>npm install</code>. We also improved ES6 support, added seven new rules, three new rule values and now you can declare <code>verbose</code> option at the config.</p>\n<p>There are no preset updates in this release, but if you feel that rules are missing in\nthe supported <a href=\"http://jscs.info/overview.html#presets\">presets</a> - please send us a PR.</p>\n<p>We eagerly wait for the Esprima 2.3 release, since soon after, <code>esnext</code> option will be set to <code>true</code> by default.</p>\n<p>We would like specifically thanks @TheSavior and @hzoo for their hard work on this release.</p>\n<h3 id=\"new-options\">New options</h3>\n<ul>\n<li>New option: add &quot;verbose&quot; option as a config option (Oleg Gaidarenko)</li>\n</ul>\n<h3 id=\"new-rules\">New rules</h3>\n<ul>\n<li>New rule: validateAlignedFunctionParameters (Bram Cordie)</li>\n<li>New rule: (disallow|require)PaddingNewLinesBeforeExport (Eli White)</li>\n<li>New rule: validateNewlineAfterArrayElements (Alexej Yaroshevich)</li>\n<li>New rule: (require |disallow)NamedUnassignedFunctions (Todd Wolfson)</li>\n<li>New rule: maximumNumberOfLines (Henry Zhu)</li>\n<li>New rule: (disallow|require)PaddingNewLinesAfterUseStrict (Eli White)</li>\n<li>New rule: disallowNotOperatorsInConditionals (Henry Zhu)</li>\n</ul>\n<h3 id=\"new-rule-values\">New rule values</h3>\n<ul>\n<li>requirePaddingNewLinesAfterBlocks: add exceptions (Eli White)</li>\n<li>requireSpaceBeforeBlockStatements: add number of spaces argument (Oleg Pesok)</li>\n<li>requireDollarBeforejQueryAssignment: add &quot;ignoreProperties&quot; rule value (Alexej Yaroshevich)</li>\n</ul>\n<h3 id=\"bug-fixes\">Bug fixes</h3>\n<ul>\n<li>paddingNewLinesBeforeLineComments: code and comment on the same line (Oleg Gaidarenko)</li>\n<li>disallowKeywordsOnNewLine: &quot;do..while&quot; on new line (oredi)</li>\n<li>requirePaddingNewLinesBeforeLineComments: first token and not first line (Eli White)</li>\n<li>Errors: should not show rule for &quot;Unsupported rule&quot; error (Oleg Gaidarenko)</li>\n<li>requireOperatorBeforeLineBreak: autofix by moving operator (Nick Santos)</li>\n<li>disallowIdentifierNames: fix errors with using object properties as an identifier (Henry Zhu)</li>\n<li>requireDollarBeforejQueryAssignment: Allow leading underscores before $ sign (Eli White)</li>\n<li>requireCamelCaseOrUpperCaseIdentifiers: skip es5 getters if ignoreProperties is set (Alexej Yaroshevich)</li>\n<li>requireSemicolons: fix warning positions (Roman Dvornov)</li>\n<li>requireMultipleVarDecl: fix switch statement case (Todd Wolfson)</li>\n<li>paddingNewLineAfterVariableDeclaration: simlification and more tests (Oleg Gaidarenko)</li>\n<li>paddingNewLineAfterVariableDeclaration: add check for let and const (Martin Kolárik)</li>\n<li>paddingNewLineAfterVariableDeclaration: do not trip off on the semicolon (Oleg Gaidarenko)</li>\n<li>paddingNewLinesAfterBlocks: ease up on function calls (Oleg Gaidarenko)</li>\n<li>requirePaddingNewLineAfterVariableDeclaration: allow exception (Henry Zhu)</li>\n<li>requireLineBreakAfterVariableAssignment: add check for let and const (Henry Zhu)</li>\n<li>requireCapitalizedComments: handle textblocks correctly (Martin Kolárik)</li>\n</ul>\n<h3 id=\"misc\">Misc</h3>\n<ul>\n<li>js-file: small JSDoc improvement (Oleg Gaidarenko)</li>\n<li>Tests: fix node-style-guide preset (Martin Kolárik)</li>\n<li>Utils: add &quot;true&quot; and &quot;false&quot; to list of reserved words (Dmitry Sorin)</li>\n<li>Update esprima-harmony version (Oleg Gaidarenko)</li>\n<li>Tests: Add a test helper for asserting errors and autofix (Eli White)</li>\n<li>disallowKeywordsOnNewLine: make jshint happy (Oleg Gaidarenko)</li>\n<li>disallowMultipleVarDecl: add test for var inside switch clause (Alexej Yaroshevich)</li>\n<li>errors: additional tests, coverage (Alexej Yaroshevich)</li>\n<li>string-checker: wrap rule.check into try-catch (Alexej Yaroshevich)</li>\n<li>errors: fix test flow with filtering (Alexej Yaroshevich)</li>\n</ul>\n<h3 id=\"docs\">Docs</h3>\n<ul>\n<li>Docs: add link to overcommit under &quot;Friendly packages&quot; (Joe Lencioni)</li>\n<li>Docs: add a message to mention the verbose option (Henry Zhu)</li>\n<li>Docs: clarify that CLI options can be used in the config (Henry Zhu)</li>\n<li>Docs: clarify that disallowMultipleSpaces matches tabs and spaces (Henry Zhu)</li>\n<li>Docs: clarify how to disable a rule and use a config file (Henry Zhu)</li>\n<li>Docs: Clarify behavior of requireCamelCaseOrUpperCaseIdentifiers (Henry Zhu)</li>\n<li>Docs: fix disallowMultipleSpaces rule name in CHANGELOG (Alexej Yaroshevich)</li>\n<li>Docs: add two new presets to list of preset values (Jed Wood)</li>\n<li>Docs: add link to the preset option from the list of presets (Steve Lee)</li>\n<li>Docs: add shorten flags to cli (Henry Zhu)</li>\n<li>Docs: add auto fix option to cli docs (Henry Zhu)</li>\n<li>Docs: fix disallowMultipleSpaces invalid example (Henry Zhu)</li>\n<li>Docs: fix various docs typos (Eli White)</li>\n</ul>\n<h2 id=\"version-1-12-0-https-github-comjscs-devnode-jscscomparev1-11-0-v1-12-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.11.0...v1.12.0\">1.12.0</a></h2>\n<h3 id=\"overview\">Overview</h3>\n<p>Ladies and Gentlemen... Elvis is in the building - auto-fixing is finally here! We were working really hard to make this powerful new feature, and to make it right. We&#39;re hoping it will truly help make your code look good.</p>\n<p>Auto-fixing supports the <a href=\"http://jscs.info/rules.html#requirelinefeedatfileend\">EOF rule</a> and all rules related to spacing, including <a href=\"http://jscs.info/rules.html#validateindentation\">validateIndentation</a> which is the most complicated rule we have (big thanks to @mikesherov for making that happen).</p>\n<p>Although this chunk of rules covers most of the popular use-cases, we&#39;re determine to add more rules to this list, please help us out and report any bugs or consider contributing with some code - <a href=\"http://jscs.info/contributing.html\">http://jscs.info/contributing.html</a>. We&#39;re really friendly to every new contributor.</p>\n<p>Apart from auto-fixing, there are six new rules – fresh out of the oven. Special thanks goes to @lahmatiy, who had the patience and perseverance to implement <a href=\"http://jscs.info/rules.html#requiresemicolons\"><code>requireSemicolons</code></a>.</p>\n<p>Because of tireless efforts of @hzoo, we&#39;re adding two new presets in this release - <a href=\"https://github.com/felixge/node-style-guide\"><code>node-style-guide</code></a> and <a href=\"https://make.wordpress.org/core/handbook/coding-standards/javascript\"><code>wordpress</code></a>. They have pretty consistent style guides... try it out; They are a breeze to work with.</p>\n<p>We&#39;re very grateful to everyone who helped out with this release, especially to @TheSavior who helped review the pull requests and shape out our API.</p>\n<h3 id=\"preset-updates\">Preset updates</h3>\n<ul>\n<li>Preset: remove &quot;requireMultipleVarDecl&quot; rule from jquery preset (Oleg Gaidarenko)</li>\n<li>Preset: wordpress (Henry Zhu)</li>\n<li>Preset: Add &quot;requireSemicolons&quot; rule to the Yandex preset (ikokostya)</li>\n<li>Preset: Add validate indentation rule for Yandex (Gunnar Lium)</li>\n<li>Preset: node-style-guide (Henry Zhu)</li>\n<li>Preset: update airbnb preset (Eli White)</li>\n<li>Preset: require blank line before all line comments for jQuery preset (Eli White)</li>\n<li>Preset: Add &quot;requireSpaceBeforeObjectValues&quot; to crockford test (Jackson Ray Hamilton)</li>\n</ul>\n<h3 id=\"auto-fixing\">Auto-fixing</h3>\n<ul>\n<li>validateIndentation: autofixing! (Mike Sherov)</li>\n<li>TokenAssert: only fix lines when comments do not exist between tokens (Mike Sherov)</li>\n<li>disallowMultipleLineString: do not yet allow autofixing, which is a non-whitespace change (Mike Sherov)</li>\n<li>disallowSemicolons: do not yet allow autofixing, which is a non-whitespace change (Mike Sherov)</li>\n<li>Autofixing: add more rules to use assertion framework (Henry Zhu)</li>\n<li>Autofixing: make most rules use assertion framework when possible (Eli White)</li>\n<li>Autofixing: initial implementation (mdevils)</li>\n<li>Autofixing: token data (mdevils)</li>\n</ul>\n<h3 id=\"new-rules\">New rules</h3>\n<ul>\n<li>New Rule: requireSemicolons (Roman Dvornov)</li>\n<li>New Rule: disallowMultipleSpaces (Todd Wolfson)</li>\n<li>New Rule: disallowIdentifierNames (alawatthe)</li>\n<li>New Rule: requirePaddingNewLineAfterVariableDeclaration (Evan Jacobs)</li>\n<li>New Rule: requireDollarBeforejQueryAssignment (Eli White)</li>\n<li>New Rules: (disallow/require)PaddingNewLinesBeforeLineComments (Eli White)</li>\n</ul>\n<h3 id=\"rule-values\">Rule Values</h3>\n<ul>\n<li>requireCapitalizedComments: Add <code>allExcept</code> option (Ash Clarke)</li>\n</ul>\n<h3 id=\"auto-configuration\">Auto-configuration</h3>\n<ul>\n<li>Auto-Configuration: show error count when handling violated rules (fubu)</li>\n<li>Auto-Configuration: show number of violated rules (fubu)</li>\n</ul>\n<h3 id=\"cli\">CLI</h3>\n<ul>\n<li>CLI: simplify and increase coverage of &quot;cli-config&quot; module (Oleg Gaidarenko)</li>\n<li>CLI: increase coverage of the &quot;cli&quot; module (Oleg Gaidarenko)</li>\n</ul>\n<h3 id=\"bug-fixes\">Bug fixes</h3>\n<ul>\n<li>(require|disallow)spacesIn*: add more invalid examples and fixes for rules (Henry Zhu)</li>\n<li>disallowSpacesInsideArrayBrackets: fix error messages (Henry Zhu)</li>\n<li>requireSpacesInsideArrayBrackets: comments should be also taken into account (gero3)</li>\n<li>disallowSpaceBeforeBinaryOperators: comments are allowed (gero3)</li>\n<li>requireLineBreakAfterVariableAssignment: allow exception for init part of for loop (Henry Zhu)</li>\n<li>(require|disallow)SpacesInsideArrayBrackets: use includeComments in token (Henry Zhu)</li>\n<li>disallowAnonymousFunctions: remove errant &quot;s&quot; from error message (James Chin)</li>\n<li>disallowDanglingUnderscores: Corrected rule name in assert message (Oswald Maskens)</li>\n<li>Parsing: Extend estraverse rules to support both XJS and JSX (Henry Zhu)</li>\n<li>(disallow/require)PaddingNewLinesAfterBlocks: Ignoring the end of files (Eli White)</li>\n<li>requirePaddingNewLinesBeforeLineComments: Allow consecutive comments and firstAfterCurly exception (Eli White)</li>\n</ul>\n<h3 id=\"misc\">Misc</h3>\n<ul>\n<li>disallowSpacesInsideParentheses: fix es6 template literal token issues (Mike Sherov)</li>\n<li>RequireAlignedObjectValues: use assertions (Mike Sherov)</li>\n<li>DisallowMultipleLineBreaks: use assertions (Mike Sherov)</li>\n<li>Tests: Move to spec folder (Joel Kemp)</li>\n<li>Tests: Adding some more fix tests (Eli White)</li>\n<li>Tests: move specs into a subdir so that tests, fixtures, and utilities aren&#39;t intermingled (Mike Sherov)</li>\n<li>Misc: update dependencies (Oleg Gaidarenko)</li>\n<li>JsFile: Make getTokens include comments (Eli White)</li>\n<li>Assertions: Add fixing tests to several rules (Eli White)</li>\n<li>Assertions: add tests for linesBetween (Mike Sherov)</li>\n<li>Assertions: Make sure newlines get fixed (gero3)</li>\n<li>TokenAssert: remove newline fixing logic duplication to prepare for further fixes (Mike Sherov)</li>\n<li>TokenAssert: simplify and strengthen linesBetween rules (Mike Sherov)</li>\n<li>Token Assert: normalize whiteSpace assertions to match line assertions (Mike Sherov)</li>\n<li>requireLineFeedAtFileEnd: make use of assert (gero3)</li>\n<li>Don&#39;t trim whitespace in markdown-files (Simen Bekkhus)</li>\n<li>Cleanup: use this.getOptionName() for consistency, options variable (Henry Zhu)</li>\n<li>Cleanup: use iterateTokensByTypeAndValue where appropriate (Mike Sherov)</li>\n<li>Cleanup: remove archaic functions from JsFile (Mike Sherov)</li>\n<li>Cleanup: remove usage of getComment(After|Before)Token (Mike Sherov)</li>\n<li>Cleanup: remove redundant boolean check, use consistent error messages (Henry Zhu)</li>\n<li>Cleanup: use iterateTokensByTypeAndValue and this.getOptionName() (Henry Zhu)</li>\n<li>requireSpaceAfterKeywords: use token assert (Henry Zhu)</li>\n<li>JsFile::getFirstTokenOnLine implementation (for indentation rules) (mdevils)</li>\n<li>Replaces the &#39;colors&#39; and &#39;supports-colors&#39; packages with &#39;chalk&#39;. (Joshua Appelman)</li>\n<li>Fix various doc typos (Jérémie Astori)</li>\n<li>requirePaddingNewLinesAfterBlockDeclarations / disallowPaddingNewLinesAfterBlockDeclarations Adding an option to specify lines for errors.assert.differentLine (Eli White)</li>\n<li>JsFile: add getLineBreaks function to support future whitespace fixes (Mike Sherov)</li>\n<li>Appveyor: freeze node version to 0.12.x (Alexej Yaroshevich)</li>\n<li>requireCapitalizedComments: automatically except <code>jscs</code> comments (James Reggio)</li>\n</ul>\n<h3 id=\"docs\">Docs</h3>\n<ul>\n<li>Docs: Change &quot;Values&quot; and &quot;Types&quot; to grammatically correct forms (Shmavon Gazanchyan)</li>\n<li>Docs: add reporter (sanemat)</li>\n<li>Docs: less.js uses jscs (Bass Jobsen)</li>\n<li>Docs: added Goodvidio to the list of adopters (Adonis K)</li>\n<li>Fix types and descriptions in documentation (Shmavon Gazanchyan)</li>\n</ul>\n<h2 id=\"version-1-11-3-https-github-comjscs-devnode-jscscomparev1-10-0-v1-11-3\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.10.0...v1.11.3\">1.11.3</a></h2>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li>JsFile: ensure getLinesWithCommentsRemoved does not alter future getComments calls. (Mike Sherov)</li>\n</ul>\n<h3 id=\"misc\">Misc.</h3>\n<ul>\n<li>modules/utils normalizePath: fixed test for windows env (Alexej Yaroshevich)</li>\n</ul>\n<h2 id=\"version-1-11-2-https-github-comjscs-devnode-jscscomparev1-10-0-v1-11-2\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.10.0...v1.11.2\">1.11.2</a></h2>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li>validateIndentation: ignore empty module bodies (Mike Sherov)</li>\n<li>Object rules: ignore ES5 getters/setters when appropriate. (Mike Sherov)</li>\n<li>Ensure esprimaOptions is not mistaken for a rule (Yannick Croissant)</li>\n</ul>\n<h3 id=\"infrastructure-changes\">Infrastructure Changes</h3>\n<ul>\n<li>CI: Add AppVeyor (Adeel)</li>\n</ul>\n<h3 id=\"misc\">Misc.</h3>\n<ul>\n<li>Add @zxqfox to the list of maintainers (mdevils)</li>\n</ul>\n<h2 id=\"version-1-11-1-https-github-comjscs-devnode-jscscomparev1-10-0-v1-11-1\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.10.0...v1.11.1\">1.11.1</a></h2>\n<h3 id=\"new-rules-rule-values\">New Rules / Rule Values</h3>\n<ul>\n<li>disallowSpaceAfterObjectKeys: implement ignoreSingleLine and ignoreMultiLine options (Henry Zhu)</li>\n</ul>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li>disallowAllowSpacesInsideParentheses: reintroduce archaic &quot;all&quot; config option (Mike Sherov)</li>\n<li>requireSpaceBetweenArguments: loosen rule restriction (Mike Sherov)</li>\n<li>Object Key rules: ignore method syntax (Alexej Yaroshevich)</li>\n<li>(require|disallow)TrailingComma: fixed error location (Alexej Yaroshevich)</li>\n</ul>\n<h3 id=\"infrastructure-changes\">Infrastructure Changes</h3>\n<ul>\n<li>Auto-generate: Move promisify to utils (Joel Kemp)</li>\n</ul>\n<h3 id=\"misc\">Misc.</h3>\n<ul>\n<li>JSHint: add unused true (Mike Sherov)</li>\n<li>Updating rules to use File Traversal APIs. (Eli White)</li>\n<li>Docs: Add website rebuild instructions to maintenance (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-11-0-https-github-comjscs-devnode-jscscomparev1-10-0-v1-11-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.10.0...v1.11.0\">1.11.0</a></h2>\n<h3 id=\"preset-updates\">Preset Updates</h3>\n<ul>\n<li>Preset: add &quot;requireSpaceBetweenArguments&quot; rule to all presets (Oleg Gaidarenko)</li>\n<li>Presets: Remove use of outdated validateJSDoc rule (Joel Kemp)</li>\n<li>Preset: Add &quot;requireSpacesInsideParentheses&quot; to jquery preset (Oleg Gaidarenko)</li>\n<li>Preset: switch multipleVarDecl rule in airbnb preset (Martin Bohal)</li>\n<li>Preset: change value of &quot;requireDotNotation&quot; rule for jquery preset (Oleg Gaidarenko)</li>\n</ul>\n<h3 id=\"new-config-options\">New Config Options</h3>\n<ul>\n<li>Configuration: Auto-generation (Joel Kemp)</li>\n<li>Config: Add support for custom Esprima options. (Chris Rebert)</li>\n</ul>\n<h3 id=\"new-rules-rule-values\">New Rules / Rule Values</h3>\n<ul>\n<li>New Rule: disallowKeywordsInComments (Joe Sepi)</li>\n<li>New Rules: (require|disallow)SpacesInsideBrackets (Mike Sherov)</li>\n<li>validateIndentation: new rule value - includeEmptyLines (Jonathan Gawrych)</li>\n<li>disallowTrailingWhitespace: new rule value - ignoreEmptyLines (Jonathan Gawrych)</li>\n<li>New Rule: disallowCurlyBraces (Henry Zhu)</li>\n<li>requireCapitalizedConstructors: accept list of exempt constructors (Sam L&#39;ecuyer)</li>\n<li>validateIndentation: exception to indentation rules for module pattern (Mike Sherov)</li>\n</ul>\n<h3 id=\"bug-fixes\">Bug Fixes</h3>\n<ul>\n<li>(require|disallow)SpacesInsideArrayBrackets: only check for ArrayExpressions (Mike Sherov)</li>\n<li>JsFile: remove all duplicate tokens. (Mike Sherov)</li>\n<li>ObjectExpression Rules: take into account shorthand syntax. (Mike Sherov)</li>\n<li>disallowSpaceBeforeKeywords: don&#39;t report an error on back-to-back keywords (Mike Sherov)</li>\n<li>requireParenthesesAroundIIFE: fix crash on semicolon-free IIFE (Yuheng Zhang)</li>\n<li>Parsing: tolerate non-leading import statements (Chris Rebert)</li>\n<li>requireCapitalizedComments: improve letter recognition (Mathias Bynens)</li>\n<li>requireSpaces*: fix error message to &#39;Exactly one space required&#39; (Henry Zhu)</li>\n<li>StringChecker: leading hashbangs should still report correct error line numbers (Mike Sherov)</li>\n<li>validateIndentation: don&#39;t check bracelets else indentation. (Mike Sherov)</li>\n<li>validateIndentation: don&#39;t consider return when classifying break indentation (Mike Sherov)</li>\n<li>validateIndentation: fix multiline while in doWhile statements (Mike Sherov)</li>\n<li>validateIndentation: ensure pushes and pops are matching (Mike Sherov)</li>\n<li>validateIndentation: ensure semicolon free indentations are on correct line (Mike Sherov)</li>\n<li>SpaceBetweenArguments: catch call expression arguments (Oleg Gaidarenko)</li>\n<li>token-assert: add check for document start to prevent crashes (Alexej Yaroshevich)</li>\n<li>requireSpaceBeforeBlockStatements: reworded an error message (Alexej Yaroshevich)</li>\n</ul>\n<h3 id=\"infrastructure-changes\">Infrastructure Changes</h3>\n<ul>\n<li>js-file: added getCommentAfter/BeforeToken functions (Alexej Yaroshevich)</li>\n<li>cleanup: remove lib/token-helper (Mike Sherov)</li>\n<li>JsFile: move getLinesWithCommentsRemoved from comment-helper (Mike Sherov)</li>\n</ul>\n<h3 id=\"misc\">Misc.</h3>\n<ul>\n<li>disallowSpacesInsideArrayBrackets: fix rule name in example (Gustavo Henke)</li>\n<li>Misc: update dependencies (Oleg Gaidarenko)</li>\n<li>various rules: use tokenAssert (Henry Zhu)</li>\n<li>Speed up builds by using Docker-based Travis CI (Pavel Strashkin)</li>\n<li>100% code coverage on various files(Mike Sherov)</li>\n<li>disallowSpace(Before | After)Keywords: more tests (Alexej Yaroshevich)</li>\n<li>requireCurlyBrace: more tests (Alexej Yaroshevich)</li>\n<li>CLI: correct JSDoc comment (Oleg Gaidarenko)</li>\n<li>requireQuotedKeysInObjects: fixing file permissions (Joe Sepi)</li>\n<li>Changelog: correct version number (Oleg Gaidarenko)</li>\n<li>Docs: add missed commit to the changelog (Oleg Gaidarenko)</li>\n<li>Misc: .editorconfig - fix for invalid indent_style value (Dmitriy Schekhovtsov)</li>\n<li>Update regenerate to ~1.2.1 (Chris Rebert)</li>\n<li>Add description to commander CLI help (Chris Rebert)</li>\n</ul>\n<h2 id=\"version-1-10-0-https-github-comjscs-devnode-jscscomparev1-9-0-v1-10-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.9.0...v1.10.0\">1.10.0</a></h2>\n<ul>\n<li>Preset: correct wikimedia preset test (Oleg Gaidarenko)</li>\n<li>Preset: correct jquery preset test (Oleg Gaidarenko)</li>\n<li>Preset: add disallowKeywordsOnNewLine rule to google preset (Oleg Gaidarenko)</li>\n<li>Preset: add &quot;requireSpacesInForStatement&quot; rule to the presets (Oleg Gaidarenko)</li>\n<li><p>Preset: add &#39;catch&#39; to &quot;disallowKeywordsOnNewLine&quot; rule for wikimedia (James Forrester)</p>\n</li>\n<li><p>disallowSpacesInForStatement: Disallow spaces in between for statement (gero3)</p>\n</li>\n<li>requireSpacesInForStatement: Requires spaces inbetween for statement (gero3)</li>\n<li><p>New rule: requireQuotedKeysInObjects (hpshelton)</p>\n</li>\n<li><p>disallowSpacesInsideObjectBrackets: implement &quot;allExcept&quot; option (Oleg Gaidarenko)</p>\n</li>\n<li>requireSpacesInsideObjectBrackets: implement &quot;allExcept&quot; option (Oleg Gaidarenko)</li>\n<li>disallowSpacesInsideArrayBrackets: implement &quot;allExcept&quot; option (Oleg Gaidarenko)</li>\n<li>requireSpacesInsideArrayBrackets: implement &quot;allExcept&quot; option (Oleg Gaidarenko)</li>\n<li><p>requireDotNotation: new rule value - except_snake_case (Alexej Yaroshevich)</p>\n</li>\n<li><p>Configuration: ability to specify and query es3/es6 support in files. (Mike Sherov)</p>\n</li>\n<li><p>cli-config: add &quot;getReporter&quot; method (Oleg Gaidarenko)</p>\n</li>\n<li><p>requireSpaceBeforeBlockStatements: fix for else statement (Oleg Gaidarenko)</p>\n</li>\n<li>disallowSpaceBeforeBlockStatements: fix for else statement (Beau Gunderson)</li>\n<li>disallowKeywordsOnNewLine: add special case for &quot;else&quot; without braces (Oleg Gaidarenko)</li>\n<li>validateIndentation: fix bug with anonymous function return in switch case (Mike Sherov)</li>\n<li>validateIndentation: fix bug with brace-less if in a switch case. (Mike Sherov)</li>\n<li>validateIndentation: fix bug with indentation of bare blocks. (Mike Sherov)</li>\n<li>disallowSpaceAfterBinaryOperators: report correct operator error (Oleg Gaidarenko)</li>\n<li>requireSpaceAfterBinaryOperators: report correct operator error (Oleg Gaidarenko)</li>\n<li>Fixes #909 (wrong type for disallow-capitalized-comments) (alawatthe)</li>\n<li>token-assert: add guards for token and subjectToken properties (Oleg Gaidarenko)</li>\n<li>ESNext: update esprima to properly parse regex tokens (Mike Sherov)</li>\n<li>requireNewlineBeforeBlockStatements: add guard for the first symbol (Oleg Gaidarenko)</li>\n<li>disallowNewlineBeforeBlockStatements: add guard for the first symbol (Oleg Gaidarenko)</li>\n<li>requireDotNotation: require dots for es3 keywords when not in es3 mode (Mike Sherov)</li>\n<li>JsFile: make getNodeByRange check condition less strict (gero3)</li>\n<li>requireSpacesInConditionalExpression: notice parentheses (Alexej Yaroshevich)</li>\n<li>disallowSpacesInConditionalExpression: notice parentheses (Alexej Yaroshevich)</li>\n<li>requirePaddingNewlinesBeforeKeywords: add token exceptions (jdlrobson)</li>\n<li><p>requireLineBreakAfterVariableAssignment: fix edge cases (jdlrobson)</p>\n</li>\n<li><p>Docs: various readme fixes (Oleg Gaidarenko)</p>\n</li>\n<li>Docs: improve &quot;excludeFiles&quot; documentation (Alex Yaroshevich)</li>\n<li>Docs: Fixed level for 1.9.0 to be the same as for 1.8.x (Alexander Artemenko)</li>\n<li><p>README: Fix Bootstrap&#39;s name (Chris Rebert)</p>\n</li>\n<li><p>requireOperatorBeforeLineBreak: Use the new assertion framework (hpshelton)</p>\n</li>\n<li>cli-config: add JSDoc for exposed methods (Oleg Gaidarenko)</li>\n<li>(require | disallow)SpacesInsideObjectBrackets: add bunch of newlines (Oleg Gaidarenko)</li>\n<li>Misc: make jscs happy (Oleg Gaidarenko)</li>\n<li>disallowSpaceBeforeBlockStatements: correct test names (Oleg Gaidarenko)</li>\n<li>disallowSpaceBeforeBlockStatements: use assertion API (Oleg Gaidarenko)</li>\n<li>requireKeywordsOnNewLine: use assertion API (Oleg Gaidarenko)</li>\n<li>Misc: complitly replace hooker with sinon (Oleg Gaidarenko)</li>\n<li>CLI: correct tests for the &quot;reporter&quot; option (Oleg Gaidarenko)</li>\n<li>(require | disallow)NewlineBeforeBlockStatements: remove needless guards (Oleg Gaidarenko)</li>\n<li>(require | disallow)NewlineBeforeBlockStatements: use assertion API (Nicholas Bartlett)</li>\n<li>Move website to a different repo (mdevils)</li>\n<li>utils: add isSnakeCased, trimUnderscores methods (Alexej Yaroshevich)</li>\n<li>requireSpace(Before|After)BinaryOperators: Add tests for error column (hpshelton)</li>\n<li>modules/checker: call spy.restore() after assertions in checkStdin (Alexej Yaroshevich)</li>\n<li>Misc: correct file flags - chmod -x (Oleg Gaidarenko)</li>\n<li>Build: update dependencies (Oleg Gaidarenko)</li>\n</ul>\n<h2 id=\"version-1-9-0-https-github-comjscs-devnode-jscscomparev1-8-0-v1-9-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.8.0...v1.9.0\">1.9.0</a></h2>\n<ul>\n<li>Preset: update wikimedia preset (Timo Tijhof)</li>\n<li><p>Preset: update crockford preset (Jackson Ray Hamilton)</p>\n</li>\n<li><p>New Rules: (require | disallow)SpaceBetweenArguments (James Allardice)</p>\n</li>\n<li>New Rules: requireLineBreakAfterVariableAssignment (jdlrobson)</li>\n<li><p>New Rules: disallowSemicolons (Christopher Cliff)</p>\n</li>\n<li><p>CLI: relative path resolving fix (mdevils)</p>\n</li>\n<li>requireCurlyBraces: correctly set error pointer (Oleg Gaidarenko)</li>\n<li>requireOperatorBeforeLineBreak: Detect binary operator after literal (Lucas Cimon)</li>\n<li><p>requireCapitalizedComments: correct letter recognition (alawatthe)</p>\n</li>\n<li><p>CLI: Remove duplicated error reporting code paths (Mike Sherov)</p>\n</li>\n<li>CLI: remove duplicated preset existence check (Mike Sherov)</li>\n<li>Iterator: extend estraverse rules to support JSX (Yannick Croissant)</li>\n<li>Iterator: use estraverse in tree-iterator. (mdevils)</li>\n<li><p>CLI: Move configuration override to node-configuration (Mike Sherov)</p>\n</li>\n<li><p>Docs: small correction to contributing guide (Oleg Gaidarenko)</p>\n</li>\n<li>Docs: fixed incorrect rule name in example (alawatthe)</li>\n<li>Docs: added keywords for Googleability (Devin Ekins)</li>\n<li>Docs: Correct documentation for disallowOperatorBeforeLineBreak (jdlrobson)</li>\n<li>Docs: Added quotes for uniformity (Callum Macrae)</li>\n<li>Docs: Typo fix (Alexander Sofin)</li>\n<li>Docs: fix urls to yandex codestyle (Andrey Morozov)</li>\n</ul>\n<h2 id=\"version-1-8-1-https-github-comjscs-devnode-jscscomparev1-7-0-v1-8-1\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.7.0...v1.8.1\">1.8.1</a></h2>\n<ul>\n<li>Assertions: always allow new lines in whitespaceBetween (Henry Zhu)</li>\n<li>Tests: reorganization, full coverage for JsFile (mdevils)</li>\n</ul>\n<h2 id=\"version-1-8-0-https-github-comjscs-devnode-jscscomparev1-7-0-v1-8-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.7.0...v1.8.0\">1.8.0</a></h2>\n<ul>\n<li>Preset: Grunt (Joel Kemp)</li>\n<li><p>Preset: remove &quot;disallowMultipleLineBreaks&quot; rule from crockford preset (Oleg Gaidarenko)</p>\n</li>\n<li><p>New Rules: disallowOperatorBeforeLineBreak (jdlrobson)</p>\n</li>\n<li>New Rules: (require | disallow)PaddingNewlinesBeforeKeywords (Anton Vishnyak)</li>\n<li>New Rules: disallowSpaceBeforeKeywords (Bryan Donovan)</li>\n<li><p>New Rules: requireSpaceBeforeKeywords (Bryan Donovan)</p>\n</li>\n<li><p>Parsing: Ability to specify a custom esprima version via CLI or config (Konstantin Tarkus)</p>\n</li>\n<li>Errors: Support a filter to control which errors are reported (Joel Kemp)</li>\n<li>Assertions: better rule error reporting. (mdevils)</li>\n<li><p>Better configuration, plugin support (mdevils)</p>\n</li>\n<li><p>disallowDanglingUnderscores: Support an array of additional exceptions (Henry Zhu)</p>\n</li>\n<li>requireTrailingComma: add option ignoreSingleLine (eltacodeldiablo)</li>\n<li>StringChecker: unsupported rules shown as style errors and not thrown exceptions (Joel Kemp)</li>\n<li>Iterate over &quot;export&quot; statement of ES6 (Oleg Gaidarenko)</li>\n<li>disallowMultipleVarDecl: add exception for undefined variable declarations (Henry Zhu)</li>\n<li>disallowDanglingUnderscores: add &quot;super_&quot; to allowed identifier list (Markus Dolic)</li>\n<li>disallowSpacesInAnonymousFunctionExpression: set correct error pointer (Oleg Gaidarenko)</li>\n<li><p>requireSpaceAfterLineComment: add &quot;except&quot; option (Alexej Yaroshevich)</p>\n</li>\n<li><p>validateParameterSeparator: fix for multiple spaces between parameters (Henry Zhu)</p>\n</li>\n<li>Added test and patch for <code>finally</code> as a spaced keyword (Todd Wolfson)</li>\n<li>requireCapitalizedComments: Better support for multi-line comments (indexzero)</li>\n<li>disallowSpaceBeforeKeywords: Fix assertion typo (Jeremy Fleischman)</li>\n<li>Errors: Simplify rules debugging and prevent crashes in error reporters (Alexej Yaroshevich)</li>\n<li><p>Correct error message for &quot;requireSpaceAfterKeywords&quot; rule (Bryan Donovan)</p>\n</li>\n<li><p>Docs: Fix Yandex codestyle link (Garmash Nikolay)</p>\n</li>\n<li>Docs: Added clarification of tokens in disallowSpacesInConditionalExpression (indexzero)</li>\n<li>Docs: add twitter and mailling list links (Oleg Gaidarenko)</li>\n<li>Docs: add more specific cases for function spaces rules (Henry Zhu)</li>\n<li>Docs: make indentation to be consistent at 4 spaces (Henry Zhu)</li>\n<li>Docs: Correct docs for requireAnonymousFunctions rule (Oleg Gaidarenko)</li>\n<li>Docs: Clarify &quot;config&quot; option (MaximAL)</li>\n<li>Docs: Add Plugins section (Alexej Yaroshevich)</li>\n</ul>\n<h2 id=\"version-1-7-3-https-github-comjscs-devnode-jscscomparev1-6-0-v1-7-3\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.6.0...v1.7.3\">1.7.3</a></h2>\n<ul>\n<li>Parsing: Use the harmony parser via the esnext flag in the config (Joel Kemp)</li>\n<li>validateIndentation: handle breakless case statements (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-7-2-https-github-comjscs-devnode-jscscomparev1-6-0-v1-7-2\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.6.0...v1.7.2\">1.7.2</a></h2>\n<ul>\n<li>validateIndentation: fix return in switch failure (Mike Sherov)</li>\n<li>Cast StringChecker maxErrors property to Number the first time (Florian Fesseler)</li>\n<li>Fix format of --esnext and --max-errors in README (Joe Lencioni)</li>\n</ul>\n<h2 id=\"version-1-7-1-https-github-comjscs-devnode-jscscomparev1-6-0-v1-7-1\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.6.0...v1.7.1\">1.7.1</a></h2>\n<ul>\n<li>validateIndentation: fix empty multiline function body regression (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-7-0-https-github-comjscs-devnode-jscscomparev1-6-0-v1-7-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.6.0...v1.7.0\">1.7.0</a></h2>\n<ul>\n<li>validateJSDoc: Deprecate rule (Joel Kemp)</li>\n<li>Updated google preset (Richard Poole)</li>\n<li><p>Add &quot;requireSpaceBeforeBlockStatements&quot; rule into the jquery preset (Oleg Gaidarenko)</p>\n</li>\n<li><p>CLI: Support --esnext to Parse ES6. (Robert Jackson)</p>\n</li>\n<li><p>CLI: Support a --max-errors option to limit the number of reported errors (mdevils)</p>\n</li>\n<li><p>New Rules: (require|disallow)CapitalizedComments (Joel Kemp)</p>\n</li>\n<li>New Rules: (require|disallow)SpacesInCallExpression (Mathieu Schroeter)</li>\n<li>New Rules: (disallow|require)FunctionDeclarations (Nikhil Benesch)</li>\n<li><p>New Rules: (require|disallow)PaddingNewLinesInObjects (Valentin Agachi)</p>\n</li>\n<li><p>Implement &quot;only&quot; for parens rule (Oleg Gaidarenko)</p>\n</li>\n<li>Simplify &quot;allButNested&quot; option for spaces rule (Oleg Gaidarenko)</li>\n<li>Implement &quot;except&quot; option for spaces rule (Oleg Gaidarenko)</li>\n<li><p>disallowMultipleVarDecl: Strict mode to disallow for statement exception (Joel Kemp)</p>\n</li>\n<li><p>disallowSpaceBeforeObjectKeys: fix parenthesised property value (Jindrich Besta)</p>\n</li>\n<li>requireSpaceBeforeObjectValues: fix parenthesised property value (Jindrich Besta)</li>\n<li>validateIndentation: Allow non-indented &quot;break&quot; in &quot;switch&quot; statement (kevin.destrem)</li>\n<li>ValidateIndentation: remove array and object indentation validation (Mike Sherov)</li>\n<li>validateIndentation: Allow the &quot;if&quot; test to be nested. (Jesper Birkestrøm)</li>\n<li>ValidateIndentation: Relax indentation rules for function expressions. (Mike Sherov)</li>\n<li>requireCurlyBraces: support the with statement (Joel Kemp)</li>\n<li>Fix invalid result of findXxxxToken methods when value is provided (Romain Guerin)</li>\n<li><p>requireSpaceAfterLineComment: skips msjsdoc comments (Alexej Yaroshevich)</p>\n</li>\n<li><p>Docs: add a table of contents to README (Henry Zhu)</p>\n</li>\n<li>Docs: Make version numbers real markdown headers (Alexander Artemenko)</li>\n</ul>\n<h2 id=\"version-1-6-2-https-github-comjscs-devnode-jscscomparev1-5-0-v1-6-2\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.5.0...v1.6.2\">1.6.2</a></h2>\n<ul>\n<li>Fix disallowMultipleLineBreaks with shebang line (Nicolas Gallagher)</li>\n<li>Improve validateParameterSeparator rule (David Chambers)</li>\n<li>Add rule for parameter separation validation (James Allardice)</li>\n<li>Add new rules for object values (Vivien TINTILLIER)</li>\n<li>Docs: add intellij plugin to friendly packages (idok)</li>\n<li>Support predefined values for another three rules (Joel Kemp)</li>\n</ul>\n<h2 id=\"version-1-6-1-https-github-comjscs-devnode-jscscomparev1-5-0-v1-6-1\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.5.0...v1.6.1\">1.6.1</a></h2>\n<ul>\n<li>Airbnb preset (Joel Kemp)</li>\n<li>Improve crockford preset (Vivien TINTILLIER)</li>\n<li>Avoid node.js 0.10.x exit code bug for MS Windows (Taku Watabe)</li>\n<li>Docs: Update packages and extensions sections with new URLs. (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-6-0-https-github-comjscs-devnode-jscscomparev1-5-0-v1-6-0\">Version <a href=\"https://github.com/jscs-dev/node-jscs/compare/v1.5.0...v1.6.0\">1.6.0</a></h2>\n<ul>\n<li>Errors: ability to suppress errors via inline comments. (Mike Sherov)</li>\n<li>Fix Anonymous Functions in google preset (Ayoub Kaanich)</li>\n<li>Enhance google&#39;s preset (Joel Kemp)</li>\n<li>Add &quot;iterateTokenByValue&quot; method (Oleg Gaidarenko)</li>\n<li>Node -&gt; Tokens navigation, token list navigation (Marat Dulin)</li>\n<li>Do not strip json config from comments (Oleg Gaidarenko)</li>\n<li>maximumLineLength should not be destructive (Oleg Gaidarenko)</li>\n<li>Use tilde for package definition (Jordan Harband)</li>\n<li>Improve stdin support (Joel Kemp)</li>\n<li>Use correct logic for piped input (Joel Kemp)</li>\n<li>Properly concatenate large files read from stdin (Nikhil Benesch)</li>\n<li>Add link to the Atom editor plugin for JSCS (Addy Osmani)</li>\n<li>Setting default tree to empty object (Bryan Donovan)</li>\n</ul>\n<h2 id=\"version-1-5-9\">Version 1.5.9</h2>\n<ul>\n<li>Binary Rules: Remove colon check from all binary rules (Oleg Gaidarenko)</li>\n<li>Presets: Add Mr. Doob&#39;s Code Style (MDCS) (gero3)</li>\n<li>Presets: Add Crockford (Timo Tijhof)</li>\n<li>Google Preset: Add missing constraints (Turadg Aleahmad)</li>\n<li>Yandex Preset: Remove repeated rule in yandex preset (Benjamin Tamborine)</li>\n<li>Yandex Preset: updated to be more accurate (ikokostya)</li>\n<li>New Rules: (require|disallow)NewlineBeforeBlockStatements (cipiripper)</li>\n<li>New Rules: (require|disallow)AnonymousFunctions (Rachel White)</li>\n<li>New Rules: (disallow|require)SpacesInFunction (Mike Sherov)</li>\n<li>CLI: Accepts piped input from stdin (Joel Kemp)</li>\n<li>CLI: Add --verbose option that adds rule names to error output. (Mike Sherov)</li>\n<li>Errors: report Esprima parse errors as rule violations. (Mike Sherov)</li>\n<li>disallowMultipleLineBreaks: fix issues with shebang line (Bryan Donovan)</li>\n<li>spacesInFunctionExpressions: ignore function declarations. (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-5-8\">Version 1.5.8</h2>\n<ul>\n<li>Errors: include which rule triggered the error in the error output (gero3)</li>\n<li>requireTrailingComma: Allow single property objects  / arrays to ignore the rule. (Joel Kemp)</li>\n<li>requireTrailingComma: Avoids false positives from non object/array literal definitions. (Joel Kemp)</li>\n<li>validateIndentation: fix indentation for non-block <code>if</code> that has block <code>else</code>. (Mike Sherov)</li>\n<li>maximumLineLength: Document the required and default values. (Joel Kemp)</li>\n</ul>\n<h2 id=\"version-1-5-7\">Version 1.5.7</h2>\n<ul>\n<li>Exclude colon from binary rule of yandex preset (Oleg Gaidarenko)</li>\n<li>wikimedia: Add &#39;case&#39; and &#39;typeof&#39; to requireSpaceAfterKeywords (Timo Tijhof)</li>\n<li>Correct deal with exclusion and extensions (Oleg Gaidarenko)</li>\n<li>disallowPaddingNewlinesInBlocks: fix false negatives with newline after closing curly. (Iskren Chernev)</li>\n<li>Include jscs-browser file to npm package (Oleg Gaidarenko)</li>\n<li>Clarify docs of use of jscs-browser.js (Oleg Gaidarenko)</li>\n</ul>\n<h2 id=\"version-1-5-6\">Version 1.5.6</h2>\n<ul>\n<li>Correct prebublish script (Oleg Gaidarenko)</li>\n</ul>\n<h2 id=\"version-1-5-5\">Version 1.5.5</h2>\n<ul>\n<li>Add allowUrlComments to yandex preset (ikokostya)</li>\n<li>Improve requireMultipleVarDecl rule (Oleg Gaidarenko)</li>\n<li>Improve fileExtension option (Oleg Gaidarenko)</li>\n<li>Perform file check by direct reference (Oleg Gaidarenko)</li>\n<li>Comma not on the same line with the first operand (Oleg Gaidarenko)</li>\n<li>Simplify doc instruction a bit (Oleg Gaidarenko)</li>\n<li>Generate &quot;jscs-browser.js&quot; only during publishing (Oleg Gaidarenko)</li>\n<li>Fix tests for requireSpaceBeforeBinaryOperators (lemmy)</li>\n</ul>\n<h2 id=\"version-1-5-4\">Version 1.5.4</h2>\n<ul>\n<li>Fix crash caused by multiline case statements that fall through for validateIndentation rule (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-5-3\">Version 1.5.3</h2>\n<ul>\n<li>Add missing rules in jQuery preset (Oleg Gaidarenko)</li>\n<li>Exclude comma operator from requireSpaceBeforeBinaryOperators rule (Oleg Gaidarenko)</li>\n<li>Ignore ios instruments style imports (@sebv)</li>\n<li>Various doc fixes (Christian Vuerings, Timo Tijhof, Oleg Gaidarenko)</li>\n</ul>\n<h2 id=\"version-1-5-2\">Version 1.5.2</h2>\n<ul>\n<li>Improve binary rule (Oleg Gaidarenko)</li>\n<li>Fix recursive descend, #445 (Oleg Gaidarenko)</li>\n</ul>\n<h2 id=\"version-1-5-1\">Version 1.5.1</h2>\n<ul>\n<li>Version bump to address incorrectly published docs (Mike Sherov)</li>\n</ul>\n<h2 id=\"version-1-5-0\">Version 1.5.0</h2>\n<ul>\n<li>Sticked Operators Rules: Deprecate in favor of more specific rules (Mike Sherov)</li>\n<li>Update google preset (Oleg Gaidarenko)</li>\n<li>Update jQuery preset (Mike Sherov)</li>\n<li>Implement wikimedia preset (Timo Tijhof)</li>\n<li>Impelement yandex preset (Alexander Tarmolov)</li>\n<li>Implement fileExtensions option (Joel Brandt)</li>\n<li>Implement requireYodaConditions rule (Oleg Gaidarenko)</li>\n<li>Disallow Space After Line Comment: New Rule (Ben Bernard)</li>\n<li>Require Space After Line Comment: New Rule (Ben Bernard)</li>\n<li>Implement requireSpacesInsideParentheses (Mikko Rantanen)</li>\n<li>MaximumLineLength: add ignoreUrlComments option which ignore comments with long urls. (Mike Sherov)</li>\n<li>requireCamelCaseOrUpperCaseIdentifiers: add option to ignore object properties. (Mike Sherov)</li>\n<li>MaximumLineLength: provide relaxing option for comments and/or regular expression literals. (Mike Sherov)</li>\n<li>disallowPaddingNewlinesInBlocks: Count comments as valid tokens. (Joshua Koo)</li>\n<li>Add new option to maximumLineLength rule (Oleg Gaidarenko)</li>\n<li>Function expressions ignore getters and setters (Ruben Tytgat)</li>\n<li>Add &quot;true&quot; as a possible value for binary/unary rules (Oleg Gaidarenko)</li>\n<li>Improve disallowSpacesInsideObjectBrackets (Oleg Gaidarenko)</li>\n<li>Improve disallowSpacesInsideArrayBrackets (Oleg Gaidarenko)</li>\n<li>Improve disallowSpacesInsideArrayBrackets rule (Oleg Gaidarenko)</li>\n<li>Improve disallowSpacesInsideObjectBrackets rule (Oleg Gaidarenko)</li>\n<li>Improve disallowQuotedKeysInObjects rule (Oleg Gaidarenko)</li>\n<li>Improve requireSpacesInsideObjectBrackets rule (Oleg Gaidarenko)</li>\n<li>Improve handling comments for *SpaceAfterKeywords (Oleg Gaidarenko)</li>\n<li>Improve requireOperatorBeforeLineBreak (Oleg Gaidarenko)</li>\n<li>Improve defintions of operators in utils module (Oleg Gaidarenko)</li>\n<li>Improve requireSpaceBeforePostfixUnaryOperators (Oleg Gaidarenko)</li>\n<li>Improve disallowSpaceBeforePostfixUnaryOperators (Oleg Gaidarenko)</li>\n<li>Improve requireSpaceAfterPrefixUnaryOperators (Oleg Gaidarenko)</li>\n<li>Improve disallowSpaceAfterPrefixUnaryOperators (Oleg Gaidarenko)</li>\n<li>Improve disallowSpaceAfterBinaryOperators rule (Oleg Gaidarenko)</li>\n<li>Improve requireSpaceBeforeBinaryOperators rule (Oleg Gaidarenko)</li>\n<li>Improve disallowSpaceBeforeBinaryOperators rule (Oleg Gaidarenko)</li>\n<li>Improve requireSpaceAfterBinaryOperators rule (Oleg Gaidarenko)</li>\n<li>Improve requireOperatorBeforeLineBreak rule (Oleg Gaidarenko)</li>\n<li>Improve requireSpaceAfterPrefixUnaryOperators rule (Oleg Gaidarenko)</li>\n<li>Improve requireOperatorBeforeLineBreak rule (Oleg Gaidarenko)</li>\n<li>Differentiate errors for requireSpaceAfterKeywords (Oleg Gaidarenko)</li>\n<li>Modify lint options of jshint and jscs (Oleg Gaidarenko)</li>\n<li>Test Cleanup (Oleg Gaidarenko)</li>\n<li>Throw error if specified preset does not exist (Oleg Gaidarenko)</li>\n<li>utils: Remove duplicate &#39;+=&#39; from binaryOperators (Timo Tijhof)</li>\n<li>Various readme fixes (Syoichi Tsuyuhara)</li>\n<li>Provide friendly message for corrupted config (Oleg Gaidarenko)</li>\n<li>Use new Vow API (Jordan Harband)</li>\n<li>Update Mocha (Jordan Harband)</li>\n<li>Update dependencies (Jordan Harband)</li>\n<li>Various improvements to the utils module (Oleg Gaidarenko)</li>\n<li>&quot;null&quot; must be a quoted key in IE 6-8 (Jordan Harband)</li>\n<li>Change signature of findOperatorByRangeStart (Oleg Gaidarenko)</li>\n<li>Add isTokenParenthesis method to token helper (Oleg Gaidarenko)</li>\n<li>Improve getTokenByRangeStart method (Oleg Gaidarenko)</li>\n<li>Correct docs for requireSpacesInsideParentheses (Oleg Gaidarenko)</li>\n<li>readme: Clean up assignment operators (Timo Tijhof)</li>\n</ul>\n<h2 id=\"version-1-4-5\">Version 1.4.5</h2>\n<ul>\n<li>Hotfix: Fix binary rules for &quot;,&quot; and &quot;=&quot; operators (@markelog)</li>\n</ul>\n<h2 id=\"version-1-4-4\">Version 1.4.4</h2>\n<ul>\n<li>Improve <code>requireSpaceAfterBinaryOperators</code> rule (@markelog)</li>\n<li>Improve <code>disallowSpaceAfterBinaryOperators</code> rule (@markelog)</li>\n<li>Improve <code>requireSpaceBeforeBinaryOperators</code> rule (@markelog)</li>\n<li>Improve <code>disallowSpaceBeforeBinaryOperators</code> rule (@markelog)</li>\n<li>Update google preset (@markelog)</li>\n<li>Fixes <code>requirePaddingNewlinesInBlocks</code>: support multi-line padding (@zz85)</li>\n<li>Update error message when no config is found (@mikesherov)</li>\n<li>Rule <code>requireSpacesInConditionalExpression</code> (@mikesherov)</li>\n<li>Rule <code>disallowSpacesInConditionalExpression</code> (@mikesherov)</li>\n<li>Fixes for <code>validateIndentation</code> rule: fix more weird onevar constructs and associated indentation rules. (@mikesherov)</li>\n<li>Fixes for <code>validateIndentation</code> rule: fix bug when IfStatement test contains a BlockStatement</li>\n</ul>\n<h2 id=\"version-1-4-3\">Version 1.4.3:</h2>\n<ul>\n<li>Presets folder was missing in the package (@mdevils).</li>\n</ul>\n<h2 id=\"version-1-4-2\">Version 1.4.2:</h2>\n<ul>\n<li>Rule <code>requireSpaceAfterKeywords</code>: do not fail on linebreaks (@mdevils).</li>\n</ul>\n<h2 id=\"version-1-4-1\">Version 1.4.1:</h2>\n<ul>\n<li>Rule <code>disallowPaddingNewlinesInBlocks</code>: check for comments in the whitespace. Fixes #347 (@mikesherov).</li>\n<li>Introduce extensions section in README (@zxqfox)</li>\n<li>Fixes for <code>validateIndentation</code> rule: properly validate finally clauses. Fixes #311 (@mikesherov).</li>\n<li>Fixes for <code>validateIndentation</code> rule: tests for holes in array and more complex temporary fix for it (@zxqfox).</li>\n<li>Fixes for <code>validateIndentation</code> rule: allow for extra indents when first variable\nin a declaration is multi-line (@mikesherov).</li>\n<li>Fixes for <code>validateIndentation</code> rule: prevent false positive when array elements are\non same line as array opener, but array is not single line. Fixes #353 (@mikesherov)</li>\n<li>Restructuration of lib/test files (@markelog)</li>\n</ul>\n<h2 id=\"version-1-4-0\">Version 1.4.0:</h2>\n<ul>\n<li>Dropped <code>node.js</code> 0.8 support.</li>\n<li>Update all dependencies to their latest versions except <code>vow</code>/<code>vow-fs</code> (@XhmikosR).</li>\n<li>Add dependency status badges (@XhmikosR).</li>\n<li>Advanced search for the configuration files (@markelog).</li>\n<li>Improve <code>requireSpaceAfterKeywords</code> rule: trigger error if there is more then two spaces (@markelog).</li>\n<li>Rule <code>spaceAfterKeywords</code>: fix up funarg issue (@markelog).</li>\n<li>Make <code>requireMultipleVarDecl</code> rule more like onevar (@markelog).</li>\n<li>Allow comments in parentheses for rule <code>disallowSpacesInsideParentheses</code> (@Famlam).</li>\n<li>Extract own settings into google preset (@jzaefferer).</li>\n<li>Rule <code>disallowTrailingComma</code> (@rxin).</li>\n<li>Rule <code>requireTrailingComma</code> (@rxin).</li>\n<li>Rule <code>disallowSpaceBeforeBlockStatements</code> (@rxin).</li>\n<li>Rule <code>requireSpaceBeforeBlockStatements</code> (@rxin).</li>\n<li>Rule <code>requireBlocksOnNewline</code> (@mikesherov).</li>\n<li>Rule <code>requirePaddingNewlinesInBlock</code> (@mikesherov).</li>\n<li>Rule <code>disallowPaddingNewlinesInBlock</code> (@mikesherov).</li>\n</ul>\n<h2 id=\"version-1-3-0\">Version 1.3.0:</h2>\n<ul>\n<li>New JSCS config format: <code>.jscsrc</code>. JSON-file with comments.</li>\n<li>Rule <code>requireBlocksOnNewline</code> (@Famlam).</li>\n<li>Rule <code>requireSpacesInAnonymousFunctionExpression</code> (@jamesallardice).</li>\n<li>Rule <code>disallowSpacesInAnonymousFunctionExpression</code> (@jamesallardice).</li>\n<li>Rule <code>requireSpacesInNamedFunctionExpression</code> (@jamesallardice).</li>\n<li>Rule <code>disallowSpacesInNamedFunctionExpression</code> (@jamesallardice).</li>\n<li>Custom path to reporter (@Adeel).</li>\n<li>Option <code>escape</code> for rule <code>validateQuote</code> (@mikesherov).</li>\n<li>Fixed <code>validateIndentation</code> rule (@mikesherov).</li>\n<li>Fixed <code>excludeFiles</code> option (@markelog).</li>\n<li>CLI/Reporter fixes (@markelog, @am11).</li>\n<li>Documentation fixes (@tenorok).</li>\n<li>Minor tweaks (@XhmikosR).</li>\n</ul>\n<h2 id=\"version-1-2-4\">Version 1.2.4:</h2>\n<ul>\n<li>Fixed typos.</li>\n<li>Fixed <code>validateIndentation</code> rule.</li>\n<li>Sorting errors.</li>\n</ul>\n<h2 id=\"version-1-2-3\">Version 1.2.3:</h2>\n<ul>\n<li>New reporter: <code>inline</code> (@clochix).</li>\n<li>Fixed for rule <code>requireDotNotation</code> (@ikokostya).</li>\n</ul>\n<h2 id=\"version-1-2-2\">Version 1.2.2:</h2>\n<ul>\n<li>Fixed case with number for <code>requireDotNotation</code> rule (@andrewblond).</li>\n</ul>\n<h2 id=\"version-1-2-1\">Version 1.2.1:</h2>\n<ul>\n<li>Fix in error message for rule <code>maximumLineLength</code> (@pdehaan).</li>\n</ul>\n<h2 id=\"version-1-2-0\">Version 1.2.0:</h2>\n<ul>\n<li>Rule <code>requireCommaBeforeLineBreak</code> (@mikesherov).</li>\n<li>Rule <code>disallowCommaBeforeLineBreak</code> (@mikesherov).</li>\n<li>Rule <code>requireDotNotation</code> (@mikesherov).</li>\n<li>Rule <code>requireCamelCaseOrUpperCaseIdentifiers</code> (@mikesherov).</li>\n<li>Rule <code>disallowEmptyBlocks</code> (@mikesherov).</li>\n<li>Rule <code>validateQuoteMarks</code> (@mikesherov).</li>\n<li>Rule <code>requireParenthesesAroundIIFE</code> (@mikesherov).</li>\n<li>Rule <code>requireOperatorBeforeLineBreak</code> (@mikesherov).</li>\n<li>Rule <code>requireCapitalizedConstructors</code> (@mikesherov).</li>\n<li>Rule <code>disallowDanglingUnderscores</code> (@mikesherov).</li>\n<li>Rule <code>disallowTrailingWhitespace</code> (@mikesherov).</li>\n<li>Сurly brace checking for &#39;case&#39; and &#39;default&#39; statements (@mikesherov).</li>\n<li>Rule <code>maximumLineLength</code> (@mikesherov).</li>\n<li>Rule <code>disallowMixedSpacesAndTabs</code> (@mikesherov).</li>\n<li>Rule <code>validateIndentation</code> (@mikesherov).</li>\n<li>README: Reformat to use headings (@nschonni).</li>\n<li>ES3 future reserved words added to tokenIsReservedWord() (@maxatwork).</li>\n<li>Fixes for: requireSpaceBeforePostfixUnaryOperators, requireSpaceAfterPrefixUnaryOperators,\ndisallowSpaceBeforePostfixUnaryOperators, disallowSpaceAfterPrefixUnaryOperators (@mdevils).</li>\n<li>Rule <code>disallowMultipleLineStrings</code> (@mikesherov).</li>\n</ul>\n<h2 id=\"version-1-0-15\">Version 1.0.15:</h2>\n<ul>\n<li>junit reporter (@markelog).</li>\n</ul>\n<h2 id=\"version-1-0-14\">Version 1.0.14:</h2>\n<ul>\n<li>Option <code>additionalRules</code> (@markelog).</li>\n<li>disallowQuotedKeysInObjects: Exclusion array (@nschonni).</li>\n</ul>\n<h2 id=\"version-1-0-13\">Version 1.0.13:</h2>\n<ul>\n<li>Option <code>validateLineBreaks</code> (@twoRoger).</li>\n</ul>\n<h2 id=\"version-1-0-12\">Version 1.0.12:</h2>\n<ul>\n<li>Fixes for jsdoc params.</li>\n</ul>\n<h2 id=\"version-1-0-11\">Version 1.0.11:</h2>\n<ul>\n<li>Prefix unary rules: <code>disallowSpaceAfterPrefixUnaryOperators</code>, <code>requireSpaceAfterPrefixUnaryOperators</code> (@mishaberezin).</li>\n<li>Postfix unary rules: <code>disallowSpaceBeforePostfixUnaryOperators</code>, <code>requireSpaceBeforePostfixUnaryOperators</code> (@mishaberezin).</li>\n</ul>\n<h2 id=\"version-1-0-10\">Version 1.0.10:</h2>\n<ul>\n<li>Reporter support — <code>console</code>, <code>text</code>, <code>checkstyle</code>.</li>\n</ul>\n<h2 id=\"version-1-0-9\">Version 1.0.9:</h2>\n<ul>\n<li>Browser-compatible version.</li>\n<li>Fix for <code>disallowMultipleLineBreaks</code> option to report only once per each sequence of line breaks.</li>\n<li>Fix for <code>disallowMultipleLineBreaks</code> option to work properly when CRLF line break is used.</li>\n</ul>\n<h2 id=\"version-1-0-8\">Version 1.0.8:</h2>\n<ul>\n<li>Fixes for <code>safeContextKeyword</code>.</li>\n</ul>\n<h2 id=\"version-1-0-7\">Version 1.0.7:</h2>\n<ul>\n<li>Disallow spaces inside parentheses (@ignovak).</li>\n</ul>\n<h2 id=\"version-1-0-6\">Version 1.0.6:</h2>\n<ul>\n<li>Convert tabs into spaces (@markelog).</li>\n<li>Report illegal space between nested closing curly braces (@twoRoger).</li>\n<li>Use absolute path to config when specified (@vtambourine).</li>\n<li>safeContextKeyword option to check &quot;var that = this&quot; expressions (@doochik).</li>\n</ul>\n<h2 id=\"version-1-0-4-1-0-5\">Version 1.0.4-1.0.5:</h2>\n<ul>\n<li>Fixed mistype <code>disallowMulipleVarDecl</code> -&gt; <code>disallowMultipleVarDecl</code>.</li>\n<li>Fixed error for invalid symlink checking.</li>\n</ul>\n<h2 id=\"version-1-0-3\">Version 1.0.3:</h2>\n<ul>\n<li>Changed behaviour for <code>disallowMultipleVarDecl</code> options. Now accepts multiple var decl in <code>for</code> decl.</li>\n</ul>\n<h2 id=\"version-1-0-2\">Version 1.0.2:</h2>\n<ul>\n<li>Option <code>requireSpacesInsideArrayBrackets</code> (@mishanga).</li>\n</ul>\n<h2 id=\"version-1-0-1\">Version 1.0.1:</h2>\n<ul>\n<li>Not reporting about extra quotes for zero-starting numbers in <code>disallowQuotedKeysInObjects</code>.</li>\n</ul>\n<h2 id=\"version-1-0-0\">Version 1.0.0:</h2>\n<ul>\n<li>Camel-case configuration options.</li>\n<li>Option <code>requireAlignedObjectValues</code>.</li>\n<li>Option <code>requireSpaceAfterObjectKeys</code>.</li>\n<li>JSDoc for core functions and classes.</li>\n<li>Fix error position for disallowSpacesInsideObjectBrackets and disallowSpacesInsideArrayBrackets.</li>\n</ul>\n<h2 id=\"version-0-0-12\">Version 0.0.12:</h2>\n<ul>\n<li>Fix in <code>disallowSpaceAfterObjectKeys</code> location reporting.</li>\n</ul>\n<h2 id=\"version-0-0-11\">Version 0.0.11:</h2>\n<ul>\n<li>Option <code>disallowSpaceAfterObjectKeys</code>.</li>\n<li>Option <code>disallowSpacesInsideArrayBrackets</code>.</li>\n<li>Do not automatically exclude hidden files.</li>\n</ul>\n<h2 id=\"version-0-0-10\">Version 0.0.10:</h2>\n<ul>\n<li>Fix in <code>disallowQuotedKeysInObjects</code>.</li>\n</ul>\n<h2 id=\"version-0-0-9\">Version 0.0.9:</h2>\n<ul>\n<li>Fix in <code>disallowQuotedKeysInObjects</code>.</li>\n</ul>\n<h2 id=\"version-0-0-8\">Version 0.0.8:</h2>\n<ul>\n<li>Fix in <code>requireSpacesInsideObjectBrackets</code>.</li>\n<li>Option <code>disallowQuotedKeysInObjects</code>.</li>\n</ul>\n<h2 id=\"version-0-0-7\">Version 0.0.7:</h2>\n<ul>\n<li>Option <code>requireSpacesInsideObjectBrackets</code>.</li>\n<li>Option <code>disallowSpacesInsideObjectBrackets</code>.</li>\n</ul>\n<h2 id=\"version-0-0-6\">Version 0.0.6:</h2>\n<ul>\n<li>Fixes incorrent checkPath behavior.</li>\n</ul>\n<h2 id=\"version-0-0-5\">Version 0.0.5:</h2>\n<ul>\n<li>.jshintrc config.</li>\n<li>Error message format fixes.</li>\n</ul>\n<h2 id=\"version-0-0-4\">Version 0.0.4:</h2>\n<ul>\n<li>Option <code>disallowYodaConditions</code>.</li>\n<li>Option <code>requireMultipleVarDecl</code>.</li>\n</ul>\n<h2 id=\"version-0-0-3\">Version 0.0.3:</h2>\n<ul>\n<li>Option <code>excludeFiles</code>, which accepts patterns.</li>\n</ul>\n<h2 id=\"version-0-0-2\">Version 0.0.2:</h2>\n<ul>\n<li>Link to parent nodes.</li>\n</ul>\n<h2 id=\"version-0-0-1\">Version 0.0.1:</h2>\n<ul>\n<li>Initial implementation.</li>\n</ul>\n"}